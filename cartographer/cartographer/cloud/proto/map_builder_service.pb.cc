// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_service.proto

#include "cartographer/cloud/proto/map_builder_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace cloud {
namespace proto {
class SensorIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorId> _instance;
} _SensorId_default_instance_;
class AddTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTrajectoryRequest> _instance;
} _AddTrajectoryRequest_default_instance_;
class SensorMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorMetadata> _instance;
} _SensorMetadata_default_instance_;
class SensorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorData> _instance;
  const ::cartographer::sensor::proto::OdometryData* odometry_data_;
  const ::cartographer::sensor::proto::ImuData* imu_data_;
  const ::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data_;
  const ::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data_;
  const ::cartographer::sensor::proto::LandmarkData* landmark_data_;
  const ::cartographer::mapping::proto::LocalSlamResultData* local_slam_result_data_;
} _SensorData_default_instance_;
class AddTrajectoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTrajectoryResponse> _instance;
} _AddTrajectoryResponse_default_instance_;
class AddSensorDataBatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddSensorDataBatchRequest> _instance;
} _AddSensorDataBatchRequest_default_instance_;
class AddOdometryDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddOdometryDataRequest> _instance;
} _AddOdometryDataRequest_default_instance_;
class AddImuDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddImuDataRequest> _instance;
} _AddImuDataRequest_default_instance_;
class AddRangefinderDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRangefinderDataRequest> _instance;
} _AddRangefinderDataRequest_default_instance_;
class AddFixedFramePoseDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFixedFramePoseDataRequest> _instance;
} _AddFixedFramePoseDataRequest_default_instance_;
class AddLandmarkDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLandmarkDataRequest> _instance;
} _AddLandmarkDataRequest_default_instance_;
class FinishTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinishTrajectoryRequest> _instance;
} _FinishTrajectoryRequest_default_instance_;
class DeleteTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTrajectoryRequest> _instance;
} _DeleteTrajectoryRequest_default_instance_;
class ReceiveLocalSlamResultsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveLocalSlamResultsRequest> _instance;
} _ReceiveLocalSlamResultsRequest_default_instance_;
class LocalSlamInsertionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalSlamInsertionResult> _instance;
} _LocalSlamInsertionResult_default_instance_;
class ReceiveLocalSlamResultsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveLocalSlamResultsResponse> _instance;
} _ReceiveLocalSlamResultsResponse_default_instance_;
class ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse> _instance;
} _ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_default_instance_;
class ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse> _instance;
} _ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_default_instance_;
class ReceiveGlobalSlamOptimizationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveGlobalSlamOptimizationsResponse> _instance;
} _ReceiveGlobalSlamOptimizationsResponse_default_instance_;
class GetSubmapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSubmapRequest> _instance;
} _GetSubmapRequest_default_instance_;
class LoadStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadStateRequest> _instance;
  const ::cartographer::mapping::proto::SerializedData* serialized_data_;
  const ::cartographer::mapping::proto::SerializationHeader* serialization_header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
} _LoadStateRequest_default_instance_;
class TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse> _instance;
} _TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_default_instance_;
class TrajectoryRemappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryRemapping> _instance;
} _TrajectoryRemapping_default_instance_;
class LoadStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadStateResponse> _instance;
} _LoadStateResponse_default_instance_;
class LoadStateFromFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadStateFromFileRequest> _instance;
} _LoadStateFromFileRequest_default_instance_;
class LoadStateFromFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadStateFromFileResponse> _instance;
} _LoadStateFromFileResponse_default_instance_;
class GetSubmapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSubmapResponse> _instance;
} _GetSubmapResponse_default_instance_;
class TrajectoryNodePose_ConstantPoseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryNodePose_ConstantPoseData> _instance;
} _TrajectoryNodePose_ConstantPoseData_default_instance_;
class TrajectoryNodePoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryNodePose> _instance;
} _TrajectoryNodePose_default_instance_;
class GetTrajectoryNodePosesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrajectoryNodePosesResponse> _instance;
} _GetTrajectoryNodePosesResponse_default_instance_;
class GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse> _instance;
} _GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_default_instance_;
class GetTrajectoryStatesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrajectoryStatesResponse> _instance;
} _GetTrajectoryStatesResponse_default_instance_;
class GetLandmarkPosesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLandmarkPosesResponse> _instance;
} _GetLandmarkPosesResponse_default_instance_;
class SetLandmarkPoseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLandmarkPoseRequest> _instance;
} _SetLandmarkPoseRequest_default_instance_;
class SubmapPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapPose> _instance;
} _SubmapPose_default_instance_;
class GetAllSubmapPosesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllSubmapPosesResponse> _instance;
} _GetAllSubmapPosesResponse_default_instance_;
class GetLocalToGlobalTransformRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocalToGlobalTransformRequest> _instance;
} _GetLocalToGlobalTransformRequest_default_instance_;
class GetLocalToGlobalTransformResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocalToGlobalTransformResponse> _instance;
} _GetLocalToGlobalTransformResponse_default_instance_;
class GetConstraintsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConstraintsResponse> _instance;
} _GetConstraintsResponse_default_instance_;
class WriteStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteStateResponse> _instance;
  const ::cartographer::mapping::proto::SerializationHeader* header_;
  const ::cartographer::mapping::proto::SerializedData* serialized_data_;
} _WriteStateResponse_default_instance_;
class WriteStateToFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteStateToFileRequest> _instance;
} _WriteStateToFileRequest_default_instance_;
class WriteStateToFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteStateToFileResponse> _instance;
} _WriteStateToFileResponse_default_instance_;
class IsTrajectoryFinishedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsTrajectoryFinishedRequest> _instance;
} _IsTrajectoryFinishedRequest_default_instance_;
class IsTrajectoryFinishedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsTrajectoryFinishedResponse> _instance;
} _IsTrajectoryFinishedResponse_default_instance_;
class IsTrajectoryFrozenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsTrajectoryFrozenRequest> _instance;
} _IsTrajectoryFrozenRequest_default_instance_;
class IsTrajectoryFrozenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsTrajectoryFrozenResponse> _instance;
} _IsTrajectoryFrozenResponse_default_instance_;
class OKagv_StartTrajectoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_StartTrajectoryResponse> _instance;
} _OKagv_StartTrajectoryResponse_default_instance_;
class OKagv_FinishTrajectoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_FinishTrajectoryResponse> _instance;
} _OKagv_FinishTrajectoryResponse_default_instance_;
class OKagv_WaitTrajectoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_WaitTrajectoryResponse> _instance;
} _OKagv_WaitTrajectoryResponse_default_instance_;
class OKagv_GetOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_GetOrderResponse> _instance;
} _OKagv_GetOrderResponse_default_instance_;
class OKagv_LoadTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_LoadTrajectoryRequest> _instance;
} _OKagv_LoadTrajectoryRequest_default_instance_;
class OKagv_LoadTrajectoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_LoadTrajectoryResponse> _instance;
} _OKagv_LoadTrajectoryResponse_default_instance_;
class OKagv_LocalizeTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_LocalizeTrajectoryRequest> _instance;
} _OKagv_LocalizeTrajectoryRequest_default_instance_;
class OKagv_LocalizeTrajectoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_LocalizeTrajectoryResponse> _instance;
} _OKagv_LocalizeTrajectoryResponse_default_instance_;
class OKagv_StartTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_StartTrajectoryRequest> _instance;
} _OKagv_StartTrajectoryRequest_default_instance_;
class OKagv_SaveTrajectoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_SaveTrajectoryRequest> _instance;
} _OKagv_SaveTrajectoryRequest_default_instance_;
class OKagv_GetTrajectoryStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OKagv_GetTrajectoryStateResponse> _instance;
} _OKagv_GetTrajectoryStateResponse_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
static void InitDefaultsscc_info_AddFixedFramePoseDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddFixedFramePoseDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddFixedFramePoseDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddFixedFramePoseDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddFixedFramePoseDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_AddImuDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddImuDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddImuDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddImuDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddImuDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddImuDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_AddLandmarkDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddLandmarkDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddLandmarkDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddLandmarkDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddLandmarkDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_AddOdometryDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddOdometryDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddOdometryDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddOdometryDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddOdometryDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddRangefinderDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddRangefinderDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_AddSensorDataBatchRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddSensorDataBatchRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddSensorDataBatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddSensorDataBatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddSensorDataBatchRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddSensorDataBatchRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_AddTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_AddTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddTrajectoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddTrajectoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_DeleteTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::DeleteTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::DeleteTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FinishTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_FinishTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::FinishTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::FinishTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinishTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinishTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetAllSubmapPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetAllSubmapPosesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetAllSubmapPosesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetAllSubmapPosesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllSubmapPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAllSubmapPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetConstraintsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetConstraintsResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetConstraintsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetConstraintsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConstraintsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConstraintsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_GetLandmarkPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetLandmarkPosesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetLandmarkPosesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetLandmarkPosesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLandmarkPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLandmarkPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_GetLocalToGlobalTransformRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetLocalToGlobalTransformRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocalToGlobalTransformRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLocalToGlobalTransformRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetLocalToGlobalTransformResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetLocalToGlobalTransformResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocalToGlobalTransformResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLocalToGlobalTransformResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_GetSubmapRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetSubmapRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetSubmapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetSubmapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSubmapRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSubmapRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_GetSubmapResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetSubmapResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetSubmapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetSubmapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSubmapResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSubmapResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_GetTrajectoryNodePosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetTrajectoryNodePosesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTrajectoryNodePosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTrajectoryNodePosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetTrajectoryStatesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetTrajectoryStatesResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetTrajectoryStatesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::GetTrajectoryStatesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTrajectoryStatesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTrajectoryStatesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_IsTrajectoryFinishedRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFinishedRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFinishedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFinishedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsTrajectoryFinishedRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsTrajectoryFinishedRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_IsTrajectoryFinishedResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFinishedResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFinishedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFinishedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsTrajectoryFinishedResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsTrajectoryFinishedResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_IsTrajectoryFrozenRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFrozenRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFrozenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFrozenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsTrajectoryFrozenRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsTrajectoryFrozenRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_IsTrajectoryFrozenResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_IsTrajectoryFrozenResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::IsTrajectoryFrozenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::IsTrajectoryFrozenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsTrajectoryFrozenResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsTrajectoryFrozenResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LoadStateFromFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateFromFileRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateFromFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateFromFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadStateFromFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadStateFromFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LoadStateFromFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateFromFileResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateFromFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateFromFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadStateFromFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadStateFromFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LoadStateRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadStateRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadStateRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

static void InitDefaultsscc_info_LoadStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LoadStateResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LoadStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LoadStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_LocalSlamInsertionResult_default_instance_;
    new (ptr) ::cartographer::cloud::proto::LocalSlamInsertionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::LocalSlamInsertionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_OKagv_FinishTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_FinishTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_FinishTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_FinishTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_GetOrderResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_GetOrderResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_GetOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_GetOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_GetOrderResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_GetOrderResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_GetTrajectoryStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_GetTrajectoryStateResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_GetTrajectoryStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_GetTrajectoryStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_LoadTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_LoadTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_LoadTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_LoadTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_LoadTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_LoadTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_LoadTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_LoadTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_LocalizeTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_LocalizeTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OKagv_LocalizeTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OKagv_LocalizeTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_OKagv_LocalizeTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_LocalizeTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_LocalizeTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_LocalizeTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_SaveTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_SaveTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_SaveTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_SaveTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_StartTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_StartTrajectoryRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_StartTrajectoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_StartTrajectoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OKagv_StartTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OKagv_StartTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_OKagv_StartTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_StartTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_StartTrajectoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_StartTrajectoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_StartTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_StartTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_OKagv_WaitTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_OKagv_WaitTrajectoryResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OKagv_WaitTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OKagv_WaitTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ReceiveGlobalSlamOptimizationsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReceiveGlobalSlamOptimizationsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReceiveGlobalSlamOptimizationsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_ReceiveLocalSlamResultsRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveLocalSlamResultsRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReceiveLocalSlamResultsRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReceiveLocalSlamResultsRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ReceiveLocalSlamResultsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReceiveLocalSlamResultsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReceiveLocalSlamResultsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorData_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

static void InitDefaultsscc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorId_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorMetadata_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SetLandmarkPoseRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SetLandmarkPoseRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SetLandmarkPoseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SetLandmarkPoseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetLandmarkPoseRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetLandmarkPoseRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SubmapPose_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SubmapPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SubmapPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryNodePose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::TrajectoryNodePose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryNodePose_ConstantPoseData_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryRemapping_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryRemapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::TrajectoryRemapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse();
  }
  ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_WriteStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_WriteStateResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::WriteStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::WriteStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WriteStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WriteStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

static void InitDefaultsscc_info_WriteStateToFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_WriteStateToFileRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::WriteStateToFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::WriteStateToFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteStateToFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteStateToFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_WriteStateToFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_WriteStateToFileResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::WriteStateToFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::WriteStateToFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteStateToFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteStateToFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorId, id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorId, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, expected_sensor_ids_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, trajectory_builder_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, sensor_metadata_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, odometry_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, imu_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, timed_point_cloud_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, fixed_frame_pose_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, landmark_data_),
  offsetof(::cartographer::cloud::proto::SensorDataDefaultTypeInternal, local_slam_result_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorData, sensor_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddTrajectoryResponse, trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddSensorDataBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddSensorDataBatchRequest, sensor_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddOdometryDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddOdometryDataRequest, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddOdometryDataRequest, odometry_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddImuDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddImuDataRequest, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddImuDataRequest, imu_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, timed_point_cloud_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddFixedFramePoseDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddFixedFramePoseDataRequest, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddFixedFramePoseDataRequest, fixed_frame_pose_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddLandmarkDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddLandmarkDataRequest, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddLandmarkDataRequest, landmark_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::FinishTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::FinishTrajectoryRequest, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::FinishTrajectoryRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::DeleteTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::DeleteTrajectoryRequest, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::DeleteTrajectoryRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LocalSlamInsertionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LocalSlamInsertionResult, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, local_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse, insertion_result_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse, last_optimized_node_ids_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse, last_optimized_submap_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapRequest, submap_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cartographer::cloud::proto::LoadStateRequestDefaultTypeInternal, serialized_data_),
  offsetof(::cartographer::cloud::proto::LoadStateRequestDefaultTypeInternal, serialization_header_),
  offsetof(::cartographer::cloud::proto::LoadStateRequestDefaultTypeInternal, client_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, load_frozen_state_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateRequest, state_chunk_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryRemapping, serialized_trajectories_to_trajectories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateResponse, trajectory_remapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, file_path_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileRequest, load_frozen_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::LoadStateFromFileResponse, trajectory_remapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapResponse, submap_query_response_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetSubmapResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData, local_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, node_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, global_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::TrajectoryNodePose, constant_pose_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryNodePosesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryNodePosesResponse, node_poses_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetTrajectoryStatesResponse, trajectories_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetLandmarkPosesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetLandmarkPosesResponse, landmark_poses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SetLandmarkPoseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SetLandmarkPoseRequest, landmark_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, submap_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, submap_version_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SubmapPose, global_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetAllSubmapPosesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetAllSubmapPosesResponse, submap_poses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetLocalToGlobalTransformResponse, local_to_global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetConstraintsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::GetConstraintsResponse, constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cartographer::cloud::proto::WriteStateResponseDefaultTypeInternal, header_),
  offsetof(::cartographer::cloud::proto::WriteStateResponseDefaultTypeInternal, serialized_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateResponse, state_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileRequest, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileResponse, success_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileResponse, code_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::WriteStateToFileResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFinishedResponse, is_finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenRequest, trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::IsTrajectoryFrozenResponse, is_frozen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryResponse, state_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryResponse, code_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_GetOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_GetOrderResponse, order_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest, use_initial_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest, initial_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse, state_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse, confidence_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest, trajectory_type_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest, use_initial_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest, initial_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest, relative_to_trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest, include_unfinished_submaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse, code_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::cloud::proto::SensorId)},
  { 7, -1, sizeof(::cartographer::cloud::proto::AddTrajectoryRequest)},
  { 15, -1, sizeof(::cartographer::cloud::proto::SensorMetadata)},
  { 23, -1, sizeof(::cartographer::cloud::proto::SensorData)},
  { 36, -1, sizeof(::cartographer::cloud::proto::AddTrajectoryResponse)},
  { 42, -1, sizeof(::cartographer::cloud::proto::AddSensorDataBatchRequest)},
  { 48, -1, sizeof(::cartographer::cloud::proto::AddOdometryDataRequest)},
  { 55, -1, sizeof(::cartographer::cloud::proto::AddImuDataRequest)},
  { 62, -1, sizeof(::cartographer::cloud::proto::AddRangefinderDataRequest)},
  { 69, -1, sizeof(::cartographer::cloud::proto::AddFixedFramePoseDataRequest)},
  { 76, -1, sizeof(::cartographer::cloud::proto::AddLandmarkDataRequest)},
  { 83, -1, sizeof(::cartographer::cloud::proto::FinishTrajectoryRequest)},
  { 90, -1, sizeof(::cartographer::cloud::proto::DeleteTrajectoryRequest)},
  { 97, -1, sizeof(::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest)},
  { 103, -1, sizeof(::cartographer::cloud::proto::LocalSlamInsertionResult)},
  { 109, -1, sizeof(::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse)},
  { 119, 126, sizeof(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse)},
  { 128, 135, sizeof(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse)},
  { 137, -1, sizeof(::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse)},
  { 144, -1, sizeof(::cartographer::cloud::proto::GetSubmapRequest)},
  { 150, -1, sizeof(::cartographer::cloud::proto::LoadStateRequest)},
  { 160, 167, sizeof(::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse)},
  { 169, -1, sizeof(::cartographer::cloud::proto::TrajectoryRemapping)},
  { 175, -1, sizeof(::cartographer::cloud::proto::LoadStateResponse)},
  { 181, -1, sizeof(::cartographer::cloud::proto::LoadStateFromFileRequest)},
  { 189, -1, sizeof(::cartographer::cloud::proto::LoadStateFromFileResponse)},
  { 195, -1, sizeof(::cartographer::cloud::proto::GetSubmapResponse)},
  { 202, -1, sizeof(::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData)},
  { 209, -1, sizeof(::cartographer::cloud::proto::TrajectoryNodePose)},
  { 217, -1, sizeof(::cartographer::cloud::proto::GetTrajectoryNodePosesResponse)},
  { 223, 230, sizeof(::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse)},
  { 232, -1, sizeof(::cartographer::cloud::proto::GetTrajectoryStatesResponse)},
  { 238, -1, sizeof(::cartographer::cloud::proto::GetLandmarkPosesResponse)},
  { 244, -1, sizeof(::cartographer::cloud::proto::SetLandmarkPoseRequest)},
  { 250, -1, sizeof(::cartographer::cloud::proto::SubmapPose)},
  { 258, -1, sizeof(::cartographer::cloud::proto::GetAllSubmapPosesResponse)},
  { 264, -1, sizeof(::cartographer::cloud::proto::GetLocalToGlobalTransformRequest)},
  { 270, -1, sizeof(::cartographer::cloud::proto::GetLocalToGlobalTransformResponse)},
  { 276, -1, sizeof(::cartographer::cloud::proto::GetConstraintsResponse)},
  { 282, -1, sizeof(::cartographer::cloud::proto::WriteStateResponse)},
  { 290, -1, sizeof(::cartographer::cloud::proto::WriteStateToFileRequest)},
  { 296, -1, sizeof(::cartographer::cloud::proto::WriteStateToFileResponse)},
  { 304, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFinishedRequest)},
  { 310, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFinishedResponse)},
  { 316, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFrozenRequest)},
  { 322, -1, sizeof(::cartographer::cloud::proto::IsTrajectoryFrozenResponse)},
  { 328, -1, sizeof(::cartographer::cloud::proto::OKagv_StartTrajectoryResponse)},
  { 336, -1, sizeof(::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse)},
  { 342, -1, sizeof(::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse)},
  { 348, -1, sizeof(::cartographer::cloud::proto::OKagv_GetOrderResponse)},
  { 354, -1, sizeof(::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest)},
  { 360, -1, sizeof(::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse)},
  { 366, -1, sizeof(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest)},
  { 373, -1, sizeof(::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse)},
  { 380, -1, sizeof(::cartographer::cloud::proto::OKagv_StartTrajectoryRequest)},
  { 390, -1, sizeof(::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest)},
  { 397, -1, sizeof(::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_SensorId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_SensorMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_SensorData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddSensorDataBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddImuDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_FinishTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_DeleteTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_ReceiveLocalSlamResultsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_LocalSlamInsertionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_ReceiveGlobalSlamOptimizationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetSubmapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_LoadStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_TrajectoryRemapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_LoadStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_LoadStateFromFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_LoadStateFromFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetSubmapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_TrajectoryNodePose_ConstantPoseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetTrajectoryNodePosesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetTrajectoryStatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetLandmarkPosesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_SetLandmarkPoseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_SubmapPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetAllSubmapPosesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetLocalToGlobalTransformRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetLocalToGlobalTransformResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_GetConstraintsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_WriteStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_WriteStateToFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_WriteStateToFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFinishedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFinishedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFrozenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_IsTrajectoryFrozenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_StartTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_FinishTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_WaitTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_GetOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_LoadTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_LoadTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_LocalizeTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_LocalizeTrajectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_StartTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_SaveTrajectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_OKagv_GetTrajectoryStateResponse_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2cartographer/cloud/proto/map_builder_s"
  "ervice.proto\022\030cartographer.cloud.proto\032+"
  "cartographer/mapping/proto/pose_graph.pr"
  "oto\032.cartographer/mapping/proto/serializ"
  "ation.proto\0325cartographer/mapping/proto/"
  "submap_visualization.proto\032;cartographer"
  "/mapping/proto/trajectory_builder_option"
  "s.proto\032&cartographer/sensor/proto/senso"
  "r.proto\032,cartographer/transform/proto/tr"
  "ansform.proto\032\033google/protobuf/empty.pro"
  "to\"J\n\010SensorId\022\n\n\002id\030\001 \001(\t\0222\n\004type\030\002 \001(\016"
  "2$.cartographer.cloud.proto.SensorType\"\304"
  "\001\n\024AddTrajectoryRequest\022\?\n\023expected_sens"
  "or_ids\030\003 \003(\0132\".cartographer.cloud.proto."
  "SensorId\022X\n\032trajectory_builder_options\030\002"
  " \001(\01324.cartographer.mapping.proto.Trajec"
  "toryBuilderOptions\022\021\n\tclient_id\030\004 \001(\t\"M\n"
  "\016SensorMetadata\022\025\n\rtrajectory_id\030\001 \001(\005\022\021"
  "\n\tsensor_id\030\002 \001(\t\022\021\n\tclient_id\030\003 \001(\t\"\217\004\n"
  "\nSensorData\022A\n\017sensor_metadata\030\001 \001(\0132(.c"
  "artographer.cloud.proto.SensorMetadata\022@"
  "\n\rodometry_data\030\002 \001(\0132\'.cartographer.sen"
  "sor.proto.OdometryDataH\000\0226\n\010imu_data\030\003 \001"
  "(\0132\".cartographer.sensor.proto.ImuDataH\000"
  "\022P\n\026timed_point_cloud_data\030\004 \001(\0132..carto"
  "grapher.sensor.proto.TimedPointCloudData"
  "H\000\022N\n\025fixed_frame_pose_data\030\005 \001(\0132-.cart"
  "ographer.sensor.proto.FixedFramePoseData"
  "H\000\022@\n\rlandmark_data\030\006 \001(\0132\'.cartographer"
  ".sensor.proto.LandmarkDataH\000\022Q\n\026local_sl"
  "am_result_data\030\007 \001(\0132/.cartographer.mapp"
  "ing.proto.LocalSlamResultDataH\000B\r\n\013senso"
  "r_data\".\n\025AddTrajectoryResponse\022\025\n\rtraje"
  "ctory_id\030\001 \001(\005\"V\n\031AddSensorDataBatchRequ"
  "est\0229\n\013sensor_data\030\001 \003(\0132$.cartographer."
  "cloud.proto.SensorData\"\233\001\n\026AddOdometryDa"
  "taRequest\022A\n\017sensor_metadata\030\001 \001(\0132(.car"
  "tographer.cloud.proto.SensorMetadata\022>\n\r"
  "odometry_data\030\002 \001(\0132\'.cartographer.senso"
  "r.proto.OdometryData\"\214\001\n\021AddImuDataReque"
  "st\022A\n\017sensor_metadata\030\001 \001(\0132(.cartograph"
  "er.cloud.proto.SensorMetadata\0224\n\010imu_dat"
  "a\030\002 \001(\0132\".cartographer.sensor.proto.ImuD"
  "ata\"\256\001\n\031AddRangefinderDataRequest\022A\n\017sen"
  "sor_metadata\030\001 \001(\0132(.cartographer.cloud."
  "proto.SensorMetadata\022N\n\026timed_point_clou"
  "d_data\030\002 \001(\0132..cartographer.sensor.proto"
  ".TimedPointCloudData\"\257\001\n\034AddFixedFramePo"
  "seDataRequest\022A\n\017sensor_metadata\030\001 \001(\0132("
  ".cartographer.cloud.proto.SensorMetadata"
  "\022L\n\025fixed_frame_pose_data\030\002 \001(\0132-.cartog"
  "rapher.sensor.proto.FixedFramePoseData\"\233"
  "\001\n\026AddLandmarkDataRequest\022A\n\017sensor_meta"
  "data\030\001 \001(\0132(.cartographer.cloud.proto.Se"
  "nsorMetadata\022>\n\rlandmark_data\030\002 \001(\0132\'.ca"
  "rtographer.sensor.proto.LandmarkData\"C\n\027"
  "FinishTrajectoryRequest\022\025\n\rtrajectory_id"
  "\030\001 \001(\005\022\021\n\tclient_id\030\002 \001(\t\"C\n\027DeleteTraje"
  "ctoryRequest\022\025\n\rtrajectory_id\030\001 \001(\005\022\021\n\tc"
  "lient_id\030\002 \001(\t\"7\n\036ReceiveLocalSlamResult"
  "sRequest\022\025\n\rtrajectory_id\030\001 \001(\005\"O\n\030Local"
  "SlamInsertionResult\0223\n\007node_id\030\001 \001(\0132\".c"
  "artographer.mapping.proto.NodeId\"\216\002\n\037Rec"
  "eiveLocalSlamResultsResponse\022\025\n\rtrajecto"
  "ry_id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\0229\n\nlocal_"
  "pose\030\003 \001(\0132%.cartographer.transform.prot"
  "o.Rigid3d\0228\n\nrange_data\030\004 \001(\0132$.cartogra"
  "pher.sensor.proto.RangeData\022L\n\020insertion"
  "_result\030\005 \001(\01322.cartographer.cloud.proto"
  ".LocalSlamInsertionResult\"\354\003\n&ReceiveGlo"
  "balSlamOptimizationsResponse\022{\n\027last_opt"
  "imized_node_ids\030\001 \003(\0132Z.cartographer.clo"
  "ud.proto.ReceiveGlobalSlamOptimizationsR"
  "esponse.LastOptimizedNodeIdsEntry\022\177\n\031las"
  "t_optimized_submap_ids\030\002 \003(\0132\\.cartograp"
  "her.cloud.proto.ReceiveGlobalSlamOptimiz"
  "ationsResponse.LastOptimizedSubmapIdsEnt"
  "ry\032_\n\031LastOptimizedNodeIdsEntry\022\013\n\003key\030\001"
  " \001(\005\0221\n\005value\030\002 \001(\0132\".cartographer.mappi"
  "ng.proto.NodeId:\0028\001\032c\n\033LastOptimizedSubm"
  "apIdsEntry\022\013\n\003key\030\001 \001(\005\0223\n\005value\030\002 \001(\0132$"
  ".cartographer.mapping.proto.SubmapId:\0028\001"
  "\"K\n\020GetSubmapRequest\0227\n\tsubmap_id\030\001 \001(\0132"
  "$.cartographer.mapping.proto.SubmapId\"\351\001"
  "\n\020LoadStateRequest\022E\n\017serialized_data\030\001 "
  "\001(\0132*.cartographer.mapping.proto.Seriali"
  "zedDataH\000\022O\n\024serialization_header\030\002 \001(\0132"
  "/.cartographer.mapping.proto.Serializati"
  "onHeaderH\000\022\023\n\tclient_id\030\003 \001(\tH\000\022\031\n\021load_"
  "frozen_state\030\004 \001(\010B\r\n\013state_chunk\"\355\001\n\023Tr"
  "ajectoryRemapping\022\210\001\n\'serialized_traject"
  "ories_to_trajectories\030\001 \003(\0132W.cartograph"
  "er.cloud.proto.TrajectoryRemapping.Seria"
  "lizedTrajectoriesToTrajectoriesEntry\032K\n)"
  "SerializedTrajectoriesToTrajectoriesEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"`\n\021Loa"
  "dStateResponse\022K\n\024trajectory_remapping\030\001"
  " \001(\0132-.cartographer.cloud.proto.Trajecto"
  "ryRemapping\"[\n\030LoadStateFromFileRequest\022"
  "\021\n\tfile_path\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022\031\n"
  "\021load_frozen_state\030\003 \001(\010\"h\n\031LoadStateFro"
  "mFileResponse\022K\n\024trajectory_remapping\030\001 "
  "\001(\0132-.cartographer.cloud.proto.Trajector"
  "yRemapping\"w\n\021GetSubmapResponse\022O\n\025subma"
  "p_query_response\030\001 \001(\01320.cartographer.ma"
  "pping.proto.SubmapQuery.Response\022\021\n\terro"
  "r_msg\030\002 \001(\t\"\302\002\n\022TrajectoryNodePose\0223\n\007no"
  "de_id\030\001 \001(\0132\".cartographer.mapping.proto"
  ".NodeId\022:\n\013global_pose\030\002 \001(\0132%.cartograp"
  "her.transform.proto.Rigid3d\022Y\n\022constant_"
  "pose_data\030\003 \001(\0132=.cartographer.cloud.pro"
  "to.TrajectoryNodePose.ConstantPoseData\032`"
  "\n\020ConstantPoseData\022\021\n\ttimestamp\030\001 \001(\003\0229\n"
  "\nlocal_pose\030\002 \001(\0132%.cartographer.transfo"
  "rm.proto.Rigid3d\"b\n\036GetTrajectoryNodePos"
  "esResponse\022@\n\nnode_poses\030\001 \003(\0132,.cartogr"
  "apher.cloud.proto.TrajectoryNodePose\"\354\001\n"
  "\033GetTrajectoryStatesResponse\022h\n\022trajecto"
  "ries_state\030\001 \003(\0132L.cartographer.cloud.pr"
  "oto.GetTrajectoryStatesResponse.Trajecto"
  "riesStateEntry\032c\n\026TrajectoriesStateEntry"
  "\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0162).cartograp"
  "her.cloud.proto.TrajectoryState:\0028\001\"f\n\030G"
  "etLandmarkPosesResponse\022J\n\016landmark_pose"
  "s\030\001 \003(\01322.cartographer.mapping.proto.Pos"
  "eGraph.LandmarkPose\"c\n\026SetLandmarkPoseRe"
  "quest\022I\n\rlandmark_pose\030\001 \001(\01322.cartograp"
  "her.mapping.proto.PoseGraph.LandmarkPose"
  "\"\231\001\n\nSubmapPose\0227\n\tsubmap_id\030\001 \001(\0132$.car"
  "tographer.mapping.proto.SubmapId\022\026\n\016subm"
  "ap_version\030\002 \001(\005\022:\n\013global_pose\030\003 \001(\0132%."
  "cartographer.transform.proto.Rigid3d\"W\n\031"
  "GetAllSubmapPosesResponse\022:\n\014submap_pose"
  "s\030\001 \003(\0132$.cartographer.cloud.proto.Subma"
  "pPose\"9\n GetLocalToGlobalTransformReques"
  "t\022\025\n\rtrajectory_id\030\001 \001(\005\"c\n!GetLocalToGl"
  "obalTransformResponse\022>\n\017local_to_global"
  "\030\001 \001(\0132%.cartographer.transform.proto.Ri"
  "gid3d\"_\n\026GetConstraintsResponse\022E\n\013const"
  "raints\030\001 \003(\01320.cartographer.mapping.prot"
  "o.PoseGraph.Constraint\"\255\001\n\022WriteStateRes"
  "ponse\022A\n\006header\030\001 \001(\0132/.cartographer.map"
  "ping.proto.SerializationHeaderH\000\022E\n\017seri"
  "alized_data\030\002 \001(\0132*.cartographer.mapping"
  ".proto.SerializedDataH\000B\r\n\013state_chunk\"+"
  "\n\027WriteStateToFileRequest\022\020\n\010filename\030\001 "
  "\001(\t\"J\n\030WriteStateToFileResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\022\014\n\004code\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\""
  "4\n\033IsTrajectoryFinishedRequest\022\025\n\rtrajec"
  "tory_id\030\001 \001(\005\"3\n\034IsTrajectoryFinishedRes"
  "ponse\022\023\n\013is_finished\030\001 \001(\010\"2\n\031IsTrajecto"
  "ryFrozenRequest\022\025\n\rtrajectory_id\030\001 \001(\005\"/"
  "\n\032IsTrajectoryFrozenResponse\022\021\n\tis_froze"
  "n\030\001 \001(\010\"M\n\035OKagv_StartTrajectoryResponse"
  "\022\r\n\005state\030\001 \001(\010\022\014\n\004code\030\002 \001(\005\022\017\n\007message"
  "\030\003 \001(\t\"/\n\036OKagv_FinishTrajectoryResponse"
  "\022\r\n\005state\030\001 \001(\010\"-\n\034OKagv_WaitTrajectoryR"
  "esponse\022\r\n\005state\030\001 \001(\010\",\n\026OKagv_GetOrder"
  "Response\022\022\n\norder_type\030\001 \001(\005\"/\n\033OKagv_Lo"
  "adTrajectoryRequest\022\020\n\010filename\030\001 \001(\t\"-\n"
  "\034OKagv_LoadTrajectoryResponse\022\r\n\005state\030\001"
  " \001(\010\"x\n\037OKagv_LocalizeTrajectoryRequest\022"
  "\030\n\020use_initial_pose\030\001 \001(\010\022;\n\014initial_pos"
  "e\030\002 \001(\0132%.cartographer.transform.proto.R"
  "igid3d\"K\n OKagv_LocalizeTrajectoryRespon"
  "se\022\r\n\005state\030\001 \001(\010\022\030\n\020confidence_score\030\002 "
  "\001(\005\"\310\001\n\034OKagv_StartTrajectoryRequest\022\027\n\017"
  "trajectory_type\030\001 \001(\t\022\025\n\rtrajectory_id\030\002"
  " \001(\t\022\030\n\020use_initial_pose\030\003 \001(\010\022;\n\014initia"
  "l_pose\030\004 \001(\0132%.cartographer.transform.pr"
  "oto.Rigid3d\022!\n\031relative_to_trajectory_id"
  "\030\005 \001(\t\"S\n\033OKagv_SaveTrajectoryRequest\022\020\n"
  "\010filename\030\001 \001(\t\022\"\n\032include_unfinished_su"
  "bmaps\030\002 \001(\010\"A\n OKagv_GetTrajectoryStateR"
  "esponse\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t*i"
  "\n\nSensorType\022\t\n\005RANGE\020\000\022\007\n\003IMU\020\001\022\014\n\010ODOM"
  "ETRY\020\002\022\024\n\020FIXED_FRAME_POSE\020\003\022\014\n\010LANDMARK"
  "\020\004\022\025\n\021LOCAL_SLAM_RESULT\020\005*D\n\017TrajectoryS"
  "tate\022\n\n\006ACTIVE\020\000\022\014\n\010FINISHED\020\001\022\n\n\006FROZEN"
  "\020\002\022\013\n\007DELETED\020\0032\267\035\n\021MapBuilderService\022p\n"
  "\rAddTrajectory\022..cartographer.cloud.prot"
  "o.AddTrajectoryRequest\032/.cartographer.cl"
  "oud.proto.AddTrajectoryResponse\022a\n\022AddSe"
  "nsorDataBatch\0223.cartographer.cloud.proto"
  ".AddSensorDataBatchRequest\032\026.google.prot"
  "obuf.Empty\022]\n\017AddOdometryData\0220.cartogra"
  "pher.cloud.proto.AddOdometryDataRequest\032"
  "\026.google.protobuf.Empty(\001\022S\n\nAddImuData\022"
  "+.cartographer.cloud.proto.AddImuDataReq"
  "uest\032\026.google.protobuf.Empty(\001\022c\n\022AddRan"
  "gefinderData\0223.cartographer.cloud.proto."
  "AddRangefinderDataRequest\032\026.google.proto"
  "buf.Empty(\001\022i\n\025AddFixedFramePoseData\0226.c"
  "artographer.cloud.proto.AddFixedFramePos"
  "eDataRequest\032\026.google.protobuf.Empty(\001\022]"
  "\n\017AddLandmarkData\0220.cartographer.cloud.p"
  "roto.AddLandmarkDataRequest\032\026.google.pro"
  "tobuf.Empty(\001\022\220\001\n\027ReceiveLocalSlamResult"
  "s\0228.cartographer.cloud.proto.ReceiveLoca"
  "lSlamResultsRequest\0329.cartographer.cloud"
  ".proto.ReceiveLocalSlamResultsResponse0\001"
  "\022|\n\036ReceiveGlobalSlamOptimizations\022\026.goo"
  "gle.protobuf.Empty\032@.cartographer.cloud."
  "proto.ReceiveGlobalSlamOptimizationsResp"
  "onse0\001\022]\n\020FinishTrajectory\0221.cartographe"
  "r.cloud.proto.FinishTrajectoryRequest\032\026."
  "google.protobuf.Empty\022]\n\020DeleteTrajector"
  "y\0221.cartographer.cloud.proto.DeleteTraje"
  "ctoryRequest\032\026.google.protobuf.Empty\022d\n\t"
  "GetSubmap\022*.cartographer.cloud.proto.Get"
  "SubmapRequest\032+.cartographer.cloud.proto"
  ".GetSubmapResponse\022j\n\026GetTrajectoryNodeP"
  "oses\022\026.google.protobuf.Empty\0328.cartograp"
  "her.cloud.proto.GetTrajectoryNodePosesRe"
  "sponse\022d\n\023GetTrajectoryStates\022\026.google.p"
  "rotobuf.Empty\0325.cartographer.cloud.proto"
  ".GetTrajectoryStatesResponse\022^\n\020GetLandm"
  "arkPoses\022\026.google.protobuf.Empty\0322.carto"
  "grapher.cloud.proto.GetLandmarkPosesResp"
  "onse\022`\n\021GetAllSubmapPoses\022\026.google.proto"
  "buf.Empty\0323.cartographer.cloud.proto.Get"
  "AllSubmapPosesResponse\022\224\001\n\031GetLocalToGlo"
  "balTransform\022:.cartographer.cloud.proto."
  "GetLocalToGlobalTransformRequest\032;.carto"
  "grapher.cloud.proto.GetLocalToGlobalTran"
  "sformResponse\022Z\n\016GetConstraints\022\026.google"
  ".protobuf.Empty\0320.cartographer.cloud.pro"
  "to.GetConstraintsResponse\022[\n\017SetLandmark"
  "Pose\0220.cartographer.cloud.proto.SetLandm"
  "arkPoseRequest\032\026.google.protobuf.Empty\022\205"
  "\001\n\024IsTrajectoryFinished\0225.cartographer.c"
  "loud.proto.IsTrajectoryFinishedRequest\0326"
  ".cartographer.cloud.proto.IsTrajectoryFi"
  "nishedResponse\022\177\n\022IsTrajectoryFrozen\0223.c"
  "artographer.cloud.proto.IsTrajectoryFroz"
  "enRequest\0324.cartographer.cloud.proto.IsT"
  "rajectoryFrozenResponse\022F\n\024RunFinalOptim"
  "ization\022\026.google.protobuf.Empty\032\026.google"
  ".protobuf.Empty\022f\n\tLoadState\022*.cartograp"
  "her.cloud.proto.LoadStateRequest\032+.carto"
  "grapher.cloud.proto.LoadStateResponse(\001\022"
  "|\n\021LoadStateFromFile\0222.cartographer.clou"
  "d.proto.LoadStateFromFileRequest\0323.carto"
  "grapher.cloud.proto.LoadStateFromFileRes"
  "ponse\022T\n\nWriteState\022\026.google.protobuf.Em"
  "pty\032,.cartographer.cloud.proto.WriteStat"
  "eResponse0\001\022y\n\020WriteStateToFile\0221.cartog"
  "rapher.cloud.proto.WriteStateToFileReque"
  "st\0322.cartographer.cloud.proto.WriteState"
  "ToFileResponse\022\210\001\n\025OKagv_StartTrajectory"
  "\0226.cartographer.cloud.proto.OKagv_StartT"
  "rajectoryRequest\0327.cartographer.cloud.pr"
  "oto.OKagv_StartTrajectoryResponse\022j\n\026OKa"
  "gv_FinishTrajectory\022\026.google.protobuf.Em"
  "pty\0328.cartographer.cloud.proto.OKagv_Fin"
  "ishTrajectoryResponse\022f\n\024OKagv_WaitTraje"
  "ctory\022\026.google.protobuf.Empty\0326.cartogra"
  "pher.cloud.proto.OKagv_WaitTrajectoryRes"
  "ponse\022Z\n\016OKagv_GetOrder\022\026.google.protobu"
  "f.Empty\0320.cartographer.cloud.proto.OKagv"
  "_GetOrderResponse\022\221\001\n\030OKagv_LocalizeTraj"
  "ectory\0229.cartographer.cloud.proto.OKagv_"
  "LocalizeTrajectoryRequest\032:.cartographer"
  ".cloud.proto.OKagv_LocalizeTrajectoryRes"
  "ponse\022\205\001\n\024OKagv_LoadTrajectory\0225.cartogr"
  "apher.cloud.proto.OKagv_LoadTrajectoryRe"
  "quest\0326.cartographer.cloud.proto.OKagv_L"
  "oadTrajectoryResponse\022\201\001\n\024OKagv_SaveTraj"
  "ectory\0225.cartographer.cloud.proto.OKagv_"
  "SaveTrajectoryRequest\0322.cartographer.clo"
  "ud.proto.WriteStateToFileResponse\022n\n\030OKa"
  "gv_GetTrajectoryState\022\026.google.protobuf."
  "Empty\032:.cartographer.cloud.proto.OKagv_G"
  "etTrajectoryStateResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_deps[7] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto,
  &::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_sccs[57] = {
  &scc_info_AddFixedFramePoseDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddImuDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddLandmarkDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddOdometryDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddSensorDataBatchRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_AddTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_DeleteTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_FinishTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetAllSubmapPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetConstraintsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetLandmarkPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetLocalToGlobalTransformRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetLocalToGlobalTransformResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetSubmapRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetSubmapResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetTrajectoryNodePosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetTrajectoryStatesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_IsTrajectoryFinishedRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_IsTrajectoryFinishedResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_IsTrajectoryFrozenRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_IsTrajectoryFrozenResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_LoadStateFromFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_LoadStateFromFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_LoadStateRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_LoadStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_FinishTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_GetOrderResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_GetTrajectoryStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_LoadTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_LoadTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_LocalizeTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_LocalizeTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_SaveTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_StartTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_StartTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_OKagv_WaitTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_ReceiveGlobalSlamOptimizationsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_ReceiveLocalSlamResultsRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_ReceiveLocalSlamResultsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_SetLandmarkPoseRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_WriteStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_WriteStateToFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
  &scc_info_WriteStateToFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_once;
static bool descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = {
  &descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_initialized, descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, "cartographer/cloud/proto/map_builder_service.proto", 10953,
  &descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_once, descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_sccs, descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto_deps, 57, 7,
  schemas, file_default_instances, TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::offsets,
  file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, 57, file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto), true);
namespace cartographer {
namespace cloud {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto);
  return file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[0];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto);
  return file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[1];
}
bool TrajectoryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SensorId::InitAsDefaultInstance() {
}
class SensorId::_Internal {
 public:
};

SensorId::SensorId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorId)
}
SensorId::SensorId(const SensorId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorId)
}

void SensorId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SensorId::~SensorId() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorId)
  SharedDtor();
}

void SensorId::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorId& SensorId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorId_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* SensorId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.SensorId.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.cloud.proto.SensorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cartographer::cloud::proto::SensorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .cartographer.cloud.proto.SensorType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorId)
  return target;
}

size_t SensorId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .cartographer.cloud.proto.SensorType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorId)
    MergeFrom(*source);
  }
}

void SensorId::MergeFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SensorId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorId::CopyFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorId::IsInitialized() const {
  return true;
}

void SensorId::InternalSwap(SensorId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddTrajectoryRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddTrajectoryRequest_default_instance_._instance.get_mutable()->trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions::internal_default_instance());
}
class AddTrajectoryRequest::_Internal {
 public:
  static const ::cartographer::mapping::proto::TrajectoryBuilderOptions& trajectory_builder_options(const AddTrajectoryRequest* msg);
};

const ::cartographer::mapping::proto::TrajectoryBuilderOptions&
AddTrajectoryRequest::_Internal::trajectory_builder_options(const AddTrajectoryRequest* msg) {
  return *msg->trajectory_builder_options_;
}
void AddTrajectoryRequest::clear_trajectory_builder_options() {
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_options_ != nullptr) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = nullptr;
}
AddTrajectoryRequest::AddTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddTrajectoryRequest)
}
AddTrajectoryRequest::AddTrajectoryRequest(const AddTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      expected_sensor_ids_(from.expected_sensor_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from._internal_has_trajectory_builder_options()) {
    trajectory_builder_options_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions(*from.trajectory_builder_options_);
  } else {
    trajectory_builder_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddTrajectoryRequest)
}

void AddTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_builder_options_ = nullptr;
}

AddTrajectoryRequest::~AddTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddTrajectoryRequest)
  SharedDtor();
}

void AddTrajectoryRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trajectory_builder_options_;
}

void AddTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTrajectoryRequest& AddTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expected_sensor_ids_.Clear();
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_options_ != nullptr) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_builder_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expected_sensor_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.AddTrajectoryRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trajectory_builder_options(this), target, stream);
  }

  // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expected_sensor_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_expected_sensor_ids(i), target, stream);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.AddTrajectoryRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddTrajectoryRequest)
  return target;
}

size_t AddTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SensorId expected_sensor_ids = 3;
  total_size += 1UL * this->_internal_expected_sensor_ids_size();
  for (const auto& msg : this->expected_sensor_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_builder_options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddTrajectoryRequest)
    MergeFrom(*source);
  }
}

void AddTrajectoryRequest::MergeFrom(const AddTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expected_sensor_ids_.MergeFrom(from.expected_sensor_ids_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.has_trajectory_builder_options()) {
    _internal_mutable_trajectory_builder_options()->::cartographer::mapping::proto::TrajectoryBuilderOptions::MergeFrom(from._internal_trajectory_builder_options());
  }
}

void AddTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTrajectoryRequest::CopyFrom(const AddTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTrajectoryRequest::IsInitialized() const {
  return true;
}

void AddTrajectoryRequest::InternalSwap(AddTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  expected_sensor_ids_.InternalSwap(&other->expected_sensor_ids_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_builder_options_, other->trajectory_builder_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorMetadata::InitAsDefaultInstance() {
}
class SensorMetadata::_Internal {
 public:
};

SensorMetadata::SensorMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorMetadata)
}
SensorMetadata::SensorMetadata(const SensorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensor_id().empty()) {
    sensor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorMetadata)
}

void SensorMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  sensor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
}

SensorMetadata::~SensorMetadata() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorMetadata)
  SharedDtor();
}

void SensorMetadata::SharedDtor() {
  sensor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorMetadata& SensorMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* SensorMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sensor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.SensorMetadata.sensor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.SensorMetadata.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // string sensor_id = 2;
  if (this->sensor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_id().data(), static_cast<int>(this->_internal_sensor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.sensor_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensor_id(), target);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.client_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorMetadata)
  return target;
}

size_t SensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_id = 2;
  if (this->sensor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_id());
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorMetadata)
    MergeFrom(*source);
  }
}

void SensorMetadata::MergeFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_id().size() > 0) {

    sensor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void SensorMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMetadata::CopyFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMetadata::IsInitialized() const {
  return true;
}

void SensorMetadata::InternalSwap(SensorMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensor_id_.Swap(&other->sensor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorData::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_SensorData_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(
      ::cartographer::sensor::proto::OdometryData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(
      ::cartographer::sensor::proto::ImuData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.timed_point_cloud_data_ = const_cast< ::cartographer::sensor::proto::TimedPointCloudData*>(
      ::cartographer::sensor::proto::TimedPointCloudData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(
      ::cartographer::sensor::proto::FixedFramePoseData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.landmark_data_ = const_cast< ::cartographer::sensor::proto::LandmarkData*>(
      ::cartographer::sensor::proto::LandmarkData::internal_default_instance());
  ::cartographer::cloud::proto::_SensorData_default_instance_.local_slam_result_data_ = const_cast< ::cartographer::mapping::proto::LocalSlamResultData*>(
      ::cartographer::mapping::proto::LocalSlamResultData::internal_default_instance());
}
class SensorData::_Internal {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const SensorData* msg);
  static const ::cartographer::sensor::proto::OdometryData& odometry_data(const SensorData* msg);
  static const ::cartographer::sensor::proto::ImuData& imu_data(const SensorData* msg);
  static const ::cartographer::sensor::proto::TimedPointCloudData& timed_point_cloud_data(const SensorData* msg);
  static const ::cartographer::sensor::proto::FixedFramePoseData& fixed_frame_pose_data(const SensorData* msg);
  static const ::cartographer::sensor::proto::LandmarkData& landmark_data(const SensorData* msg);
  static const ::cartographer::mapping::proto::LocalSlamResultData& local_slam_result_data(const SensorData* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
SensorData::_Internal::sensor_metadata(const SensorData* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::sensor::proto::OdometryData&
SensorData::_Internal::odometry_data(const SensorData* msg) {
  return *msg->sensor_data_.odometry_data_;
}
const ::cartographer::sensor::proto::ImuData&
SensorData::_Internal::imu_data(const SensorData* msg) {
  return *msg->sensor_data_.imu_data_;
}
const ::cartographer::sensor::proto::TimedPointCloudData&
SensorData::_Internal::timed_point_cloud_data(const SensorData* msg) {
  return *msg->sensor_data_.timed_point_cloud_data_;
}
const ::cartographer::sensor::proto::FixedFramePoseData&
SensorData::_Internal::fixed_frame_pose_data(const SensorData* msg) {
  return *msg->sensor_data_.fixed_frame_pose_data_;
}
const ::cartographer::sensor::proto::LandmarkData&
SensorData::_Internal::landmark_data(const SensorData* msg) {
  return *msg->sensor_data_.landmark_data_;
}
const ::cartographer::mapping::proto::LocalSlamResultData&
SensorData::_Internal::local_slam_result_data(const SensorData* msg) {
  return *msg->sensor_data_.local_slam_result_data_;
}
void SensorData::set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (odometry_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      odometry_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry_data, submessage_arena);
    }
    set_has_odometry_data();
    sensor_data_.odometry_data_ = odometry_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.odometry_data)
}
void SensorData::clear_odometry_data() {
  if (_internal_has_odometry_data()) {
    delete sensor_data_.odometry_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (imu_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imu_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    set_has_imu_data();
    sensor_data_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.imu_data)
}
void SensorData::clear_imu_data() {
  if (_internal_has_imu_data()) {
    delete sensor_data_.imu_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_timed_point_cloud_data(::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (timed_point_cloud_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timed_point_cloud_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timed_point_cloud_data, submessage_arena);
    }
    set_has_timed_point_cloud_data();
    sensor_data_.timed_point_cloud_data_ = timed_point_cloud_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.timed_point_cloud_data)
}
void SensorData::clear_timed_point_cloud_data() {
  if (_internal_has_timed_point_cloud_data()) {
    delete sensor_data_.timed_point_cloud_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (fixed_frame_pose_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_frame_pose_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_frame_pose_data, submessage_arena);
    }
    set_has_fixed_frame_pose_data();
    sensor_data_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.fixed_frame_pose_data)
}
void SensorData::clear_fixed_frame_pose_data() {
  if (_internal_has_fixed_frame_pose_data()) {
    delete sensor_data_.fixed_frame_pose_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_landmark_data(::cartographer::sensor::proto::LandmarkData* landmark_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (landmark_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      landmark_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_data, submessage_arena);
    }
    set_has_landmark_data();
    sensor_data_.landmark_data_ = landmark_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.landmark_data)
}
void SensorData::clear_landmark_data() {
  if (_internal_has_landmark_data()) {
    delete sensor_data_.landmark_data_;
    clear_has_sensor_data();
  }
}
void SensorData::set_allocated_local_slam_result_data(::cartographer::mapping::proto::LocalSlamResultData* local_slam_result_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sensor_data();
  if (local_slam_result_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_slam_result_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_slam_result_data, submessage_arena);
    }
    set_has_local_slam_result_data();
    sensor_data_.local_slam_result_data_ = local_slam_result_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorData.local_slam_result_data)
}
void SensorData::clear_local_slam_result_data() {
  if (_internal_has_local_slam_result_data()) {
    delete sensor_data_.local_slam_result_data_;
    clear_has_sensor_data();
  }
}
SensorData::SensorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  clear_has_sensor_data();
  switch (from.sensor_data_case()) {
    case kOdometryData: {
      _internal_mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from._internal_odometry_data());
      break;
    }
    case kImuData: {
      _internal_mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from._internal_imu_data());
      break;
    }
    case kTimedPointCloudData: {
      _internal_mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from._internal_timed_point_cloud_data());
      break;
    }
    case kFixedFramePoseData: {
      _internal_mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from._internal_fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      _internal_mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from._internal_landmark_data());
      break;
    }
    case kLocalSlamResultData: {
      _internal_mutable_local_slam_result_data()->::cartographer::mapping::proto::LocalSlamResultData::MergeFrom(from._internal_local_slam_result_data());
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorData)
}

void SensorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  sensor_metadata_ = nullptr;
  clear_has_sensor_data();
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (has_sensor_data()) {
    clear_sensor_data();
  }
}

void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorData& SensorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorData::clear_sensor_data() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.cloud.proto.SensorData)
  switch (sensor_data_case()) {
    case kOdometryData: {
      delete sensor_data_.odometry_data_;
      break;
    }
    case kImuData: {
      delete sensor_data_.imu_data_;
      break;
    }
    case kTimedPointCloudData: {
      delete sensor_data_.timed_point_cloud_data_;
      break;
    }
    case kFixedFramePoseData: {
      delete sensor_data_.fixed_frame_pose_data_;
      break;
    }
    case kLandmarkData: {
      delete sensor_data_.landmark_data_;
      break;
    }
    case kLocalSlamResultData: {
      delete sensor_data_.local_slam_result_data_;
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SENSOR_DATA_NOT_SET;
}


void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  clear_sensor_data();
  _internal_metadata_.Clear();
}

const char* SensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.ImuData imu_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timed_point_cloud_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_frame_pose_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_slam_result_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_metadata(this), target, stream);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (_internal_has_odometry_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::odometry_data(this), target, stream);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 3;
  if (_internal_has_imu_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::imu_data(this), target, stream);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  if (_internal_has_timed_point_cloud_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timed_point_cloud_data(this), target, stream);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (_internal_has_fixed_frame_pose_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fixed_frame_pose_data(this), target, stream);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
  if (_internal_has_landmark_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::landmark_data(this), target, stream);
  }

  // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
  if (_internal_has_local_slam_result_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_slam_result_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  switch (sensor_data_case()) {
    // .cartographer.sensor.proto.OdometryData odometry_data = 2;
    case kOdometryData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_data_.odometry_data_);
      break;
    }
    // .cartographer.sensor.proto.ImuData imu_data = 3;
    case kImuData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_data_.imu_data_);
      break;
    }
    // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
    case kTimedPointCloudData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_data_.timed_point_cloud_data_);
      break;
    }
    // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 5;
    case kFixedFramePoseData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_data_.fixed_frame_pose_data_);
      break;
    }
    // .cartographer.sensor.proto.LandmarkData landmark_data = 6;
    case kLandmarkData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_data_.landmark_data_);
      break;
    }
    // .cartographer.mapping.proto.LocalSlamResultData local_slam_result_data = 7;
    case kLocalSlamResultData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_data_.local_slam_result_data_);
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    _internal_mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from._internal_sensor_metadata());
  }
  switch (from.sensor_data_case()) {
    case kOdometryData: {
      _internal_mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from._internal_odometry_data());
      break;
    }
    case kImuData: {
      _internal_mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from._internal_imu_data());
      break;
    }
    case kTimedPointCloudData: {
      _internal_mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from._internal_timed_point_cloud_data());
      break;
    }
    case kFixedFramePoseData: {
      _internal_mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from._internal_fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      _internal_mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from._internal_landmark_data());
      break;
    }
    case kLocalSlamResultData: {
      _internal_mutable_local_slam_result_data()->::cartographer::mapping::proto::LocalSlamResultData::MergeFrom(from._internal_local_slam_result_data());
      break;
    }
    case SENSOR_DATA_NOT_SET: {
      break;
    }
  }
}

void SensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(sensor_data_, other->sensor_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddTrajectoryResponse::InitAsDefaultInstance() {
}
class AddTrajectoryResponse::_Internal {
 public:
};

AddTrajectoryResponse::AddTrajectoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddTrajectoryResponse)
}
AddTrajectoryResponse::AddTrajectoryResponse(const AddTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddTrajectoryResponse)
}

void AddTrajectoryResponse::SharedCtor() {
  trajectory_id_ = 0;
}

AddTrajectoryResponse::~AddTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddTrajectoryResponse)
  SharedDtor();
}

void AddTrajectoryResponse::SharedDtor() {
}

void AddTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTrajectoryResponse& AddTrajectoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* AddTrajectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTrajectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddTrajectoryResponse)
  return target;
}

size_t AddTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddTrajectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTrajectoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTrajectoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTrajectoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddTrajectoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddTrajectoryResponse)
    MergeFrom(*source);
  }
}

void AddTrajectoryResponse::MergeFrom(const AddTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void AddTrajectoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTrajectoryResponse::CopyFrom(const AddTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTrajectoryResponse::IsInitialized() const {
  return true;
}

void AddTrajectoryResponse::InternalSwap(AddTrajectoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTrajectoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddSensorDataBatchRequest::InitAsDefaultInstance() {
}
class AddSensorDataBatchRequest::_Internal {
 public:
};

AddSensorDataBatchRequest::AddSensorDataBatchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddSensorDataBatchRequest)
}
AddSensorDataBatchRequest::AddSensorDataBatchRequest(const AddSensorDataBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_data_(from.sensor_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddSensorDataBatchRequest)
}

void AddSensorDataBatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddSensorDataBatchRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

AddSensorDataBatchRequest::~AddSensorDataBatchRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddSensorDataBatchRequest)
  SharedDtor();
}

void AddSensorDataBatchRequest::SharedDtor() {
}

void AddSensorDataBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddSensorDataBatchRequest& AddSensorDataBatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddSensorDataBatchRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddSensorDataBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_data_.Clear();
  _internal_metadata_.Clear();
}

const char* AddSensorDataBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddSensorDataBatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensor_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddSensorDataBatchRequest)
  return target;
}

size_t AddSensorDataBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SensorData sensor_data = 1;
  total_size += 1UL * this->_internal_sensor_data_size();
  for (const auto& msg : this->sensor_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSensorDataBatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSensorDataBatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddSensorDataBatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddSensorDataBatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddSensorDataBatchRequest)
    MergeFrom(*source);
  }
}

void AddSensorDataBatchRequest::MergeFrom(const AddSensorDataBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_data_.MergeFrom(from.sensor_data_);
}

void AddSensorDataBatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSensorDataBatchRequest::CopyFrom(const AddSensorDataBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddSensorDataBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSensorDataBatchRequest::IsInitialized() const {
  return true;
}

void AddSensorDataBatchRequest::InternalSwap(AddSensorDataBatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensor_data_.InternalSwap(&other->sensor_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSensorDataBatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddOdometryDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddOdometryDataRequest_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(
      ::cartographer::sensor::proto::OdometryData::internal_default_instance());
}
class AddOdometryDataRequest::_Internal {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddOdometryDataRequest* msg);
  static const ::cartographer::sensor::proto::OdometryData& odometry_data(const AddOdometryDataRequest* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddOdometryDataRequest::_Internal::sensor_metadata(const AddOdometryDataRequest* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::sensor::proto::OdometryData&
AddOdometryDataRequest::_Internal::odometry_data(const AddOdometryDataRequest* msg) {
  return *msg->odometry_data_;
}
void AddOdometryDataRequest::clear_odometry_data() {
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
}
AddOdometryDataRequest::AddOdometryDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddOdometryDataRequest)
}
AddOdometryDataRequest::AddOdometryDataRequest(const AddOdometryDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  if (from._internal_has_odometry_data()) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddOdometryDataRequest)
}

void AddOdometryDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddOdometryDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(odometry_data_));
}

AddOdometryDataRequest::~AddOdometryDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddOdometryDataRequest)
  SharedDtor();
}

void AddOdometryDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete odometry_data_;
}

void AddOdometryDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddOdometryDataRequest& AddOdometryDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddOdometryDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddOdometryDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddOdometryDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddOdometryDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddOdometryDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddOdometryDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_metadata(this), target, stream);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::odometry_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddOdometryDataRequest)
  return target;
}

size_t AddOdometryDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddOdometryDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddOdometryDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddOdometryDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddOdometryDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddOdometryDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddOdometryDataRequest)
    MergeFrom(*source);
  }
}

void AddOdometryDataRequest::MergeFrom(const AddOdometryDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    _internal_mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from._internal_sensor_metadata());
  }
  if (from.has_odometry_data()) {
    _internal_mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from._internal_odometry_data());
  }
}

void AddOdometryDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOdometryDataRequest::CopyFrom(const AddOdometryDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddOdometryDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOdometryDataRequest::IsInitialized() const {
  return true;
}

void AddOdometryDataRequest::InternalSwap(AddOdometryDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(odometry_data_, other->odometry_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddOdometryDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddImuDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddImuDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddImuDataRequest_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(
      ::cartographer::sensor::proto::ImuData::internal_default_instance());
}
class AddImuDataRequest::_Internal {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddImuDataRequest* msg);
  static const ::cartographer::sensor::proto::ImuData& imu_data(const AddImuDataRequest* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddImuDataRequest::_Internal::sensor_metadata(const AddImuDataRequest* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::sensor::proto::ImuData&
AddImuDataRequest::_Internal::imu_data(const AddImuDataRequest* msg) {
  return *msg->imu_data_;
}
void AddImuDataRequest::clear_imu_data() {
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
}
AddImuDataRequest::AddImuDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddImuDataRequest)
}
AddImuDataRequest::AddImuDataRequest(const AddImuDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  if (from._internal_has_imu_data()) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddImuDataRequest)
}

void AddImuDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddImuDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(imu_data_));
}

AddImuDataRequest::~AddImuDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddImuDataRequest)
  SharedDtor();
}

void AddImuDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete imu_data_;
}

void AddImuDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddImuDataRequest& AddImuDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddImuDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddImuDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddImuDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddImuDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.ImuData imu_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddImuDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddImuDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_metadata(this), target, stream);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::imu_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddImuDataRequest)
  return target;
}

size_t AddImuDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddImuDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddImuDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddImuDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddImuDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddImuDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddImuDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddImuDataRequest)
    MergeFrom(*source);
  }
}

void AddImuDataRequest::MergeFrom(const AddImuDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddImuDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    _internal_mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from._internal_sensor_metadata());
  }
  if (from.has_imu_data()) {
    _internal_mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from._internal_imu_data());
  }
}

void AddImuDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddImuDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddImuDataRequest::CopyFrom(const AddImuDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddImuDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddImuDataRequest::IsInitialized() const {
  return true;
}

void AddImuDataRequest::InternalSwap(AddImuDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(imu_data_, other->imu_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddImuDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRangefinderDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->timed_point_cloud_data_ = const_cast< ::cartographer::sensor::proto::TimedPointCloudData*>(
      ::cartographer::sensor::proto::TimedPointCloudData::internal_default_instance());
}
class AddRangefinderDataRequest::_Internal {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddRangefinderDataRequest* msg);
  static const ::cartographer::sensor::proto::TimedPointCloudData& timed_point_cloud_data(const AddRangefinderDataRequest* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddRangefinderDataRequest::_Internal::sensor_metadata(const AddRangefinderDataRequest* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::sensor::proto::TimedPointCloudData&
AddRangefinderDataRequest::_Internal::timed_point_cloud_data(const AddRangefinderDataRequest* msg) {
  return *msg->timed_point_cloud_data_;
}
void AddRangefinderDataRequest::clear_timed_point_cloud_data() {
  if (GetArenaNoVirtual() == nullptr && timed_point_cloud_data_ != nullptr) {
    delete timed_point_cloud_data_;
  }
  timed_point_cloud_data_ = nullptr;
}
AddRangefinderDataRequest::AddRangefinderDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddRangefinderDataRequest)
}
AddRangefinderDataRequest::AddRangefinderDataRequest(const AddRangefinderDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  if (from._internal_has_timed_point_cloud_data()) {
    timed_point_cloud_data_ = new ::cartographer::sensor::proto::TimedPointCloudData(*from.timed_point_cloud_data_);
  } else {
    timed_point_cloud_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddRangefinderDataRequest)
}

void AddRangefinderDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timed_point_cloud_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(timed_point_cloud_data_));
}

AddRangefinderDataRequest::~AddRangefinderDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddRangefinderDataRequest)
  SharedDtor();
}

void AddRangefinderDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete timed_point_cloud_data_;
}

void AddRangefinderDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRangefinderDataRequest& AddRangefinderDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddRangefinderDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timed_point_cloud_data_ != nullptr) {
    delete timed_point_cloud_data_;
  }
  timed_point_cloud_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddRangefinderDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timed_point_cloud_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRangefinderDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_metadata(this), target, stream);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
  if (this->has_timed_point_cloud_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timed_point_cloud_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddRangefinderDataRequest)
  return target;
}

size_t AddRangefinderDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 2;
  if (this->has_timed_point_cloud_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timed_point_cloud_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRangefinderDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRangefinderDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRangefinderDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddRangefinderDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddRangefinderDataRequest)
    MergeFrom(*source);
  }
}

void AddRangefinderDataRequest::MergeFrom(const AddRangefinderDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    _internal_mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from._internal_sensor_metadata());
  }
  if (from.has_timed_point_cloud_data()) {
    _internal_mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from._internal_timed_point_cloud_data());
  }
}

void AddRangefinderDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRangefinderDataRequest::CopyFrom(const AddRangefinderDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRangefinderDataRequest::IsInitialized() const {
  return true;
}

void AddRangefinderDataRequest::InternalSwap(AddRangefinderDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(timed_point_cloud_data_, other->timed_point_cloud_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRangefinderDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFixedFramePoseDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddFixedFramePoseDataRequest_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(
      ::cartographer::sensor::proto::FixedFramePoseData::internal_default_instance());
}
class AddFixedFramePoseDataRequest::_Internal {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddFixedFramePoseDataRequest* msg);
  static const ::cartographer::sensor::proto::FixedFramePoseData& fixed_frame_pose_data(const AddFixedFramePoseDataRequest* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddFixedFramePoseDataRequest::_Internal::sensor_metadata(const AddFixedFramePoseDataRequest* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::sensor::proto::FixedFramePoseData&
AddFixedFramePoseDataRequest::_Internal::fixed_frame_pose_data(const AddFixedFramePoseDataRequest* msg) {
  return *msg->fixed_frame_pose_data_;
}
void AddFixedFramePoseDataRequest::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
}
AddFixedFramePoseDataRequest::AddFixedFramePoseDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
}
AddFixedFramePoseDataRequest::AddFixedFramePoseDataRequest(const AddFixedFramePoseDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  if (from._internal_has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
}

void AddFixedFramePoseDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFixedFramePoseDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_frame_pose_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(fixed_frame_pose_data_));
}

AddFixedFramePoseDataRequest::~AddFixedFramePoseDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  SharedDtor();
}

void AddFixedFramePoseDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
}

void AddFixedFramePoseDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFixedFramePoseDataRequest& AddFixedFramePoseDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFixedFramePoseDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddFixedFramePoseDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddFixedFramePoseDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_frame_pose_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFixedFramePoseDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_metadata(this), target, stream);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fixed_frame_pose_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  return target;
}

size_t AddFixedFramePoseDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fixed_frame_pose_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFixedFramePoseDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFixedFramePoseDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFixedFramePoseDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
    MergeFrom(*source);
  }
}

void AddFixedFramePoseDataRequest::MergeFrom(const AddFixedFramePoseDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    _internal_mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from._internal_sensor_metadata());
  }
  if (from.has_fixed_frame_pose_data()) {
    _internal_mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from._internal_fixed_frame_pose_data());
  }
}

void AddFixedFramePoseDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFixedFramePoseDataRequest::CopyFrom(const AddFixedFramePoseDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddFixedFramePoseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFixedFramePoseDataRequest::IsInitialized() const {
  return true;
}

void AddFixedFramePoseDataRequest::InternalSwap(AddFixedFramePoseDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFixedFramePoseDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddLandmarkDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddLandmarkDataRequest_default_instance_._instance.get_mutable()->landmark_data_ = const_cast< ::cartographer::sensor::proto::LandmarkData*>(
      ::cartographer::sensor::proto::LandmarkData::internal_default_instance());
}
class AddLandmarkDataRequest::_Internal {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddLandmarkDataRequest* msg);
  static const ::cartographer::sensor::proto::LandmarkData& landmark_data(const AddLandmarkDataRequest* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddLandmarkDataRequest::_Internal::sensor_metadata(const AddLandmarkDataRequest* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::sensor::proto::LandmarkData&
AddLandmarkDataRequest::_Internal::landmark_data(const AddLandmarkDataRequest* msg) {
  return *msg->landmark_data_;
}
void AddLandmarkDataRequest::clear_landmark_data() {
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
}
AddLandmarkDataRequest::AddLandmarkDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddLandmarkDataRequest)
}
AddLandmarkDataRequest::AddLandmarkDataRequest(const AddLandmarkDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  if (from._internal_has_landmark_data()) {
    landmark_data_ = new ::cartographer::sensor::proto::LandmarkData(*from.landmark_data_);
  } else {
    landmark_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddLandmarkDataRequest)
}

void AddLandmarkDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLandmarkDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_data_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(landmark_data_));
}

AddLandmarkDataRequest::~AddLandmarkDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddLandmarkDataRequest)
  SharedDtor();
}

void AddLandmarkDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete landmark_data_;
}

void AddLandmarkDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLandmarkDataRequest& AddLandmarkDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLandmarkDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddLandmarkDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddLandmarkDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLandmarkDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sensor_metadata(this), target, stream);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::landmark_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddLandmarkDataRequest)
  return target;
}

size_t AddLandmarkDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landmark_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLandmarkDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLandmarkDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddLandmarkDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddLandmarkDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddLandmarkDataRequest)
    MergeFrom(*source);
  }
}

void AddLandmarkDataRequest::MergeFrom(const AddLandmarkDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    _internal_mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from._internal_sensor_metadata());
  }
  if (from.has_landmark_data()) {
    _internal_mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from._internal_landmark_data());
  }
}

void AddLandmarkDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLandmarkDataRequest::CopyFrom(const AddLandmarkDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddLandmarkDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLandmarkDataRequest::IsInitialized() const {
  return true;
}

void AddLandmarkDataRequest::InternalSwap(AddLandmarkDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(landmark_data_, other->landmark_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLandmarkDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FinishTrajectoryRequest::InitAsDefaultInstance() {
}
class FinishTrajectoryRequest::_Internal {
 public:
};

FinishTrajectoryRequest::FinishTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.FinishTrajectoryRequest)
}
FinishTrajectoryRequest::FinishTrajectoryRequest(const FinishTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.FinishTrajectoryRequest)
}

void FinishTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinishTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
}

FinishTrajectoryRequest::~FinishTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.FinishTrajectoryRequest)
  SharedDtor();
}

void FinishTrajectoryRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinishTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinishTrajectoryRequest& FinishTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinishTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FinishTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* FinishTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.FinishTrajectoryRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinishTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.FinishTrajectoryRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.FinishTrajectoryRequest)
  return target;
}

size_t FinishTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinishTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.FinishTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.FinishTrajectoryRequest)
    MergeFrom(*source);
  }
}

void FinishTrajectoryRequest::MergeFrom(const FinishTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void FinishTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishTrajectoryRequest::CopyFrom(const FinishTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.FinishTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishTrajectoryRequest::IsInitialized() const {
  return true;
}

void FinishTrajectoryRequest::InternalSwap(FinishTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinishTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTrajectoryRequest::InitAsDefaultInstance() {
}
class DeleteTrajectoryRequest::_Internal {
 public:
};

DeleteTrajectoryRequest::DeleteTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.DeleteTrajectoryRequest)
}
DeleteTrajectoryRequest::DeleteTrajectoryRequest(const DeleteTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.DeleteTrajectoryRequest)
}

void DeleteTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
}

DeleteTrajectoryRequest::~DeleteTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.DeleteTrajectoryRequest)
  SharedDtor();
}

void DeleteTrajectoryRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTrajectoryRequest& DeleteTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* DeleteTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.DeleteTrajectoryRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.DeleteTrajectoryRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.DeleteTrajectoryRequest)
  return target;
}

size_t DeleteTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.DeleteTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.DeleteTrajectoryRequest)
    MergeFrom(*source);
  }
}

void DeleteTrajectoryRequest::MergeFrom(const DeleteTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void DeleteTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTrajectoryRequest::CopyFrom(const DeleteTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.DeleteTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTrajectoryRequest::IsInitialized() const {
  return true;
}

void DeleteTrajectoryRequest::InternalSwap(DeleteTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceiveLocalSlamResultsRequest::InitAsDefaultInstance() {
}
class ReceiveLocalSlamResultsRequest::_Internal {
 public:
};

ReceiveLocalSlamResultsRequest::ReceiveLocalSlamResultsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
}
ReceiveLocalSlamResultsRequest::ReceiveLocalSlamResultsRequest(const ReceiveLocalSlamResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
}

void ReceiveLocalSlamResultsRequest::SharedCtor() {
  trajectory_id_ = 0;
}

ReceiveLocalSlamResultsRequest::~ReceiveLocalSlamResultsRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  SharedDtor();
}

void ReceiveLocalSlamResultsRequest::SharedDtor() {
}

void ReceiveLocalSlamResultsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceiveLocalSlamResultsRequest& ReceiveLocalSlamResultsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceiveLocalSlamResultsRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReceiveLocalSlamResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ReceiveLocalSlamResultsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveLocalSlamResultsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  return target;
}

size_t ReceiveLocalSlamResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveLocalSlamResultsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveLocalSlamResultsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceiveLocalSlamResultsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
    MergeFrom(*source);
  }
}

void ReceiveLocalSlamResultsRequest::MergeFrom(const ReceiveLocalSlamResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void ReceiveLocalSlamResultsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveLocalSlamResultsRequest::CopyFrom(const ReceiveLocalSlamResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveLocalSlamResultsRequest::IsInitialized() const {
  return true;
}

void ReceiveLocalSlamResultsRequest::InternalSwap(ReceiveLocalSlamResultsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveLocalSlamResultsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalSlamInsertionResult::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LocalSlamInsertionResult_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
}
class LocalSlamInsertionResult::_Internal {
 public:
  static const ::cartographer::mapping::proto::NodeId& node_id(const LocalSlamInsertionResult* msg);
};

const ::cartographer::mapping::proto::NodeId&
LocalSlamInsertionResult::_Internal::node_id(const LocalSlamInsertionResult* msg) {
  return *msg->node_id_;
}
void LocalSlamInsertionResult::clear_node_id() {
  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
LocalSlamInsertionResult::LocalSlamInsertionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LocalSlamInsertionResult)
}
LocalSlamInsertionResult::LocalSlamInsertionResult(const LocalSlamInsertionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LocalSlamInsertionResult)
}

void LocalSlamInsertionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  node_id_ = nullptr;
}

LocalSlamInsertionResult::~LocalSlamInsertionResult() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LocalSlamInsertionResult)
  SharedDtor();
}

void LocalSlamInsertionResult::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
}

void LocalSlamInsertionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalSlamInsertionResult& LocalSlamInsertionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalSlamInsertionResult_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LocalSlamInsertionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LocalSlamInsertionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalSlamInsertionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LocalSlamInsertionResult)
  return target;
}

size_t LocalSlamInsertionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalSlamInsertionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalSlamInsertionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalSlamInsertionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LocalSlamInsertionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LocalSlamInsertionResult)
    MergeFrom(*source);
  }
}

void LocalSlamInsertionResult::MergeFrom(const LocalSlamInsertionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    _internal_mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from._internal_node_id());
  }
}

void LocalSlamInsertionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSlamInsertionResult::CopyFrom(const LocalSlamInsertionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LocalSlamInsertionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSlamInsertionResult::IsInitialized() const {
  return true;
}

void LocalSlamInsertionResult::InternalSwap(LocalSlamInsertionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalSlamInsertionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceiveLocalSlamResultsResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_._instance.get_mutable()->range_data_ = const_cast< ::cartographer::sensor::proto::RangeData*>(
      ::cartographer::sensor::proto::RangeData::internal_default_instance());
  ::cartographer::cloud::proto::_ReceiveLocalSlamResultsResponse_default_instance_._instance.get_mutable()->insertion_result_ = const_cast< ::cartographer::cloud::proto::LocalSlamInsertionResult*>(
      ::cartographer::cloud::proto::LocalSlamInsertionResult::internal_default_instance());
}
class ReceiveLocalSlamResultsResponse::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const ReceiveLocalSlamResultsResponse* msg);
  static const ::cartographer::sensor::proto::RangeData& range_data(const ReceiveLocalSlamResultsResponse* msg);
  static const ::cartographer::cloud::proto::LocalSlamInsertionResult& insertion_result(const ReceiveLocalSlamResultsResponse* msg);
};

const ::cartographer::transform::proto::Rigid3d&
ReceiveLocalSlamResultsResponse::_Internal::local_pose(const ReceiveLocalSlamResultsResponse* msg) {
  return *msg->local_pose_;
}
const ::cartographer::sensor::proto::RangeData&
ReceiveLocalSlamResultsResponse::_Internal::range_data(const ReceiveLocalSlamResultsResponse* msg) {
  return *msg->range_data_;
}
const ::cartographer::cloud::proto::LocalSlamInsertionResult&
ReceiveLocalSlamResultsResponse::_Internal::insertion_result(const ReceiveLocalSlamResultsResponse* msg) {
  return *msg->insertion_result_;
}
void ReceiveLocalSlamResultsResponse::clear_local_pose() {
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
void ReceiveLocalSlamResultsResponse::clear_range_data() {
  if (GetArenaNoVirtual() == nullptr && range_data_ != nullptr) {
    delete range_data_;
  }
  range_data_ = nullptr;
}
ReceiveLocalSlamResultsResponse::ReceiveLocalSlamResultsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
}
ReceiveLocalSlamResultsResponse::ReceiveLocalSlamResultsResponse(const ReceiveLocalSlamResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  if (from._internal_has_range_data()) {
    range_data_ = new ::cartographer::sensor::proto::RangeData(*from.range_data_);
  } else {
    range_data_ = nullptr;
  }
  if (from._internal_has_insertion_result()) {
    insertion_result_ = new ::cartographer::cloud::proto::LocalSlamInsertionResult(*from.insertion_result_);
  } else {
    insertion_result_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
}

void ReceiveLocalSlamResultsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceiveLocalSlamResultsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(trajectory_id_));
}

ReceiveLocalSlamResultsResponse::~ReceiveLocalSlamResultsResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  SharedDtor();
}

void ReceiveLocalSlamResultsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete range_data_;
  if (this != internal_default_instance()) delete insertion_result_;
}

void ReceiveLocalSlamResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceiveLocalSlamResultsResponse& ReceiveLocalSlamResultsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceiveLocalSlamResultsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReceiveLocalSlamResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && range_data_ != nullptr) {
    delete range_data_;
  }
  range_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && insertion_result_ != nullptr) {
    delete insertion_result_;
  }
  insertion_result_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(trajectory_id_));
  _internal_metadata_.Clear();
}

const char* ReceiveLocalSlamResultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d local_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.RangeData range_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_insertion_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveLocalSlamResultsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_pose(this), target, stream);
  }

  // .cartographer.sensor.proto.RangeData range_data = 4;
  if (this->has_range_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::range_data(this), target, stream);
  }

  // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
  if (this->has_insertion_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::insertion_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  return target;
}

size_t ReceiveLocalSlamResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // .cartographer.sensor.proto.RangeData range_data = 4;
  if (this->has_range_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_data_);
  }

  // .cartographer.cloud.proto.LocalSlamInsertionResult insertion_result = 5;
  if (this->has_insertion_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insertion_result_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveLocalSlamResultsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveLocalSlamResultsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceiveLocalSlamResultsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
    MergeFrom(*source);
  }
}

void ReceiveLocalSlamResultsResponse::MergeFrom(const ReceiveLocalSlamResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    _internal_mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_local_pose());
  }
  if (from.has_range_data()) {
    _internal_mutable_range_data()->::cartographer::sensor::proto::RangeData::MergeFrom(from._internal_range_data());
  }
  if (from.has_insertion_result()) {
    _internal_mutable_insertion_result()->::cartographer::cloud::proto::LocalSlamInsertionResult::MergeFrom(from._internal_insertion_result());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void ReceiveLocalSlamResultsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveLocalSlamResultsResponse::CopyFrom(const ReceiveLocalSlamResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.ReceiveLocalSlamResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveLocalSlamResultsResponse::IsInitialized() const {
  return true;
}

void ReceiveLocalSlamResultsResponse::InternalSwap(ReceiveLocalSlamResultsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_pose_, other->local_pose_);
  swap(range_data_, other->range_data_);
  swap(insertion_result_, other->insertion_result_);
  swap(timestamp_, other->timestamp_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveLocalSlamResultsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse() {}
ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::MergeFrom(const ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse() {}
ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::MergeFrom(const ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ReceiveGlobalSlamOptimizationsResponse::InitAsDefaultInstance() {
}
class ReceiveGlobalSlamOptimizationsResponse::_Internal {
 public:
};

void ReceiveGlobalSlamOptimizationsResponse::clear_last_optimized_node_ids() {
  last_optimized_node_ids_.Clear();
}
void ReceiveGlobalSlamOptimizationsResponse::clear_last_optimized_submap_ids() {
  last_optimized_submap_ids_.Clear();
}
ReceiveGlobalSlamOptimizationsResponse::ReceiveGlobalSlamOptimizationsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
}
ReceiveGlobalSlamOptimizationsResponse::ReceiveGlobalSlamOptimizationsResponse(const ReceiveGlobalSlamOptimizationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_optimized_node_ids_.MergeFrom(from.last_optimized_node_ids_);
  last_optimized_submap_ids_.MergeFrom(from.last_optimized_submap_ids_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
}

void ReceiveGlobalSlamOptimizationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceiveGlobalSlamOptimizationsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

ReceiveGlobalSlamOptimizationsResponse::~ReceiveGlobalSlamOptimizationsResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  SharedDtor();
}

void ReceiveGlobalSlamOptimizationsResponse::SharedDtor() {
}

void ReceiveGlobalSlamOptimizationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceiveGlobalSlamOptimizationsResponse& ReceiveGlobalSlamOptimizationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceiveGlobalSlamOptimizationsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReceiveGlobalSlamOptimizationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_optimized_node_ids_.Clear();
  last_optimized_submap_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* ReceiveGlobalSlamOptimizationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&last_optimized_node_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&last_optimized_submap_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveGlobalSlamOptimizationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
  if (!this->_internal_last_optimized_node_ids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::NodeId >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_last_optimized_node_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_last_optimized_node_ids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::NodeId >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
          it = this->_internal_last_optimized_node_ids().begin();
          it != this->_internal_last_optimized_node_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
          it = this->_internal_last_optimized_node_ids().begin();
          it != this->_internal_last_optimized_node_ids().end(); ++it) {
        target = ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
  if (!this->_internal_last_optimized_submap_ids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::SubmapId >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_last_optimized_submap_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_last_optimized_submap_ids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::SubmapId >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
          it = this->_internal_last_optimized_submap_ids().begin();
          it != this->_internal_last_optimized_submap_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
          it = this->_internal_last_optimized_submap_ids().begin();
          it != this->_internal_last_optimized_submap_ids().end(); ++it) {
        target = ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  return target;
}

size_t ReceiveGlobalSlamOptimizationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .cartographer.mapping.proto.NodeId> last_optimized_node_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_last_optimized_node_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::NodeId >::const_iterator
      it = this->_internal_last_optimized_node_ids().begin();
      it != this->_internal_last_optimized_node_ids().end(); ++it) {
    total_size += ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .cartographer.mapping.proto.SubmapId> last_optimized_submap_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_last_optimized_submap_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::mapping::proto::SubmapId >::const_iterator
      it = this->_internal_last_optimized_submap_ids().begin();
      it != this->_internal_last_optimized_submap_ids().end(); ++it) {
    total_size += ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveGlobalSlamOptimizationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveGlobalSlamOptimizationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceiveGlobalSlamOptimizationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
    MergeFrom(*source);
  }
}

void ReceiveGlobalSlamOptimizationsResponse::MergeFrom(const ReceiveGlobalSlamOptimizationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_optimized_node_ids_.MergeFrom(from.last_optimized_node_ids_);
  last_optimized_submap_ids_.MergeFrom(from.last_optimized_submap_ids_);
}

void ReceiveGlobalSlamOptimizationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveGlobalSlamOptimizationsResponse::CopyFrom(const ReceiveGlobalSlamOptimizationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.ReceiveGlobalSlamOptimizationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveGlobalSlamOptimizationsResponse::IsInitialized() const {
  return true;
}

void ReceiveGlobalSlamOptimizationsResponse::InternalSwap(ReceiveGlobalSlamOptimizationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  last_optimized_node_ids_.Swap(&other->last_optimized_node_ids_);
  last_optimized_submap_ids_.Swap(&other->last_optimized_submap_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveGlobalSlamOptimizationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSubmapRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_GetSubmapRequest_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
}
class GetSubmapRequest::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapId& submap_id(const GetSubmapRequest* msg);
};

const ::cartographer::mapping::proto::SubmapId&
GetSubmapRequest::_Internal::submap_id(const GetSubmapRequest* msg) {
  return *msg->submap_id_;
}
void GetSubmapRequest::clear_submap_id() {
  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
}
GetSubmapRequest::GetSubmapRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetSubmapRequest)
}
GetSubmapRequest::GetSubmapRequest(const GetSubmapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetSubmapRequest)
}

void GetSubmapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSubmapRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  submap_id_ = nullptr;
}

GetSubmapRequest::~GetSubmapRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetSubmapRequest)
  SharedDtor();
}

void GetSubmapRequest::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
}

void GetSubmapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSubmapRequest& GetSubmapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSubmapRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSubmapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetSubmapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetSubmapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSubmapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetSubmapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submap_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetSubmapRequest)
  return target;
}

size_t GetSubmapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetSubmapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubmapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetSubmapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubmapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSubmapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetSubmapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetSubmapRequest)
    MergeFrom(*source);
  }
}

void GetSubmapRequest::MergeFrom(const GetSubmapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetSubmapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    _internal_mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from._internal_submap_id());
  }
}

void GetSubmapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetSubmapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubmapRequest::CopyFrom(const GetSubmapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetSubmapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubmapRequest::IsInitialized() const {
  return true;
}

void GetSubmapRequest::InternalSwap(GetSubmapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_id_, other->submap_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubmapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadStateRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LoadStateRequest_default_instance_.serialized_data_ = const_cast< ::cartographer::mapping::proto::SerializedData*>(
      ::cartographer::mapping::proto::SerializedData::internal_default_instance());
  ::cartographer::cloud::proto::_LoadStateRequest_default_instance_.serialization_header_ = const_cast< ::cartographer::mapping::proto::SerializationHeader*>(
      ::cartographer::mapping::proto::SerializationHeader::internal_default_instance());
  ::cartographer::cloud::proto::_LoadStateRequest_default_instance_.client_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class LoadStateRequest::_Internal {
 public:
  static const ::cartographer::mapping::proto::SerializedData& serialized_data(const LoadStateRequest* msg);
  static const ::cartographer::mapping::proto::SerializationHeader& serialization_header(const LoadStateRequest* msg);
};

const ::cartographer::mapping::proto::SerializedData&
LoadStateRequest::_Internal::serialized_data(const LoadStateRequest* msg) {
  return *msg->state_chunk_.serialized_data_;
}
const ::cartographer::mapping::proto::SerializationHeader&
LoadStateRequest::_Internal::serialization_header(const LoadStateRequest* msg) {
  return *msg->state_chunk_.serialization_header_;
}
void LoadStateRequest::set_allocated_serialized_data(::cartographer::mapping::proto::SerializedData* serialized_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (serialized_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serialized_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serialized_data, submessage_arena);
    }
    set_has_serialized_data();
    state_chunk_.serialized_data_ = serialized_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.LoadStateRequest.serialized_data)
}
void LoadStateRequest::clear_serialized_data() {
  if (_internal_has_serialized_data()) {
    delete state_chunk_.serialized_data_;
    clear_has_state_chunk();
  }
}
void LoadStateRequest::set_allocated_serialization_header(::cartographer::mapping::proto::SerializationHeader* serialization_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (serialization_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serialization_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serialization_header, submessage_arena);
    }
    set_has_serialization_header();
    state_chunk_.serialization_header_ = serialization_header;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.LoadStateRequest.serialization_header)
}
void LoadStateRequest::clear_serialization_header() {
  if (_internal_has_serialization_header()) {
    delete state_chunk_.serialization_header_;
    clear_has_state_chunk();
  }
}
LoadStateRequest::LoadStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateRequest)
}
LoadStateRequest::LoadStateRequest(const LoadStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  load_frozen_state_ = from.load_frozen_state_;
  clear_has_state_chunk();
  switch (from.state_chunk_case()) {
    case kSerializedData: {
      _internal_mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from._internal_serialized_data());
      break;
    }
    case kSerializationHeader: {
      _internal_mutable_serialization_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from._internal_serialization_header());
      break;
    }
    case kClientId: {
      _internal_set_client_id(from._internal_client_id());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateRequest)
}

void LoadStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadStateRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  load_frozen_state_ = false;
  clear_has_state_chunk();
}

LoadStateRequest::~LoadStateRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateRequest)
  SharedDtor();
}

void LoadStateRequest::SharedDtor() {
  if (has_state_chunk()) {
    clear_state_chunk();
  }
}

void LoadStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadStateRequest& LoadStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadStateRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LoadStateRequest::clear_state_chunk() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.cloud.proto.LoadStateRequest)
  switch (state_chunk_case()) {
    case kSerializedData: {
      delete state_chunk_.serialized_data_;
      break;
    }
    case kSerializationHeader: {
      delete state_chunk_.serialization_header_;
      break;
    }
    case kClientId: {
      state_chunk_.client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_CHUNK_NOT_SET;
}


void LoadStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_frozen_state_ = false;
  clear_state_chunk();
  _internal_metadata_.Clear();
}

const char* LoadStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SerializedData serialized_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serialized_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serialization_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.LoadStateRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool load_frozen_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          load_frozen_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SerializedData serialized_data = 1;
  if (_internal_has_serialized_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::serialized_data(this), target, stream);
  }

  // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
  if (_internal_has_serialization_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::serialization_header(this), target, stream);
  }

  // string client_id = 3;
  if (_internal_has_client_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_id(), target);
  }

  // bool load_frozen_state = 4;
  if (this->load_frozen_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_load_frozen_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateRequest)
  return target;
}

size_t LoadStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool load_frozen_state = 4;
  if (this->load_frozen_state() != 0) {
    total_size += 1 + 1;
  }

  switch (state_chunk_case()) {
    // .cartographer.mapping.proto.SerializedData serialized_data = 1;
    case kSerializedData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_chunk_.serialized_data_);
      break;
    }
    // .cartographer.mapping.proto.SerializationHeader serialization_header = 2;
    case kSerializationHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_chunk_.serialization_header_);
      break;
    }
    // string client_id = 3;
    case kClientId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_id());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateRequest)
    MergeFrom(*source);
  }
}

void LoadStateRequest::MergeFrom(const LoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.load_frozen_state() != 0) {
    _internal_set_load_frozen_state(from._internal_load_frozen_state());
  }
  switch (from.state_chunk_case()) {
    case kSerializedData: {
      _internal_mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from._internal_serialized_data());
      break;
    }
    case kSerializationHeader: {
      _internal_mutable_serialization_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from._internal_serialization_header());
      break;
    }
    case kClientId: {
      _internal_set_client_id(from._internal_client_id());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
}

void LoadStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateRequest::CopyFrom(const LoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateRequest::IsInitialized() const {
  return true;
}

void LoadStateRequest::InternalSwap(LoadStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(load_frozen_state_, other->load_frozen_state_);
  swap(state_chunk_, other->state_chunk_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse() {}
TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::MergeFrom(const TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TrajectoryRemapping::InitAsDefaultInstance() {
}
class TrajectoryRemapping::_Internal {
 public:
};

TrajectoryRemapping::TrajectoryRemapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.TrajectoryRemapping)
}
TrajectoryRemapping::TrajectoryRemapping(const TrajectoryRemapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_trajectories_to_trajectories_.MergeFrom(from.serialized_trajectories_to_trajectories_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.TrajectoryRemapping)
}

void TrajectoryRemapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

TrajectoryRemapping::~TrajectoryRemapping() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.TrajectoryRemapping)
  SharedDtor();
}

void TrajectoryRemapping::SharedDtor() {
}

void TrajectoryRemapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryRemapping& TrajectoryRemapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryRemapping_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryRemapping::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.TrajectoryRemapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serialized_trajectories_to_trajectories_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajectoryRemapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> serialized_trajectories_to_trajectories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&serialized_trajectories_to_trajectories_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryRemapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.TrajectoryRemapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> serialized_trajectories_to_trajectories = 1;
  if (!this->_internal_serialized_trajectories_to_trajectories().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_serialized_trajectories_to_trajectories().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_serialized_trajectories_to_trajectories().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_serialized_trajectories_to_trajectories().begin();
          it != this->_internal_serialized_trajectories_to_trajectories().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_serialized_trajectories_to_trajectories().begin();
          it != this->_internal_serialized_trajectories_to_trajectories().end(); ++it) {
        target = TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.TrajectoryRemapping)
  return target;
}

size_t TrajectoryRemapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.TrajectoryRemapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> serialized_trajectories_to_trajectories = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_serialized_trajectories_to_trajectories_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_serialized_trajectories_to_trajectories().begin();
      it != this->_internal_serialized_trajectories_to_trajectories().end(); ++it) {
    total_size += TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryRemapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryRemapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryRemapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.TrajectoryRemapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.TrajectoryRemapping)
    MergeFrom(*source);
  }
}

void TrajectoryRemapping::MergeFrom(const TrajectoryRemapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serialized_trajectories_to_trajectories_.MergeFrom(from.serialized_trajectories_to_trajectories_);
}

void TrajectoryRemapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRemapping::CopyFrom(const TrajectoryRemapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.TrajectoryRemapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRemapping::IsInitialized() const {
  return true;
}

void TrajectoryRemapping::InternalSwap(TrajectoryRemapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  serialized_trajectories_to_trajectories_.Swap(&other->serialized_trajectories_to_trajectories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryRemapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadStateResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LoadStateResponse_default_instance_._instance.get_mutable()->trajectory_remapping_ = const_cast< ::cartographer::cloud::proto::TrajectoryRemapping*>(
      ::cartographer::cloud::proto::TrajectoryRemapping::internal_default_instance());
}
class LoadStateResponse::_Internal {
 public:
  static const ::cartographer::cloud::proto::TrajectoryRemapping& trajectory_remapping(const LoadStateResponse* msg);
};

const ::cartographer::cloud::proto::TrajectoryRemapping&
LoadStateResponse::_Internal::trajectory_remapping(const LoadStateResponse* msg) {
  return *msg->trajectory_remapping_;
}
LoadStateResponse::LoadStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateResponse)
}
LoadStateResponse::LoadStateResponse(const LoadStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trajectory_remapping()) {
    trajectory_remapping_ = new ::cartographer::cloud::proto::TrajectoryRemapping(*from.trajectory_remapping_);
  } else {
    trajectory_remapping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateResponse)
}

void LoadStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  trajectory_remapping_ = nullptr;
}

LoadStateResponse::~LoadStateResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateResponse)
  SharedDtor();
}

void LoadStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_remapping_;
}

void LoadStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadStateResponse& LoadStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LoadStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajectory_remapping_ != nullptr) {
    delete trajectory_remapping_;
  }
  trajectory_remapping_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoadStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_remapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trajectory_remapping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateResponse)
  return target;
}

size_t LoadStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_remapping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateResponse)
    MergeFrom(*source);
  }
}

void LoadStateResponse::MergeFrom(const LoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_remapping()) {
    _internal_mutable_trajectory_remapping()->::cartographer::cloud::proto::TrajectoryRemapping::MergeFrom(from._internal_trajectory_remapping());
  }
}

void LoadStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateResponse::CopyFrom(const LoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateResponse::IsInitialized() const {
  return true;
}

void LoadStateResponse::InternalSwap(LoadStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_remapping_, other->trajectory_remapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadStateFromFileRequest::InitAsDefaultInstance() {
}
class LoadStateFromFileRequest::_Internal {
 public:
};

LoadStateFromFileRequest::LoadStateFromFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateFromFileRequest)
}
LoadStateFromFileRequest::LoadStateFromFileRequest(const LoadStateFromFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  load_frozen_state_ = from.load_frozen_state_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateFromFileRequest)
}

void LoadStateFromFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadStateFromFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_frozen_state_ = false;
}

LoadStateFromFileRequest::~LoadStateFromFileRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateFromFileRequest)
  SharedDtor();
}

void LoadStateFromFileRequest::SharedDtor() {
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadStateFromFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadStateFromFileRequest& LoadStateFromFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadStateFromFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LoadStateFromFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_frozen_state_ = false;
  _internal_metadata_.Clear();
}

const char* LoadStateFromFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.LoadStateFromFileRequest.file_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.LoadStateFromFileRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool load_frozen_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          load_frozen_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadStateFromFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateFromFileRequest.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.LoadStateFromFileRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_id(), target);
  }

  // bool load_frozen_state = 3;
  if (this->load_frozen_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_load_frozen_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateFromFileRequest)
  return target;
}

size_t LoadStateFromFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // bool load_frozen_state = 3;
  if (this->load_frozen_state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateFromFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateFromFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadStateFromFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateFromFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateFromFileRequest)
    MergeFrom(*source);
  }
}

void LoadStateFromFileRequest::MergeFrom(const LoadStateFromFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.load_frozen_state() != 0) {
    _internal_set_load_frozen_state(from._internal_load_frozen_state());
  }
}

void LoadStateFromFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateFromFileRequest::CopyFrom(const LoadStateFromFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateFromFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateFromFileRequest::IsInitialized() const {
  return true;
}

void LoadStateFromFileRequest::InternalSwap(LoadStateFromFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(load_frozen_state_, other->load_frozen_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadStateFromFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadStateFromFileResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_LoadStateFromFileResponse_default_instance_._instance.get_mutable()->trajectory_remapping_ = const_cast< ::cartographer::cloud::proto::TrajectoryRemapping*>(
      ::cartographer::cloud::proto::TrajectoryRemapping::internal_default_instance());
}
class LoadStateFromFileResponse::_Internal {
 public:
  static const ::cartographer::cloud::proto::TrajectoryRemapping& trajectory_remapping(const LoadStateFromFileResponse* msg);
};

const ::cartographer::cloud::proto::TrajectoryRemapping&
LoadStateFromFileResponse::_Internal::trajectory_remapping(const LoadStateFromFileResponse* msg) {
  return *msg->trajectory_remapping_;
}
LoadStateFromFileResponse::LoadStateFromFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.LoadStateFromFileResponse)
}
LoadStateFromFileResponse::LoadStateFromFileResponse(const LoadStateFromFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trajectory_remapping()) {
    trajectory_remapping_ = new ::cartographer::cloud::proto::TrajectoryRemapping(*from.trajectory_remapping_);
  } else {
    trajectory_remapping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.LoadStateFromFileResponse)
}

void LoadStateFromFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadStateFromFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  trajectory_remapping_ = nullptr;
}

LoadStateFromFileResponse::~LoadStateFromFileResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.LoadStateFromFileResponse)
  SharedDtor();
}

void LoadStateFromFileResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_remapping_;
}

void LoadStateFromFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadStateFromFileResponse& LoadStateFromFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadStateFromFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LoadStateFromFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajectory_remapping_ != nullptr) {
    delete trajectory_remapping_;
  }
  trajectory_remapping_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoadStateFromFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_remapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadStateFromFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trajectory_remapping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.LoadStateFromFileResponse)
  return target;
}

size_t LoadStateFromFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.TrajectoryRemapping trajectory_remapping = 1;
  if (this->has_trajectory_remapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_remapping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadStateFromFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadStateFromFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadStateFromFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.LoadStateFromFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.LoadStateFromFileResponse)
    MergeFrom(*source);
  }
}

void LoadStateFromFileResponse::MergeFrom(const LoadStateFromFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_remapping()) {
    _internal_mutable_trajectory_remapping()->::cartographer::cloud::proto::TrajectoryRemapping::MergeFrom(from._internal_trajectory_remapping());
  }
}

void LoadStateFromFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadStateFromFileResponse::CopyFrom(const LoadStateFromFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.LoadStateFromFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadStateFromFileResponse::IsInitialized() const {
  return true;
}

void LoadStateFromFileResponse::InternalSwap(LoadStateFromFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_remapping_, other->trajectory_remapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadStateFromFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSubmapResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_GetSubmapResponse_default_instance_._instance.get_mutable()->submap_query_response_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Response*>(
      ::cartographer::mapping::proto::SubmapQuery_Response::internal_default_instance());
}
class GetSubmapResponse::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapQuery_Response& submap_query_response(const GetSubmapResponse* msg);
};

const ::cartographer::mapping::proto::SubmapQuery_Response&
GetSubmapResponse::_Internal::submap_query_response(const GetSubmapResponse* msg) {
  return *msg->submap_query_response_;
}
void GetSubmapResponse::clear_submap_query_response() {
  if (GetArenaNoVirtual() == nullptr && submap_query_response_ != nullptr) {
    delete submap_query_response_;
  }
  submap_query_response_ = nullptr;
}
GetSubmapResponse::GetSubmapResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetSubmapResponse)
}
GetSubmapResponse::GetSubmapResponse(const GetSubmapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from._internal_has_submap_query_response()) {
    submap_query_response_ = new ::cartographer::mapping::proto::SubmapQuery_Response(*from.submap_query_response_);
  } else {
    submap_query_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetSubmapResponse)
}

void GetSubmapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSubmapResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submap_query_response_ = nullptr;
}

GetSubmapResponse::~GetSubmapResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetSubmapResponse)
  SharedDtor();
}

void GetSubmapResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submap_query_response_;
}

void GetSubmapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSubmapResponse& GetSubmapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSubmapResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSubmapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetSubmapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && submap_query_response_ != nullptr) {
    delete submap_query_response_;
  }
  submap_query_response_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetSubmapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_query_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.GetSubmapResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSubmapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetSubmapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
  if (this->has_submap_query_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submap_query_response(this), target, stream);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.GetSubmapResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetSubmapResponse)
  return target;
}

size_t GetSubmapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetSubmapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // .cartographer.mapping.proto.SubmapQuery.Response submap_query_response = 1;
  if (this->has_submap_query_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_query_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubmapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetSubmapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubmapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSubmapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetSubmapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetSubmapResponse)
    MergeFrom(*source);
  }
}

void GetSubmapResponse::MergeFrom(const GetSubmapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetSubmapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.has_submap_query_response()) {
    _internal_mutable_submap_query_response()->::cartographer::mapping::proto::SubmapQuery_Response::MergeFrom(from._internal_submap_query_response());
  }
}

void GetSubmapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetSubmapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubmapResponse::CopyFrom(const GetSubmapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetSubmapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubmapResponse::IsInitialized() const {
  return true;
}

void GetSubmapResponse::InternalSwap(GetSubmapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(submap_query_response_, other->submap_query_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubmapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryNodePose_ConstantPoseData::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_TrajectoryNodePose_ConstantPoseData_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class TrajectoryNodePose_ConstantPoseData::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const TrajectoryNodePose_ConstantPoseData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
TrajectoryNodePose_ConstantPoseData::_Internal::local_pose(const TrajectoryNodePose_ConstantPoseData* msg) {
  return *msg->local_pose_;
}
void TrajectoryNodePose_ConstantPoseData::clear_local_pose() {
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
TrajectoryNodePose_ConstantPoseData::TrajectoryNodePose_ConstantPoseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
}
TrajectoryNodePose_ConstantPoseData::TrajectoryNodePose_ConstantPoseData(const TrajectoryNodePose_ConstantPoseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
}

void TrajectoryNodePose_ConstantPoseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(timestamp_));
}

TrajectoryNodePose_ConstantPoseData::~TrajectoryNodePose_ConstantPoseData() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  SharedDtor();
}

void TrajectoryNodePose_ConstantPoseData::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
}

void TrajectoryNodePose_ConstantPoseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryNodePose_ConstantPoseData& TrajectoryNodePose_ConstantPoseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryNodePose_ConstantPoseData_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryNodePose_ConstantPoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TrajectoryNodePose_ConstantPoseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d local_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryNodePose_ConstantPoseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 2;
  if (this->has_local_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  return target;
}

size_t TrajectoryNodePose_ConstantPoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 2;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryNodePose_ConstantPoseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryNodePose_ConstantPoseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryNodePose_ConstantPoseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
    MergeFrom(*source);
  }
}

void TrajectoryNodePose_ConstantPoseData::MergeFrom(const TrajectoryNodePose_ConstantPoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    _internal_mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_local_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TrajectoryNodePose_ConstantPoseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodePose_ConstantPoseData::CopyFrom(const TrajectoryNodePose_ConstantPoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodePose_ConstantPoseData::IsInitialized() const {
  return true;
}

void TrajectoryNodePose_ConstantPoseData::InternalSwap(TrajectoryNodePose_ConstantPoseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_pose_, other->local_pose_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryNodePose_ConstantPoseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryNodePose::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
  ::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::cloud::proto::_TrajectoryNodePose_default_instance_._instance.get_mutable()->constant_pose_data_ = const_cast< ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData*>(
      ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData::internal_default_instance());
}
class TrajectoryNodePose::_Internal {
 public:
  static const ::cartographer::mapping::proto::NodeId& node_id(const TrajectoryNodePose* msg);
  static const ::cartographer::transform::proto::Rigid3d& global_pose(const TrajectoryNodePose* msg);
  static const ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData& constant_pose_data(const TrajectoryNodePose* msg);
};

const ::cartographer::mapping::proto::NodeId&
TrajectoryNodePose::_Internal::node_id(const TrajectoryNodePose* msg) {
  return *msg->node_id_;
}
const ::cartographer::transform::proto::Rigid3d&
TrajectoryNodePose::_Internal::global_pose(const TrajectoryNodePose* msg) {
  return *msg->global_pose_;
}
const ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData&
TrajectoryNodePose::_Internal::constant_pose_data(const TrajectoryNodePose* msg) {
  return *msg->constant_pose_data_;
}
void TrajectoryNodePose::clear_node_id() {
  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
void TrajectoryNodePose::clear_global_pose() {
  if (GetArenaNoVirtual() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
}
TrajectoryNodePose::TrajectoryNodePose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.TrajectoryNodePose)
}
TrajectoryNodePose::TrajectoryNodePose(const TrajectoryNodePose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from._internal_has_global_pose()) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = nullptr;
  }
  if (from._internal_has_constant_pose_data()) {
    constant_pose_data_ = new ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData(*from.constant_pose_data_);
  } else {
    constant_pose_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.TrajectoryNodePose)
}

void TrajectoryNodePose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constant_pose_data_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(constant_pose_data_));
}

TrajectoryNodePose::~TrajectoryNodePose() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.TrajectoryNodePose)
  SharedDtor();
}

void TrajectoryNodePose::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete global_pose_;
  if (this != internal_default_instance()) delete constant_pose_data_;
}

void TrajectoryNodePose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryNodePose& TrajectoryNodePose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryNodePose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryNodePose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.TrajectoryNodePose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && constant_pose_data_ != nullptr) {
    delete constant_pose_data_;
  }
  constant_pose_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TrajectoryNodePose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d global_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_constant_pose_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryNodePose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.TrajectoryNodePose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::global_pose(this), target, stream);
  }

  // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
  if (this->has_constant_pose_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::constant_pose_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.TrajectoryNodePose)
  return target;
}

size_t TrajectoryNodePose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.TrajectoryNodePose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  // .cartographer.cloud.proto.TrajectoryNodePose.ConstantPoseData constant_pose_data = 3;
  if (this->has_constant_pose_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constant_pose_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryNodePose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryNodePose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryNodePose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.TrajectoryNodePose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.TrajectoryNodePose)
    MergeFrom(*source);
  }
}

void TrajectoryNodePose::MergeFrom(const TrajectoryNodePose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    _internal_mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from._internal_node_id());
  }
  if (from.has_global_pose()) {
    _internal_mutable_global_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_global_pose());
  }
  if (from.has_constant_pose_data()) {
    _internal_mutable_constant_pose_data()->::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData::MergeFrom(from._internal_constant_pose_data());
  }
}

void TrajectoryNodePose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodePose::CopyFrom(const TrajectoryNodePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.TrajectoryNodePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodePose::IsInitialized() const {
  return true;
}

void TrajectoryNodePose::InternalSwap(TrajectoryNodePose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
  swap(global_pose_, other->global_pose_);
  swap(constant_pose_data_, other->constant_pose_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryNodePose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTrajectoryNodePosesResponse::InitAsDefaultInstance() {
}
class GetTrajectoryNodePosesResponse::_Internal {
 public:
};

GetTrajectoryNodePosesResponse::GetTrajectoryNodePosesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
}
GetTrajectoryNodePosesResponse::GetTrajectoryNodePosesResponse(const GetTrajectoryNodePosesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_poses_(from.node_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
}

void GetTrajectoryNodePosesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTrajectoryNodePosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

GetTrajectoryNodePosesResponse::~GetTrajectoryNodePosesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  SharedDtor();
}

void GetTrajectoryNodePosesResponse::SharedDtor() {
}

void GetTrajectoryNodePosesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTrajectoryNodePosesResponse& GetTrajectoryNodePosesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTrajectoryNodePosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetTrajectoryNodePosesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_poses_.Clear();
  _internal_metadata_.Clear();
}

const char* GetTrajectoryNodePosesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTrajectoryNodePosesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_poses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  return target;
}

size_t GetTrajectoryNodePosesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.TrajectoryNodePose node_poses = 1;
  total_size += 1UL * this->_internal_node_poses_size();
  for (const auto& msg : this->node_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrajectoryNodePosesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrajectoryNodePosesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTrajectoryNodePosesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
    MergeFrom(*source);
  }
}

void GetTrajectoryNodePosesResponse::MergeFrom(const GetTrajectoryNodePosesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_poses_.MergeFrom(from.node_poses_);
}

void GetTrajectoryNodePosesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrajectoryNodePosesResponse::CopyFrom(const GetTrajectoryNodePosesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetTrajectoryNodePosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrajectoryNodePosesResponse::IsInitialized() const {
  return true;
}

void GetTrajectoryNodePosesResponse::InternalSwap(GetTrajectoryNodePosesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_poses_.InternalSwap(&other->node_poses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrajectoryNodePosesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse() {}
GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::MergeFrom(const GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetTrajectoryStatesResponse::InitAsDefaultInstance() {
}
class GetTrajectoryStatesResponse::_Internal {
 public:
};

GetTrajectoryStatesResponse::GetTrajectoryStatesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetTrajectoryStatesResponse)
}
GetTrajectoryStatesResponse::GetTrajectoryStatesResponse(const GetTrajectoryStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectories_state_.MergeFrom(from.trajectories_state_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetTrajectoryStatesResponse)
}

void GetTrajectoryStatesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTrajectoryStatesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

GetTrajectoryStatesResponse::~GetTrajectoryStatesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  SharedDtor();
}

void GetTrajectoryStatesResponse::SharedDtor() {
}

void GetTrajectoryStatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTrajectoryStatesResponse& GetTrajectoryStatesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTrajectoryStatesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetTrajectoryStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_state_.Clear();
  _internal_metadata_.Clear();
}

const char* GetTrajectoryStatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&trajectories_state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTrajectoryStatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
  if (!this->_internal_trajectories_state().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::cloud::proto::TrajectoryState >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_trajectories_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_trajectories_state().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::cloud::proto::TrajectoryState >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
          it = this->_internal_trajectories_state().begin();
          it != this->_internal_trajectories_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
          it = this->_internal_trajectories_state().begin();
          it != this->_internal_trajectories_state().end(); ++it) {
        target = GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  return target;
}

size_t GetTrajectoryStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .cartographer.cloud.proto.TrajectoryState> trajectories_state = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trajectories_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::cartographer::cloud::proto::TrajectoryState >::const_iterator
      it = this->_internal_trajectories_state().begin();
      it != this->_internal_trajectories_state().end(); ++it) {
    total_size += GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrajectoryStatesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrajectoryStatesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTrajectoryStatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetTrajectoryStatesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetTrajectoryStatesResponse)
    MergeFrom(*source);
  }
}

void GetTrajectoryStatesResponse::MergeFrom(const GetTrajectoryStatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_state_.MergeFrom(from.trajectories_state_);
}

void GetTrajectoryStatesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrajectoryStatesResponse::CopyFrom(const GetTrajectoryStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetTrajectoryStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrajectoryStatesResponse::IsInitialized() const {
  return true;
}

void GetTrajectoryStatesResponse::InternalSwap(GetTrajectoryStatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trajectories_state_.Swap(&other->trajectories_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrajectoryStatesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLandmarkPosesResponse::InitAsDefaultInstance() {
}
class GetLandmarkPosesResponse::_Internal {
 public:
};

void GetLandmarkPosesResponse::clear_landmark_poses() {
  landmark_poses_.Clear();
}
GetLandmarkPosesResponse::GetLandmarkPosesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetLandmarkPosesResponse)
}
GetLandmarkPosesResponse::GetLandmarkPosesResponse(const GetLandmarkPosesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      landmark_poses_(from.landmark_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetLandmarkPosesResponse)
}

void GetLandmarkPosesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLandmarkPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

GetLandmarkPosesResponse::~GetLandmarkPosesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetLandmarkPosesResponse)
  SharedDtor();
}

void GetLandmarkPosesResponse::SharedDtor() {
}

void GetLandmarkPosesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLandmarkPosesResponse& GetLandmarkPosesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLandmarkPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLandmarkPosesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_poses_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLandmarkPosesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLandmarkPosesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmark_poses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetLandmarkPosesResponse)
  return target;
}

size_t GetLandmarkPosesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 1;
  total_size += 1UL * this->_internal_landmark_poses_size();
  for (const auto& msg : this->landmark_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLandmarkPosesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLandmarkPosesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLandmarkPosesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetLandmarkPosesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetLandmarkPosesResponse)
    MergeFrom(*source);
  }
}

void GetLandmarkPosesResponse::MergeFrom(const GetLandmarkPosesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_poses_.MergeFrom(from.landmark_poses_);
}

void GetLandmarkPosesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLandmarkPosesResponse::CopyFrom(const GetLandmarkPosesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetLandmarkPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLandmarkPosesResponse::IsInitialized() const {
  return true;
}

void GetLandmarkPosesResponse::InternalSwap(GetLandmarkPosesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  landmark_poses_.InternalSwap(&other->landmark_poses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLandmarkPosesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLandmarkPoseRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_SetLandmarkPoseRequest_default_instance_._instance.get_mutable()->landmark_pose_ = const_cast< ::cartographer::mapping::proto::PoseGraph_LandmarkPose*>(
      ::cartographer::mapping::proto::PoseGraph_LandmarkPose::internal_default_instance());
}
class SetLandmarkPoseRequest::_Internal {
 public:
  static const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& landmark_pose(const SetLandmarkPoseRequest* msg);
};

const ::cartographer::mapping::proto::PoseGraph_LandmarkPose&
SetLandmarkPoseRequest::_Internal::landmark_pose(const SetLandmarkPoseRequest* msg) {
  return *msg->landmark_pose_;
}
void SetLandmarkPoseRequest::clear_landmark_pose() {
  if (GetArenaNoVirtual() == nullptr && landmark_pose_ != nullptr) {
    delete landmark_pose_;
  }
  landmark_pose_ = nullptr;
}
SetLandmarkPoseRequest::SetLandmarkPoseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SetLandmarkPoseRequest)
}
SetLandmarkPoseRequest::SetLandmarkPoseRequest(const SetLandmarkPoseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_landmark_pose()) {
    landmark_pose_ = new ::cartographer::mapping::proto::PoseGraph_LandmarkPose(*from.landmark_pose_);
  } else {
    landmark_pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SetLandmarkPoseRequest)
}

void SetLandmarkPoseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLandmarkPoseRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  landmark_pose_ = nullptr;
}

SetLandmarkPoseRequest::~SetLandmarkPoseRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SetLandmarkPoseRequest)
  SharedDtor();
}

void SetLandmarkPoseRequest::SharedDtor() {
  if (this != internal_default_instance()) delete landmark_pose_;
}

void SetLandmarkPoseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLandmarkPoseRequest& SetLandmarkPoseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLandmarkPoseRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SetLandmarkPoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && landmark_pose_ != nullptr) {
    delete landmark_pose_;
  }
  landmark_pose_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetLandmarkPoseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLandmarkPoseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
  if (this->has_landmark_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::landmark_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SetLandmarkPoseRequest)
  return target;
}

size_t SetLandmarkPoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_pose = 1;
  if (this->has_landmark_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landmark_pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLandmarkPoseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLandmarkPoseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLandmarkPoseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SetLandmarkPoseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SetLandmarkPoseRequest)
    MergeFrom(*source);
  }
}

void SetLandmarkPoseRequest::MergeFrom(const SetLandmarkPoseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_landmark_pose()) {
    _internal_mutable_landmark_pose()->::cartographer::mapping::proto::PoseGraph_LandmarkPose::MergeFrom(from._internal_landmark_pose());
  }
}

void SetLandmarkPoseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLandmarkPoseRequest::CopyFrom(const SetLandmarkPoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SetLandmarkPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLandmarkPoseRequest::IsInitialized() const {
  return true;
}

void SetLandmarkPoseRequest::InternalSwap(SetLandmarkPoseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(landmark_pose_, other->landmark_pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLandmarkPoseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapPose::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_SubmapPose_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  ::cartographer::cloud::proto::_SubmapPose_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class SubmapPose::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapId& submap_id(const SubmapPose* msg);
  static const ::cartographer::transform::proto::Rigid3d& global_pose(const SubmapPose* msg);
};

const ::cartographer::mapping::proto::SubmapId&
SubmapPose::_Internal::submap_id(const SubmapPose* msg) {
  return *msg->submap_id_;
}
const ::cartographer::transform::proto::Rigid3d&
SubmapPose::_Internal::global_pose(const SubmapPose* msg) {
  return *msg->global_pose_;
}
void SubmapPose::clear_submap_id() {
  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
}
void SubmapPose::clear_global_pose() {
  if (GetArenaNoVirtual() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
}
SubmapPose::SubmapPose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SubmapPose)
}
SubmapPose::SubmapPose(const SubmapPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = nullptr;
  }
  if (from._internal_has_global_pose()) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = nullptr;
  }
  submap_version_ = from.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SubmapPose)
}

void SubmapPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_version_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_version_));
}

SubmapPose::~SubmapPose() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SubmapPose)
  SharedDtor();
}

void SubmapPose::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete global_pose_;
}

void SubmapPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapPose& SubmapPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapPose_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubmapPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SubmapPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
  submap_version_ = 0;
  _internal_metadata_.Clear();
}

const char* SubmapPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 submap_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          submap_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d global_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SubmapPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submap_id(this), target, stream);
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_version(), target);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 3;
  if (this->has_global_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::global_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SubmapPose)
  return target;
}

size_t SubmapPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SubmapPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 3;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_submap_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SubmapPose)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SubmapPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SubmapPose)
    MergeFrom(*source);
  }
}

void SubmapPose::MergeFrom(const SubmapPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SubmapPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    _internal_mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from._internal_submap_id());
  }
  if (from.has_global_pose()) {
    _internal_mutable_global_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_global_pose());
  }
  if (from.submap_version() != 0) {
    _internal_set_submap_version(from._internal_submap_version());
  }
}

void SubmapPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SubmapPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapPose::CopyFrom(const SubmapPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SubmapPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapPose::IsInitialized() const {
  return true;
}

void SubmapPose::InternalSwap(SubmapPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_id_, other->submap_id_);
  swap(global_pose_, other->global_pose_);
  swap(submap_version_, other->submap_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAllSubmapPosesResponse::InitAsDefaultInstance() {
}
class GetAllSubmapPosesResponse::_Internal {
 public:
};

GetAllSubmapPosesResponse::GetAllSubmapPosesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetAllSubmapPosesResponse)
}
GetAllSubmapPosesResponse::GetAllSubmapPosesResponse(const GetAllSubmapPosesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      submap_poses_(from.submap_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetAllSubmapPosesResponse)
}

void GetAllSubmapPosesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllSubmapPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

GetAllSubmapPosesResponse::~GetAllSubmapPosesResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  SharedDtor();
}

void GetAllSubmapPosesResponse::SharedDtor() {
}

void GetAllSubmapPosesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllSubmapPosesResponse& GetAllSubmapPosesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllSubmapPosesResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAllSubmapPosesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submap_poses_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAllSubmapPosesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submap_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllSubmapPosesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_submap_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_submap_poses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  return target;
}

size_t GetAllSubmapPosesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.cloud.proto.SubmapPose submap_poses = 1;
  total_size += 1UL * this->_internal_submap_poses_size();
  for (const auto& msg : this->submap_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllSubmapPosesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllSubmapPosesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllSubmapPosesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetAllSubmapPosesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetAllSubmapPosesResponse)
    MergeFrom(*source);
  }
}

void GetAllSubmapPosesResponse::MergeFrom(const GetAllSubmapPosesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submap_poses_.MergeFrom(from.submap_poses_);
}

void GetAllSubmapPosesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSubmapPosesResponse::CopyFrom(const GetAllSubmapPosesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetAllSubmapPosesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSubmapPosesResponse::IsInitialized() const {
  return true;
}

void GetAllSubmapPosesResponse::InternalSwap(GetAllSubmapPosesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  submap_poses_.InternalSwap(&other->submap_poses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllSubmapPosesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocalToGlobalTransformRequest::InitAsDefaultInstance() {
}
class GetLocalToGlobalTransformRequest::_Internal {
 public:
};

GetLocalToGlobalTransformRequest::GetLocalToGlobalTransformRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
}
GetLocalToGlobalTransformRequest::GetLocalToGlobalTransformRequest(const GetLocalToGlobalTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
}

void GetLocalToGlobalTransformRequest::SharedCtor() {
  trajectory_id_ = 0;
}

GetLocalToGlobalTransformRequest::~GetLocalToGlobalTransformRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  SharedDtor();
}

void GetLocalToGlobalTransformRequest::SharedDtor() {
}

void GetLocalToGlobalTransformRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocalToGlobalTransformRequest& GetLocalToGlobalTransformRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocalToGlobalTransformRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocalToGlobalTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* GetLocalToGlobalTransformRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocalToGlobalTransformRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  return target;
}

size_t GetLocalToGlobalTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalToGlobalTransformRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalToGlobalTransformRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocalToGlobalTransformRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
    MergeFrom(*source);
  }
}

void GetLocalToGlobalTransformRequest::MergeFrom(const GetLocalToGlobalTransformRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void GetLocalToGlobalTransformRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalToGlobalTransformRequest::CopyFrom(const GetLocalToGlobalTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalToGlobalTransformRequest::IsInitialized() const {
  return true;
}

void GetLocalToGlobalTransformRequest::InternalSwap(GetLocalToGlobalTransformRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocalToGlobalTransformRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocalToGlobalTransformResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_GetLocalToGlobalTransformResponse_default_instance_._instance.get_mutable()->local_to_global_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class GetLocalToGlobalTransformResponse::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_to_global(const GetLocalToGlobalTransformResponse* msg);
};

const ::cartographer::transform::proto::Rigid3d&
GetLocalToGlobalTransformResponse::_Internal::local_to_global(const GetLocalToGlobalTransformResponse* msg) {
  return *msg->local_to_global_;
}
void GetLocalToGlobalTransformResponse::clear_local_to_global() {
  if (GetArenaNoVirtual() == nullptr && local_to_global_ != nullptr) {
    delete local_to_global_;
  }
  local_to_global_ = nullptr;
}
GetLocalToGlobalTransformResponse::GetLocalToGlobalTransformResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
}
GetLocalToGlobalTransformResponse::GetLocalToGlobalTransformResponse(const GetLocalToGlobalTransformResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_to_global()) {
    local_to_global_ = new ::cartographer::transform::proto::Rigid3d(*from.local_to_global_);
  } else {
    local_to_global_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
}

void GetLocalToGlobalTransformResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocalToGlobalTransformResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  local_to_global_ = nullptr;
}

GetLocalToGlobalTransformResponse::~GetLocalToGlobalTransformResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  SharedDtor();
}

void GetLocalToGlobalTransformResponse::SharedDtor() {
  if (this != internal_default_instance()) delete local_to_global_;
}

void GetLocalToGlobalTransformResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocalToGlobalTransformResponse& GetLocalToGlobalTransformResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocalToGlobalTransformResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocalToGlobalTransformResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_to_global_ != nullptr) {
    delete local_to_global_;
  }
  local_to_global_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetLocalToGlobalTransformResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d local_to_global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_to_global(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocalToGlobalTransformResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_to_global = 1;
  if (this->has_local_to_global()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_to_global(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  return target;
}

size_t GetLocalToGlobalTransformResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_to_global = 1;
  if (this->has_local_to_global()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_to_global_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalToGlobalTransformResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalToGlobalTransformResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocalToGlobalTransformResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
    MergeFrom(*source);
  }
}

void GetLocalToGlobalTransformResponse::MergeFrom(const GetLocalToGlobalTransformResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_to_global()) {
    _internal_mutable_local_to_global()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_local_to_global());
  }
}

void GetLocalToGlobalTransformResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalToGlobalTransformResponse::CopyFrom(const GetLocalToGlobalTransformResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetLocalToGlobalTransformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalToGlobalTransformResponse::IsInitialized() const {
  return true;
}

void GetLocalToGlobalTransformResponse::InternalSwap(GetLocalToGlobalTransformResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_to_global_, other->local_to_global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocalToGlobalTransformResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConstraintsResponse::InitAsDefaultInstance() {
}
class GetConstraintsResponse::_Internal {
 public:
};

void GetConstraintsResponse::clear_constraints() {
  constraints_.Clear();
}
GetConstraintsResponse::GetConstraintsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.GetConstraintsResponse)
}
GetConstraintsResponse::GetConstraintsResponse(const GetConstraintsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      constraints_(from.constraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.GetConstraintsResponse)
}

void GetConstraintsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConstraintsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

GetConstraintsResponse::~GetConstraintsResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.GetConstraintsResponse)
  SharedDtor();
}

void GetConstraintsResponse::SharedDtor() {
}

void GetConstraintsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConstraintsResponse& GetConstraintsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConstraintsResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConstraintsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.GetConstraintsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  _internal_metadata_.Clear();
}

const char* GetConstraintsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConstraintsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.GetConstraintsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_constraints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.GetConstraintsResponse)
  return target;
}

size_t GetConstraintsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.GetConstraintsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraints = 1;
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConstraintsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConstraintsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConstraintsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.GetConstraintsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.GetConstraintsResponse)
    MergeFrom(*source);
  }
}

void GetConstraintsResponse::MergeFrom(const GetConstraintsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
}

void GetConstraintsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConstraintsResponse::CopyFrom(const GetConstraintsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.GetConstraintsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConstraintsResponse::IsInitialized() const {
  return true;
}

void GetConstraintsResponse::InternalSwap(GetConstraintsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  constraints_.InternalSwap(&other->constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConstraintsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteStateResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_WriteStateResponse_default_instance_.header_ = const_cast< ::cartographer::mapping::proto::SerializationHeader*>(
      ::cartographer::mapping::proto::SerializationHeader::internal_default_instance());
  ::cartographer::cloud::proto::_WriteStateResponse_default_instance_.serialized_data_ = const_cast< ::cartographer::mapping::proto::SerializedData*>(
      ::cartographer::mapping::proto::SerializedData::internal_default_instance());
}
class WriteStateResponse::_Internal {
 public:
  static const ::cartographer::mapping::proto::SerializationHeader& header(const WriteStateResponse* msg);
  static const ::cartographer::mapping::proto::SerializedData& serialized_data(const WriteStateResponse* msg);
};

const ::cartographer::mapping::proto::SerializationHeader&
WriteStateResponse::_Internal::header(const WriteStateResponse* msg) {
  return *msg->state_chunk_.header_;
}
const ::cartographer::mapping::proto::SerializedData&
WriteStateResponse::_Internal::serialized_data(const WriteStateResponse* msg) {
  return *msg->state_chunk_.serialized_data_;
}
void WriteStateResponse::set_allocated_header(::cartographer::mapping::proto::SerializationHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    state_chunk_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.WriteStateResponse.header)
}
void WriteStateResponse::clear_header() {
  if (_internal_has_header()) {
    delete state_chunk_.header_;
    clear_has_state_chunk();
  }
}
void WriteStateResponse::set_allocated_serialized_data(::cartographer::mapping::proto::SerializedData* serialized_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_state_chunk();
  if (serialized_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serialized_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serialized_data, submessage_arena);
    }
    set_has_serialized_data();
    state_chunk_.serialized_data_ = serialized_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.WriteStateResponse.serialized_data)
}
void WriteStateResponse::clear_serialized_data() {
  if (_internal_has_serialized_data()) {
    delete state_chunk_.serialized_data_;
    clear_has_state_chunk();
  }
}
WriteStateResponse::WriteStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.WriteStateResponse)
}
WriteStateResponse::WriteStateResponse(const WriteStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_state_chunk();
  switch (from.state_chunk_case()) {
    case kHeader: {
      _internal_mutable_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from._internal_header());
      break;
    }
    case kSerializedData: {
      _internal_mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from._internal_serialized_data());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.WriteStateResponse)
}

void WriteStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  clear_has_state_chunk();
}

WriteStateResponse::~WriteStateResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.WriteStateResponse)
  SharedDtor();
}

void WriteStateResponse::SharedDtor() {
  if (has_state_chunk()) {
    clear_state_chunk();
  }
}

void WriteStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteStateResponse& WriteStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void WriteStateResponse::clear_state_chunk() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.cloud.proto.WriteStateResponse)
  switch (state_chunk_case()) {
    case kHeader: {
      delete state_chunk_.header_;
      break;
    }
    case kSerializedData: {
      delete state_chunk_.serialized_data_;
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_CHUNK_NOT_SET;
}


void WriteStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.WriteStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_state_chunk();
  _internal_metadata_.Clear();
}

const char* WriteStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SerializationHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.SerializedData serialized_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serialized_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.WriteStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SerializationHeader header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .cartographer.mapping.proto.SerializedData serialized_data = 2;
  if (_internal_has_serialized_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::serialized_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.WriteStateResponse)
  return target;
}

size_t WriteStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.WriteStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (state_chunk_case()) {
    // .cartographer.mapping.proto.SerializationHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_chunk_.header_);
      break;
    }
    // .cartographer.mapping.proto.SerializedData serialized_data = 2;
    case kSerializedData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_chunk_.serialized_data_);
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.WriteStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.WriteStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.WriteStateResponse)
    MergeFrom(*source);
  }
}

void WriteStateResponse::MergeFrom(const WriteStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.WriteStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.state_chunk_case()) {
    case kHeader: {
      _internal_mutable_header()->::cartographer::mapping::proto::SerializationHeader::MergeFrom(from._internal_header());
      break;
    }
    case kSerializedData: {
      _internal_mutable_serialized_data()->::cartographer::mapping::proto::SerializedData::MergeFrom(from._internal_serialized_data());
      break;
    }
    case STATE_CHUNK_NOT_SET: {
      break;
    }
  }
}

void WriteStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.WriteStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStateResponse::CopyFrom(const WriteStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.WriteStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStateResponse::IsInitialized() const {
  return true;
}

void WriteStateResponse::InternalSwap(WriteStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_chunk_, other->state_chunk_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteStateToFileRequest::InitAsDefaultInstance() {
}
class WriteStateToFileRequest::_Internal {
 public:
};

WriteStateToFileRequest::WriteStateToFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.WriteStateToFileRequest)
}
WriteStateToFileRequest::WriteStateToFileRequest(const WriteStateToFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.WriteStateToFileRequest)
}

void WriteStateToFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteStateToFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WriteStateToFileRequest::~WriteStateToFileRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.WriteStateToFileRequest)
  SharedDtor();
}

void WriteStateToFileRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteStateToFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteStateToFileRequest& WriteStateToFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteStateToFileRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void WriteStateToFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.WriteStateToFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* WriteStateToFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.WriteStateToFileRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteStateToFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.WriteStateToFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.WriteStateToFileRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.WriteStateToFileRequest)
  return target;
}

size_t WriteStateToFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.WriteStateToFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStateToFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStateToFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteStateToFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.WriteStateToFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.WriteStateToFileRequest)
    MergeFrom(*source);
  }
}

void WriteStateToFileRequest::MergeFrom(const WriteStateToFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void WriteStateToFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStateToFileRequest::CopyFrom(const WriteStateToFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.WriteStateToFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStateToFileRequest::IsInitialized() const {
  return true;
}

void WriteStateToFileRequest::InternalSwap(WriteStateToFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteStateToFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteStateToFileResponse::InitAsDefaultInstance() {
}
class WriteStateToFileResponse::_Internal {
 public:
};

WriteStateToFileResponse::WriteStateToFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.WriteStateToFileResponse)
}
WriteStateToFileResponse::WriteStateToFileResponse(const WriteStateToFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&success_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.WriteStateToFileResponse)
}

void WriteStateToFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteStateToFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&success_)) + sizeof(code_));
}

WriteStateToFileResponse::~WriteStateToFileResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.WriteStateToFileResponse)
  SharedDtor();
}

void WriteStateToFileResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteStateToFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteStateToFileResponse& WriteStateToFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteStateToFileResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void WriteStateToFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.WriteStateToFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&success_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

const char* WriteStateToFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.WriteStateToFileResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteStateToFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.WriteStateToFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.WriteStateToFileResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.WriteStateToFileResponse)
  return target;
}

size_t WriteStateToFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.WriteStateToFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStateToFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStateToFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteStateToFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.WriteStateToFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.WriteStateToFileResponse)
    MergeFrom(*source);
  }
}

void WriteStateToFileResponse::MergeFrom(const WriteStateToFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void WriteStateToFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStateToFileResponse::CopyFrom(const WriteStateToFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.WriteStateToFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStateToFileResponse::IsInitialized() const {
  return true;
}

void WriteStateToFileResponse::InternalSwap(WriteStateToFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteStateToFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsTrajectoryFinishedRequest::InitAsDefaultInstance() {
}
class IsTrajectoryFinishedRequest::_Internal {
 public:
};

IsTrajectoryFinishedRequest::IsTrajectoryFinishedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
}
IsTrajectoryFinishedRequest::IsTrajectoryFinishedRequest(const IsTrajectoryFinishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
}

void IsTrajectoryFinishedRequest::SharedCtor() {
  trajectory_id_ = 0;
}

IsTrajectoryFinishedRequest::~IsTrajectoryFinishedRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  SharedDtor();
}

void IsTrajectoryFinishedRequest::SharedDtor() {
}

void IsTrajectoryFinishedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsTrajectoryFinishedRequest& IsTrajectoryFinishedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsTrajectoryFinishedRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IsTrajectoryFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* IsTrajectoryFinishedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsTrajectoryFinishedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  return target;
}

size_t IsTrajectoryFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFinishedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFinishedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsTrajectoryFinishedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
    MergeFrom(*source);
  }
}

void IsTrajectoryFinishedRequest::MergeFrom(const IsTrajectoryFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void IsTrajectoryFinishedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFinishedRequest::CopyFrom(const IsTrajectoryFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFinishedRequest::IsInitialized() const {
  return true;
}

void IsTrajectoryFinishedRequest::InternalSwap(IsTrajectoryFinishedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsTrajectoryFinishedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsTrajectoryFinishedResponse::InitAsDefaultInstance() {
}
class IsTrajectoryFinishedResponse::_Internal {
 public:
};

IsTrajectoryFinishedResponse::IsTrajectoryFinishedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
}
IsTrajectoryFinishedResponse::IsTrajectoryFinishedResponse(const IsTrajectoryFinishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_finished_ = from.is_finished_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
}

void IsTrajectoryFinishedResponse::SharedCtor() {
  is_finished_ = false;
}

IsTrajectoryFinishedResponse::~IsTrajectoryFinishedResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  SharedDtor();
}

void IsTrajectoryFinishedResponse::SharedDtor() {
}

void IsTrajectoryFinishedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsTrajectoryFinishedResponse& IsTrajectoryFinishedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsTrajectoryFinishedResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IsTrajectoryFinishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_finished_ = false;
  _internal_metadata_.Clear();
}

const char* IsTrajectoryFinishedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_finished = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsTrajectoryFinishedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_finished = 1;
  if (this->is_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  return target;
}

size_t IsTrajectoryFinishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_finished = 1;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFinishedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFinishedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsTrajectoryFinishedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
    MergeFrom(*source);
  }
}

void IsTrajectoryFinishedResponse::MergeFrom(const IsTrajectoryFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_finished() != 0) {
    _internal_set_is_finished(from._internal_is_finished());
  }
}

void IsTrajectoryFinishedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFinishedResponse::CopyFrom(const IsTrajectoryFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFinishedResponse::IsInitialized() const {
  return true;
}

void IsTrajectoryFinishedResponse::InternalSwap(IsTrajectoryFinishedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_finished_, other->is_finished_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsTrajectoryFinishedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsTrajectoryFrozenRequest::InitAsDefaultInstance() {
}
class IsTrajectoryFrozenRequest::_Internal {
 public:
};

IsTrajectoryFrozenRequest::IsTrajectoryFrozenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
}
IsTrajectoryFrozenRequest::IsTrajectoryFrozenRequest(const IsTrajectoryFrozenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
}

void IsTrajectoryFrozenRequest::SharedCtor() {
  trajectory_id_ = 0;
}

IsTrajectoryFrozenRequest::~IsTrajectoryFrozenRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  SharedDtor();
}

void IsTrajectoryFrozenRequest::SharedDtor() {
}

void IsTrajectoryFrozenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsTrajectoryFrozenRequest& IsTrajectoryFrozenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsTrajectoryFrozenRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IsTrajectoryFrozenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* IsTrajectoryFrozenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsTrajectoryFrozenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  return target;
}

size_t IsTrajectoryFrozenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFrozenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFrozenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsTrajectoryFrozenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
    MergeFrom(*source);
  }
}

void IsTrajectoryFrozenRequest::MergeFrom(const IsTrajectoryFrozenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void IsTrajectoryFrozenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFrozenRequest::CopyFrom(const IsTrajectoryFrozenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFrozenRequest::IsInitialized() const {
  return true;
}

void IsTrajectoryFrozenRequest::InternalSwap(IsTrajectoryFrozenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsTrajectoryFrozenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsTrajectoryFrozenResponse::InitAsDefaultInstance() {
}
class IsTrajectoryFrozenResponse::_Internal {
 public:
};

IsTrajectoryFrozenResponse::IsTrajectoryFrozenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
}
IsTrajectoryFrozenResponse::IsTrajectoryFrozenResponse(const IsTrajectoryFrozenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_frozen_ = from.is_frozen_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
}

void IsTrajectoryFrozenResponse::SharedCtor() {
  is_frozen_ = false;
}

IsTrajectoryFrozenResponse::~IsTrajectoryFrozenResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  SharedDtor();
}

void IsTrajectoryFrozenResponse::SharedDtor() {
}

void IsTrajectoryFrozenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsTrajectoryFrozenResponse& IsTrajectoryFrozenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsTrajectoryFrozenResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IsTrajectoryFrozenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_frozen_ = false;
  _internal_metadata_.Clear();
}

const char* IsTrajectoryFrozenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_frozen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsTrajectoryFrozenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_frozen = 1;
  if (this->is_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_frozen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  return target;
}

size_t IsTrajectoryFrozenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_frozen = 1;
  if (this->is_frozen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsTrajectoryFrozenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTrajectoryFrozenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsTrajectoryFrozenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
    MergeFrom(*source);
  }
}

void IsTrajectoryFrozenResponse::MergeFrom(const IsTrajectoryFrozenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_frozen() != 0) {
    _internal_set_is_frozen(from._internal_is_frozen());
  }
}

void IsTrajectoryFrozenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTrajectoryFrozenResponse::CopyFrom(const IsTrajectoryFrozenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.IsTrajectoryFrozenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTrajectoryFrozenResponse::IsInitialized() const {
  return true;
}

void IsTrajectoryFrozenResponse::InternalSwap(IsTrajectoryFrozenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_frozen_, other->is_frozen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsTrajectoryFrozenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_StartTrajectoryResponse::InitAsDefaultInstance() {
}
class OKagv_StartTrajectoryResponse::_Internal {
 public:
};

OKagv_StartTrajectoryResponse::OKagv_StartTrajectoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
}
OKagv_StartTrajectoryResponse::OKagv_StartTrajectoryResponse(const OKagv_StartTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&state_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
}

void OKagv_StartTrajectoryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OKagv_StartTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(code_));
}

OKagv_StartTrajectoryResponse::~OKagv_StartTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  SharedDtor();
}

void OKagv_StartTrajectoryResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OKagv_StartTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_StartTrajectoryResponse& OKagv_StartTrajectoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_StartTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_StartTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

const char* OKagv_StartTrajectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_StartTrajectoryResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_StartTrajectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_StartTrajectoryResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  return target;
}

size_t OKagv_StartTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool state = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_StartTrajectoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_StartTrajectoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_StartTrajectoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
    MergeFrom(*source);
  }
}

void OKagv_StartTrajectoryResponse::MergeFrom(const OKagv_StartTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void OKagv_StartTrajectoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_StartTrajectoryResponse::CopyFrom(const OKagv_StartTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_StartTrajectoryResponse::IsInitialized() const {
  return true;
}

void OKagv_StartTrajectoryResponse::InternalSwap(OKagv_StartTrajectoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_StartTrajectoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_FinishTrajectoryResponse::InitAsDefaultInstance() {
}
class OKagv_FinishTrajectoryResponse::_Internal {
 public:
};

OKagv_FinishTrajectoryResponse::OKagv_FinishTrajectoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
}
OKagv_FinishTrajectoryResponse::OKagv_FinishTrajectoryResponse(const OKagv_FinishTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
}

void OKagv_FinishTrajectoryResponse::SharedCtor() {
  state_ = false;
}

OKagv_FinishTrajectoryResponse::~OKagv_FinishTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  SharedDtor();
}

void OKagv_FinishTrajectoryResponse::SharedDtor() {
}

void OKagv_FinishTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_FinishTrajectoryResponse& OKagv_FinishTrajectoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_FinishTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_FinishTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = false;
  _internal_metadata_.Clear();
}

const char* OKagv_FinishTrajectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_FinishTrajectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  return target;
}

size_t OKagv_FinishTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_FinishTrajectoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_FinishTrajectoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_FinishTrajectoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
    MergeFrom(*source);
  }
}

void OKagv_FinishTrajectoryResponse::MergeFrom(const OKagv_FinishTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void OKagv_FinishTrajectoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_FinishTrajectoryResponse::CopyFrom(const OKagv_FinishTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_FinishTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_FinishTrajectoryResponse::IsInitialized() const {
  return true;
}

void OKagv_FinishTrajectoryResponse::InternalSwap(OKagv_FinishTrajectoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_FinishTrajectoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_WaitTrajectoryResponse::InitAsDefaultInstance() {
}
class OKagv_WaitTrajectoryResponse::_Internal {
 public:
};

OKagv_WaitTrajectoryResponse::OKagv_WaitTrajectoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
}
OKagv_WaitTrajectoryResponse::OKagv_WaitTrajectoryResponse(const OKagv_WaitTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
}

void OKagv_WaitTrajectoryResponse::SharedCtor() {
  state_ = false;
}

OKagv_WaitTrajectoryResponse::~OKagv_WaitTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  SharedDtor();
}

void OKagv_WaitTrajectoryResponse::SharedDtor() {
}

void OKagv_WaitTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_WaitTrajectoryResponse& OKagv_WaitTrajectoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_WaitTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_WaitTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = false;
  _internal_metadata_.Clear();
}

const char* OKagv_WaitTrajectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_WaitTrajectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  return target;
}

size_t OKagv_WaitTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_WaitTrajectoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_WaitTrajectoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_WaitTrajectoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
    MergeFrom(*source);
  }
}

void OKagv_WaitTrajectoryResponse::MergeFrom(const OKagv_WaitTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void OKagv_WaitTrajectoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_WaitTrajectoryResponse::CopyFrom(const OKagv_WaitTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_WaitTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_WaitTrajectoryResponse::IsInitialized() const {
  return true;
}

void OKagv_WaitTrajectoryResponse::InternalSwap(OKagv_WaitTrajectoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_WaitTrajectoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_GetOrderResponse::InitAsDefaultInstance() {
}
class OKagv_GetOrderResponse::_Internal {
 public:
};

OKagv_GetOrderResponse::OKagv_GetOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_GetOrderResponse)
}
OKagv_GetOrderResponse::OKagv_GetOrderResponse(const OKagv_GetOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_type_ = from.order_type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_GetOrderResponse)
}

void OKagv_GetOrderResponse::SharedCtor() {
  order_type_ = 0;
}

OKagv_GetOrderResponse::~OKagv_GetOrderResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_GetOrderResponse)
  SharedDtor();
}

void OKagv_GetOrderResponse::SharedDtor() {
}

void OKagv_GetOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_GetOrderResponse& OKagv_GetOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_GetOrderResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_GetOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_type_ = 0;
  _internal_metadata_.Clear();
}

const char* OKagv_GetOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 order_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_GetOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 order_type = 1;
  if (this->order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_GetOrderResponse)
  return target;
}

size_t OKagv_GetOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 order_type = 1;
  if (this->order_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_GetOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_GetOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_GetOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_GetOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_GetOrderResponse)
    MergeFrom(*source);
  }
}

void OKagv_GetOrderResponse::MergeFrom(const OKagv_GetOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_type() != 0) {
    _internal_set_order_type(from._internal_order_type());
  }
}

void OKagv_GetOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_GetOrderResponse::CopyFrom(const OKagv_GetOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_GetOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_GetOrderResponse::IsInitialized() const {
  return true;
}

void OKagv_GetOrderResponse::InternalSwap(OKagv_GetOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_type_, other->order_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_GetOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_LoadTrajectoryRequest::InitAsDefaultInstance() {
}
class OKagv_LoadTrajectoryRequest::_Internal {
 public:
};

OKagv_LoadTrajectoryRequest::OKagv_LoadTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
}
OKagv_LoadTrajectoryRequest::OKagv_LoadTrajectoryRequest(const OKagv_LoadTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
}

void OKagv_LoadTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OKagv_LoadTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OKagv_LoadTrajectoryRequest::~OKagv_LoadTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  SharedDtor();
}

void OKagv_LoadTrajectoryRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OKagv_LoadTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_LoadTrajectoryRequest& OKagv_LoadTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_LoadTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_LoadTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* OKagv_LoadTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_LoadTrajectoryRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_LoadTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_LoadTrajectoryRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  return target;
}

size_t OKagv_LoadTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_LoadTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_LoadTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_LoadTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
    MergeFrom(*source);
  }
}

void OKagv_LoadTrajectoryRequest::MergeFrom(const OKagv_LoadTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void OKagv_LoadTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_LoadTrajectoryRequest::CopyFrom(const OKagv_LoadTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_LoadTrajectoryRequest::IsInitialized() const {
  return true;
}

void OKagv_LoadTrajectoryRequest::InternalSwap(OKagv_LoadTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_LoadTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_LoadTrajectoryResponse::InitAsDefaultInstance() {
}
class OKagv_LoadTrajectoryResponse::_Internal {
 public:
};

OKagv_LoadTrajectoryResponse::OKagv_LoadTrajectoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
}
OKagv_LoadTrajectoryResponse::OKagv_LoadTrajectoryResponse(const OKagv_LoadTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
}

void OKagv_LoadTrajectoryResponse::SharedCtor() {
  state_ = false;
}

OKagv_LoadTrajectoryResponse::~OKagv_LoadTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  SharedDtor();
}

void OKagv_LoadTrajectoryResponse::SharedDtor() {
}

void OKagv_LoadTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_LoadTrajectoryResponse& OKagv_LoadTrajectoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_LoadTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_LoadTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = false;
  _internal_metadata_.Clear();
}

const char* OKagv_LoadTrajectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_LoadTrajectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  return target;
}

size_t OKagv_LoadTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_LoadTrajectoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_LoadTrajectoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_LoadTrajectoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
    MergeFrom(*source);
  }
}

void OKagv_LoadTrajectoryResponse::MergeFrom(const OKagv_LoadTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void OKagv_LoadTrajectoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_LoadTrajectoryResponse::CopyFrom(const OKagv_LoadTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_LoadTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_LoadTrajectoryResponse::IsInitialized() const {
  return true;
}

void OKagv_LoadTrajectoryResponse::InternalSwap(OKagv_LoadTrajectoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_LoadTrajectoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_LocalizeTrajectoryRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_OKagv_LocalizeTrajectoryRequest_default_instance_._instance.get_mutable()->initial_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class OKagv_LocalizeTrajectoryRequest::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& initial_pose(const OKagv_LocalizeTrajectoryRequest* msg);
};

const ::cartographer::transform::proto::Rigid3d&
OKagv_LocalizeTrajectoryRequest::_Internal::initial_pose(const OKagv_LocalizeTrajectoryRequest* msg) {
  return *msg->initial_pose_;
}
void OKagv_LocalizeTrajectoryRequest::clear_initial_pose() {
  if (GetArenaNoVirtual() == nullptr && initial_pose_ != nullptr) {
    delete initial_pose_;
  }
  initial_pose_ = nullptr;
}
OKagv_LocalizeTrajectoryRequest::OKagv_LocalizeTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
}
OKagv_LocalizeTrajectoryRequest::OKagv_LocalizeTrajectoryRequest(const OKagv_LocalizeTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_initial_pose()) {
    initial_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.initial_pose_);
  } else {
    initial_pose_ = nullptr;
  }
  use_initial_pose_ = from.use_initial_pose_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
}

void OKagv_LocalizeTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OKagv_LocalizeTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&initial_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_initial_pose_) -
      reinterpret_cast<char*>(&initial_pose_)) + sizeof(use_initial_pose_));
}

OKagv_LocalizeTrajectoryRequest::~OKagv_LocalizeTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  SharedDtor();
}

void OKagv_LocalizeTrajectoryRequest::SharedDtor() {
  if (this != internal_default_instance()) delete initial_pose_;
}

void OKagv_LocalizeTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_LocalizeTrajectoryRequest& OKagv_LocalizeTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_LocalizeTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_LocalizeTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && initial_pose_ != nullptr) {
    delete initial_pose_;
  }
  initial_pose_ = nullptr;
  use_initial_pose_ = false;
  _internal_metadata_.Clear();
}

const char* OKagv_LocalizeTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_initial_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_initial_pose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d initial_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_LocalizeTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_initial_pose = 1;
  if (this->use_initial_pose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_initial_pose(), target);
  }

  // .cartographer.transform.proto.Rigid3d initial_pose = 2;
  if (this->has_initial_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::initial_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  return target;
}

size_t OKagv_LocalizeTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d initial_pose = 2;
  if (this->has_initial_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_pose_);
  }

  // bool use_initial_pose = 1;
  if (this->use_initial_pose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_LocalizeTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_LocalizeTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_LocalizeTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
    MergeFrom(*source);
  }
}

void OKagv_LocalizeTrajectoryRequest::MergeFrom(const OKagv_LocalizeTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_initial_pose()) {
    _internal_mutable_initial_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_initial_pose());
  }
  if (from.use_initial_pose() != 0) {
    _internal_set_use_initial_pose(from._internal_use_initial_pose());
  }
}

void OKagv_LocalizeTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_LocalizeTrajectoryRequest::CopyFrom(const OKagv_LocalizeTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_LocalizeTrajectoryRequest::IsInitialized() const {
  return true;
}

void OKagv_LocalizeTrajectoryRequest::InternalSwap(OKagv_LocalizeTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(initial_pose_, other->initial_pose_);
  swap(use_initial_pose_, other->use_initial_pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_LocalizeTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_LocalizeTrajectoryResponse::InitAsDefaultInstance() {
}
class OKagv_LocalizeTrajectoryResponse::_Internal {
 public:
};

OKagv_LocalizeTrajectoryResponse::OKagv_LocalizeTrajectoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
}
OKagv_LocalizeTrajectoryResponse::OKagv_LocalizeTrajectoryResponse(const OKagv_LocalizeTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_score_) -
    reinterpret_cast<char*>(&state_)) + sizeof(confidence_score_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
}

void OKagv_LocalizeTrajectoryResponse::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_score_) -
      reinterpret_cast<char*>(&state_)) + sizeof(confidence_score_));
}

OKagv_LocalizeTrajectoryResponse::~OKagv_LocalizeTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  SharedDtor();
}

void OKagv_LocalizeTrajectoryResponse::SharedDtor() {
}

void OKagv_LocalizeTrajectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_LocalizeTrajectoryResponse& OKagv_LocalizeTrajectoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_LocalizeTrajectoryResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_LocalizeTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_score_) -
      reinterpret_cast<char*>(&state_)) + sizeof(confidence_score_));
  _internal_metadata_.Clear();
}

const char* OKagv_LocalizeTrajectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confidence_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          confidence_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_LocalizeTrajectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  // int32 confidence_score = 2;
  if (this->confidence_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_confidence_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  return target;
}

size_t OKagv_LocalizeTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool state = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  // int32 confidence_score = 2;
  if (this->confidence_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_LocalizeTrajectoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_LocalizeTrajectoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_LocalizeTrajectoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
    MergeFrom(*source);
  }
}

void OKagv_LocalizeTrajectoryResponse::MergeFrom(const OKagv_LocalizeTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.confidence_score() != 0) {
    _internal_set_confidence_score(from._internal_confidence_score());
  }
}

void OKagv_LocalizeTrajectoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_LocalizeTrajectoryResponse::CopyFrom(const OKagv_LocalizeTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_LocalizeTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_LocalizeTrajectoryResponse::IsInitialized() const {
  return true;
}

void OKagv_LocalizeTrajectoryResponse::InternalSwap(OKagv_LocalizeTrajectoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(confidence_score_, other->confidence_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_LocalizeTrajectoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_StartTrajectoryRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_OKagv_StartTrajectoryRequest_default_instance_._instance.get_mutable()->initial_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class OKagv_StartTrajectoryRequest::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& initial_pose(const OKagv_StartTrajectoryRequest* msg);
};

const ::cartographer::transform::proto::Rigid3d&
OKagv_StartTrajectoryRequest::_Internal::initial_pose(const OKagv_StartTrajectoryRequest* msg) {
  return *msg->initial_pose_;
}
void OKagv_StartTrajectoryRequest::clear_initial_pose() {
  if (GetArenaNoVirtual() == nullptr && initial_pose_ != nullptr) {
    delete initial_pose_;
  }
  initial_pose_ = nullptr;
}
OKagv_StartTrajectoryRequest::OKagv_StartTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
}
OKagv_StartTrajectoryRequest::OKagv_StartTrajectoryRequest(const OKagv_StartTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trajectory_type().empty()) {
    trajectory_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trajectory_type_);
  }
  trajectory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trajectory_id().empty()) {
    trajectory_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trajectory_id_);
  }
  relative_to_trajectory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_relative_to_trajectory_id().empty()) {
    relative_to_trajectory_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.relative_to_trajectory_id_);
  }
  if (from._internal_has_initial_pose()) {
    initial_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.initial_pose_);
  } else {
    initial_pose_ = nullptr;
  }
  use_initial_pose_ = from.use_initial_pose_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
}

void OKagv_StartTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OKagv_StartTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  trajectory_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relative_to_trajectory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initial_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_initial_pose_) -
      reinterpret_cast<char*>(&initial_pose_)) + sizeof(use_initial_pose_));
}

OKagv_StartTrajectoryRequest::~OKagv_StartTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  SharedDtor();
}

void OKagv_StartTrajectoryRequest::SharedDtor() {
  trajectory_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relative_to_trajectory_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete initial_pose_;
}

void OKagv_StartTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_StartTrajectoryRequest& OKagv_StartTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_StartTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_StartTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relative_to_trajectory_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && initial_pose_ != nullptr) {
    delete initial_pose_;
  }
  initial_pose_ = nullptr;
  use_initial_pose_ = false;
  _internal_metadata_.Clear();
}

const char* OKagv_StartTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trajectory_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trajectory_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_StartTrajectoryRequest.trajectory_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trajectory_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_trajectory_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_StartTrajectoryRequest.trajectory_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_initial_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_initial_pose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d initial_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string relative_to_trajectory_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_relative_to_trajectory_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_StartTrajectoryRequest.relative_to_trajectory_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_StartTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trajectory_type = 1;
  if (this->trajectory_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trajectory_type().data(), static_cast<int>(this->_internal_trajectory_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_StartTrajectoryRequest.trajectory_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trajectory_type(), target);
  }

  // string trajectory_id = 2;
  if (this->trajectory_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trajectory_id().data(), static_cast<int>(this->_internal_trajectory_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_StartTrajectoryRequest.trajectory_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trajectory_id(), target);
  }

  // bool use_initial_pose = 3;
  if (this->use_initial_pose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_initial_pose(), target);
  }

  // .cartographer.transform.proto.Rigid3d initial_pose = 4;
  if (this->has_initial_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::initial_pose(this), target, stream);
  }

  // string relative_to_trajectory_id = 5;
  if (this->relative_to_trajectory_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relative_to_trajectory_id().data(), static_cast<int>(this->_internal_relative_to_trajectory_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_StartTrajectoryRequest.relative_to_trajectory_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_relative_to_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  return target;
}

size_t OKagv_StartTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trajectory_type = 1;
  if (this->trajectory_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trajectory_type());
  }

  // string trajectory_id = 2;
  if (this->trajectory_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trajectory_id());
  }

  // string relative_to_trajectory_id = 5;
  if (this->relative_to_trajectory_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relative_to_trajectory_id());
  }

  // .cartographer.transform.proto.Rigid3d initial_pose = 4;
  if (this->has_initial_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_pose_);
  }

  // bool use_initial_pose = 3;
  if (this->use_initial_pose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_StartTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_StartTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_StartTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
    MergeFrom(*source);
  }
}

void OKagv_StartTrajectoryRequest::MergeFrom(const OKagv_StartTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_type().size() > 0) {

    trajectory_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trajectory_type_);
  }
  if (from.trajectory_id().size() > 0) {

    trajectory_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trajectory_id_);
  }
  if (from.relative_to_trajectory_id().size() > 0) {

    relative_to_trajectory_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.relative_to_trajectory_id_);
  }
  if (from.has_initial_pose()) {
    _internal_mutable_initial_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_initial_pose());
  }
  if (from.use_initial_pose() != 0) {
    _internal_set_use_initial_pose(from._internal_use_initial_pose());
  }
}

void OKagv_StartTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_StartTrajectoryRequest::CopyFrom(const OKagv_StartTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_StartTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_StartTrajectoryRequest::IsInitialized() const {
  return true;
}

void OKagv_StartTrajectoryRequest::InternalSwap(OKagv_StartTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trajectory_type_.Swap(&other->trajectory_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trajectory_id_.Swap(&other->trajectory_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  relative_to_trajectory_id_.Swap(&other->relative_to_trajectory_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(initial_pose_, other->initial_pose_);
  swap(use_initial_pose_, other->use_initial_pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_StartTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_SaveTrajectoryRequest::InitAsDefaultInstance() {
}
class OKagv_SaveTrajectoryRequest::_Internal {
 public:
};

OKagv_SaveTrajectoryRequest::OKagv_SaveTrajectoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
}
OKagv_SaveTrajectoryRequest::OKagv_SaveTrajectoryRequest(const OKagv_SaveTrajectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  include_unfinished_submaps_ = from.include_unfinished_submaps_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
}

void OKagv_SaveTrajectoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OKagv_SaveTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_unfinished_submaps_ = false;
}

OKagv_SaveTrajectoryRequest::~OKagv_SaveTrajectoryRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  SharedDtor();
}

void OKagv_SaveTrajectoryRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OKagv_SaveTrajectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_SaveTrajectoryRequest& OKagv_SaveTrajectoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_SaveTrajectoryRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_SaveTrajectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_unfinished_submaps_ = false;
  _internal_metadata_.Clear();
}

const char* OKagv_SaveTrajectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_SaveTrajectoryRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_unfinished_submaps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_unfinished_submaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_SaveTrajectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_SaveTrajectoryRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // bool include_unfinished_submaps = 2;
  if (this->include_unfinished_submaps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_unfinished_submaps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  return target;
}

size_t OKagv_SaveTrajectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // bool include_unfinished_submaps = 2;
  if (this->include_unfinished_submaps() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_SaveTrajectoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_SaveTrajectoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_SaveTrajectoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
    MergeFrom(*source);
  }
}

void OKagv_SaveTrajectoryRequest::MergeFrom(const OKagv_SaveTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.include_unfinished_submaps() != 0) {
    _internal_set_include_unfinished_submaps(from._internal_include_unfinished_submaps());
  }
}

void OKagv_SaveTrajectoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_SaveTrajectoryRequest::CopyFrom(const OKagv_SaveTrajectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_SaveTrajectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_SaveTrajectoryRequest::IsInitialized() const {
  return true;
}

void OKagv_SaveTrajectoryRequest::InternalSwap(OKagv_SaveTrajectoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(include_unfinished_submaps_, other->include_unfinished_submaps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_SaveTrajectoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OKagv_GetTrajectoryStateResponse::InitAsDefaultInstance() {
}
class OKagv_GetTrajectoryStateResponse::_Internal {
 public:
};

OKagv_GetTrajectoryStateResponse::OKagv_GetTrajectoryStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
}
OKagv_GetTrajectoryStateResponse::OKagv_GetTrajectoryStateResponse(const OKagv_GetTrajectoryStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
}

void OKagv_GetTrajectoryStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OKagv_GetTrajectoryStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

OKagv_GetTrajectoryStateResponse::~OKagv_GetTrajectoryStateResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  SharedDtor();
}

void OKagv_GetTrajectoryStateResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OKagv_GetTrajectoryStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OKagv_GetTrajectoryStateResponse& OKagv_GetTrajectoryStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OKagv_GetTrajectoryStateResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OKagv_GetTrajectoryStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* OKagv_GetTrajectoryStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OKagv_GetTrajectoryStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  return target;
}

size_t OKagv_GetTrajectoryStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OKagv_GetTrajectoryStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OKagv_GetTrajectoryStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OKagv_GetTrajectoryStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
    MergeFrom(*source);
  }
}

void OKagv_GetTrajectoryStateResponse::MergeFrom(const OKagv_GetTrajectoryStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void OKagv_GetTrajectoryStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKagv_GetTrajectoryStateResponse::CopyFrom(const OKagv_GetTrajectoryStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.OKagv_GetTrajectoryStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKagv_GetTrajectoryStateResponse::IsInitialized() const {
  return true;
}

void OKagv_GetTrajectoryStateResponse::InternalSwap(OKagv_GetTrajectoryStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OKagv_GetTrajectoryStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::SensorId* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorId >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::SensorMetadata* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::SensorData* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddSensorDataBatchRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddSensorDataBatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddSensorDataBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddOdometryDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddOdometryDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddOdometryDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddImuDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddImuDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddImuDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddRangefinderDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddRangefinderDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddRangefinderDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddFixedFramePoseDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddFixedFramePoseDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddFixedFramePoseDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddLandmarkDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddLandmarkDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddLandmarkDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::FinishTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::FinishTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::FinishTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::DeleteTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::DeleteTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::DeleteTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveLocalSlamResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::LocalSlamInsertionResult* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LocalSlamInsertionResult >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LocalSlamInsertionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveLocalSlamResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedNodeIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse_LastOptimizedSubmapIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::ReceiveGlobalSlamOptimizationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetSubmapRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetSubmapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetSubmapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::LoadStateRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryRemapping_SerializedTrajectoriesToTrajectoriesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::TrajectoryRemapping* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryRemapping >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryRemapping >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::LoadStateResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::LoadStateFromFileRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateFromFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateFromFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::LoadStateFromFileResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::LoadStateFromFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::LoadStateFromFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetSubmapResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetSubmapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetSubmapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryNodePose_ConstantPoseData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::TrajectoryNodePose* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::TrajectoryNodePose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::TrajectoryNodePose >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetTrajectoryNodePosesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetTrajectoryStatesResponse_TrajectoriesStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetTrajectoryStatesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetTrajectoryStatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetTrajectoryStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetLandmarkPosesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetLandmarkPosesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetLandmarkPosesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::SetLandmarkPoseRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SetLandmarkPoseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SetLandmarkPoseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::SubmapPose* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SubmapPose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SubmapPose >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetAllSubmapPosesResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetAllSubmapPosesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetAllSubmapPosesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetLocalToGlobalTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetLocalToGlobalTransformResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::GetConstraintsResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::GetConstraintsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::GetConstraintsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::WriteStateResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::WriteStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::WriteStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::WriteStateToFileRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::WriteStateToFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::WriteStateToFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::WriteStateToFileResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::WriteStateToFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::WriteStateToFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFinishedRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFinishedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFinishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFinishedResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFinishedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFinishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFrozenRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFrozenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFrozenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::IsTrajectoryFrozenResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::IsTrajectoryFrozenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::IsTrajectoryFrozenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_StartTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_StartTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_StartTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_FinishTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_WaitTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_GetOrderResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_GetOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_GetOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_LoadTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_LoadTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_LocalizeTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_StartTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_StartTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_StartTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_SaveTrajectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::OKagv_GetTrajectoryStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
