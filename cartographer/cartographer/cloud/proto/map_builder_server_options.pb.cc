// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_server_options.proto

#include "cartographer/cloud/proto/map_builder_server_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto;
namespace cartographer {
namespace cloud {
namespace proto {
class MapBuilderServerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapBuilderServerOptions> _instance;
} _MapBuilderServerOptions_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
static void InitDefaultsscc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_;
    new (ptr) ::cartographer::cloud::proto::MapBuilderServerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::MapBuilderServerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto}, {
      &scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, server_address_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, num_grpc_threads_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, num_event_threads_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, map_builder_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, uplink_server_address_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, upload_batch_size_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, enable_ssl_encryption_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, enable_google_auth_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, root_file_directory_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::cloud::proto::MapBuilderServerOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9cartographer/cloud/proto/map_builder_s"
  "erver_options.proto\022\030cartographer.cloud."
  "proto\0324cartographer/mapping/proto/map_bu"
  "ilder_options.proto\"\304\002\n\027MapBuilderServer"
  "Options\022\026\n\016server_address\030\001 \001(\t\022\030\n\020num_g"
  "rpc_threads\030\002 \001(\005\022\031\n\021num_event_threads\030\003"
  " \001(\005\022J\n\023map_builder_options\030\004 \001(\0132-.cart"
  "ographer.mapping.proto.MapBuilderOptions"
  "\022\035\n\025uplink_server_address\030\005 \001(\t\022\031\n\021uploa"
  "d_batch_size\030\006 \001(\005\022\035\n\025enable_ssl_encrypt"
  "ion\030\007 \001(\010\022\032\n\022enable_google_auth\030\t \001(\010\022\033\n"
  "\023root_file_directory\030\n \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_sccs[1] = {
  &scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_once;
static bool descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = {
  &descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_initialized, descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, "cartographer/cloud/proto/map_builder_server_options.proto", 474,
  &descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_once, descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_sccs, descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto), true);
namespace cartographer {
namespace cloud {
namespace proto {

// ===================================================================

void MapBuilderServerOptions::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_._instance.get_mutable()->map_builder_options_ = const_cast< ::cartographer::mapping::proto::MapBuilderOptions*>(
      ::cartographer::mapping::proto::MapBuilderOptions::internal_default_instance());
}
class MapBuilderServerOptions::_Internal {
 public:
  static const ::cartographer::mapping::proto::MapBuilderOptions& map_builder_options(const MapBuilderServerOptions* msg);
};

const ::cartographer::mapping::proto::MapBuilderOptions&
MapBuilderServerOptions::_Internal::map_builder_options(const MapBuilderServerOptions* msg) {
  return *msg->map_builder_options_;
}
void MapBuilderServerOptions::clear_map_builder_options() {
  if (GetArenaNoVirtual() == nullptr && map_builder_options_ != nullptr) {
    delete map_builder_options_;
  }
  map_builder_options_ = nullptr;
}
MapBuilderServerOptions::MapBuilderServerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.MapBuilderServerOptions)
}
MapBuilderServerOptions::MapBuilderServerOptions(const MapBuilderServerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_address().empty()) {
    server_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  uplink_server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uplink_server_address().empty()) {
    uplink_server_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uplink_server_address_);
  }
  root_file_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root_file_directory().empty()) {
    root_file_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_file_directory_);
  }
  if (from._internal_has_map_builder_options()) {
    map_builder_options_ = new ::cartographer::mapping::proto::MapBuilderOptions(*from.map_builder_options_);
  } else {
    map_builder_options_ = nullptr;
  }
  ::memcpy(&num_grpc_threads_, &from.num_grpc_threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_google_auth_) -
    reinterpret_cast<char*>(&num_grpc_threads_)) + sizeof(enable_google_auth_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.MapBuilderServerOptions)
}

void MapBuilderServerOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.base);
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_file_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&map_builder_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_google_auth_) -
      reinterpret_cast<char*>(&map_builder_options_)) + sizeof(enable_google_auth_));
}

MapBuilderServerOptions::~MapBuilderServerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.MapBuilderServerOptions)
  SharedDtor();
}

void MapBuilderServerOptions::SharedDtor() {
  server_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_file_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_builder_options_;
}

void MapBuilderServerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapBuilderServerOptions& MapBuilderServerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.base);
  return *internal_default_instance();
}


void MapBuilderServerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_file_directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && map_builder_options_ != nullptr) {
    delete map_builder_options_;
  }
  map_builder_options_ = nullptr;
  ::memset(&num_grpc_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_google_auth_) -
      reinterpret_cast<char*>(&num_grpc_threads_)) + sizeof(enable_google_auth_));
  _internal_metadata_.Clear();
}

const char* MapBuilderServerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.MapBuilderServerOptions.server_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_grpc_threads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_grpc_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_event_threads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_event_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_builder_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uplink_server_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_uplink_server_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upload_batch_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          upload_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_ssl_encryption = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_ssl_encryption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_google_auth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          enable_google_auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string root_file_directory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_root_file_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapBuilderServerOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.server_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_address(), target);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_grpc_threads(), target);
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_event_threads(), target);
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::map_builder_options(this), target, stream);
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uplink_server_address().data(), static_cast<int>(this->_internal_uplink_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_uplink_server_address(), target);
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_upload_batch_size(), target);
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_ssl_encryption(), target);
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_google_auth(), target);
  }

  // string root_file_directory = 10;
  if (this->root_file_directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root_file_directory().data(), static_cast<int>(this->_internal_root_file_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_root_file_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.MapBuilderServerOptions)
  return target;
}

size_t MapBuilderServerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.MapBuilderServerOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_address());
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uplink_server_address());
  }

  // string root_file_directory = 10;
  if (this->root_file_directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root_file_directory());
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_builder_options_);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_grpc_threads());
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_event_threads());
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upload_batch_size());
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBuilderServerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBuilderServerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapBuilderServerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.MapBuilderServerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.MapBuilderServerOptions)
    MergeFrom(*source);
  }
}

void MapBuilderServerOptions::MergeFrom(const MapBuilderServerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_address().size() > 0) {

    server_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  if (from.uplink_server_address().size() > 0) {

    uplink_server_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uplink_server_address_);
  }
  if (from.root_file_directory().size() > 0) {

    root_file_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_file_directory_);
  }
  if (from.has_map_builder_options()) {
    _internal_mutable_map_builder_options()->::cartographer::mapping::proto::MapBuilderOptions::MergeFrom(from._internal_map_builder_options());
  }
  if (from.num_grpc_threads() != 0) {
    _internal_set_num_grpc_threads(from._internal_num_grpc_threads());
  }
  if (from.num_event_threads() != 0) {
    _internal_set_num_event_threads(from._internal_num_event_threads());
  }
  if (from.upload_batch_size() != 0) {
    _internal_set_upload_batch_size(from._internal_upload_batch_size());
  }
  if (from.enable_ssl_encryption() != 0) {
    _internal_set_enable_ssl_encryption(from._internal_enable_ssl_encryption());
  }
  if (from.enable_google_auth() != 0) {
    _internal_set_enable_google_auth(from._internal_enable_google_auth());
  }
}

void MapBuilderServerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBuilderServerOptions::CopyFrom(const MapBuilderServerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBuilderServerOptions::IsInitialized() const {
  return true;
}

void MapBuilderServerOptions::InternalSwap(MapBuilderServerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_address_.Swap(&other->server_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uplink_server_address_.Swap(&other->uplink_server_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  root_file_directory_.Swap(&other->root_file_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(map_builder_options_, other->map_builder_options_);
  swap(num_grpc_threads_, other->num_grpc_threads_);
  swap(num_event_threads_, other->num_event_threads_);
  swap(upload_batch_size_, other->upload_batch_size_);
  swap(enable_ssl_encryption_, other->enable_ssl_encryption_);
  swap(enable_google_auth_, other->enable_google_auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapBuilderServerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::MapBuilderServerOptions* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::MapBuilderServerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::MapBuilderServerOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
