// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_server_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/map_builder_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto;
namespace cartographer {
namespace cloud {
namespace proto {
class MapBuilderServerOptions;
class MapBuilderServerOptionsDefaultTypeInternal;
extern MapBuilderServerOptionsDefaultTypeInternal _MapBuilderServerOptions_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::cloud::proto::MapBuilderServerOptions* Arena::CreateMaybeMessage<::cartographer::cloud::proto::MapBuilderServerOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace cloud {
namespace proto {

// ===================================================================

class MapBuilderServerOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.cloud.proto.MapBuilderServerOptions) */ {
 public:
  MapBuilderServerOptions();
  virtual ~MapBuilderServerOptions();

  MapBuilderServerOptions(const MapBuilderServerOptions& from);
  MapBuilderServerOptions(MapBuilderServerOptions&& from) noexcept
    : MapBuilderServerOptions() {
    *this = ::std::move(from);
  }

  inline MapBuilderServerOptions& operator=(const MapBuilderServerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBuilderServerOptions& operator=(MapBuilderServerOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBuilderServerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBuilderServerOptions* internal_default_instance() {
    return reinterpret_cast<const MapBuilderServerOptions*>(
               &_MapBuilderServerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapBuilderServerOptions& a, MapBuilderServerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MapBuilderServerOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapBuilderServerOptions* New() const final {
    return CreateMaybeMessage<MapBuilderServerOptions>(nullptr);
  }

  MapBuilderServerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBuilderServerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBuilderServerOptions& from);
  void MergeFrom(const MapBuilderServerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBuilderServerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.cloud.proto.MapBuilderServerOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 1,
    kUplinkServerAddressFieldNumber = 5,
    kRootFileDirectoryFieldNumber = 10,
    kMapBuilderOptionsFieldNumber = 4,
    kNumGrpcThreadsFieldNumber = 2,
    kNumEventThreadsFieldNumber = 3,
    kUploadBatchSizeFieldNumber = 6,
    kEnableSslEncryptionFieldNumber = 7,
    kEnableGoogleAuthFieldNumber = 9,
  };
  // string server_address = 1;
  void clear_server_address();
  const std::string& server_address() const;
  void set_server_address(const std::string& value);
  void set_server_address(std::string&& value);
  void set_server_address(const char* value);
  void set_server_address(const char* value, size_t size);
  std::string* mutable_server_address();
  std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // string uplink_server_address = 5;
  void clear_uplink_server_address();
  const std::string& uplink_server_address() const;
  void set_uplink_server_address(const std::string& value);
  void set_uplink_server_address(std::string&& value);
  void set_uplink_server_address(const char* value);
  void set_uplink_server_address(const char* value, size_t size);
  std::string* mutable_uplink_server_address();
  std::string* release_uplink_server_address();
  void set_allocated_uplink_server_address(std::string* uplink_server_address);
  private:
  const std::string& _internal_uplink_server_address() const;
  void _internal_set_uplink_server_address(const std::string& value);
  std::string* _internal_mutable_uplink_server_address();
  public:

  // string root_file_directory = 10;
  void clear_root_file_directory();
  const std::string& root_file_directory() const;
  void set_root_file_directory(const std::string& value);
  void set_root_file_directory(std::string&& value);
  void set_root_file_directory(const char* value);
  void set_root_file_directory(const char* value, size_t size);
  std::string* mutable_root_file_directory();
  std::string* release_root_file_directory();
  void set_allocated_root_file_directory(std::string* root_file_directory);
  private:
  const std::string& _internal_root_file_directory() const;
  void _internal_set_root_file_directory(const std::string& value);
  std::string* _internal_mutable_root_file_directory();
  public:

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  bool has_map_builder_options() const;
  private:
  bool _internal_has_map_builder_options() const;
  public:
  void clear_map_builder_options();
  const ::cartographer::mapping::proto::MapBuilderOptions& map_builder_options() const;
  ::cartographer::mapping::proto::MapBuilderOptions* release_map_builder_options();
  ::cartographer::mapping::proto::MapBuilderOptions* mutable_map_builder_options();
  void set_allocated_map_builder_options(::cartographer::mapping::proto::MapBuilderOptions* map_builder_options);
  private:
  const ::cartographer::mapping::proto::MapBuilderOptions& _internal_map_builder_options() const;
  ::cartographer::mapping::proto::MapBuilderOptions* _internal_mutable_map_builder_options();
  public:

  // int32 num_grpc_threads = 2;
  void clear_num_grpc_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 num_grpc_threads() const;
  void set_num_grpc_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_grpc_threads() const;
  void _internal_set_num_grpc_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_event_threads = 3;
  void clear_num_event_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 num_event_threads() const;
  void set_num_event_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_event_threads() const;
  void _internal_set_num_event_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upload_batch_size = 6;
  void clear_upload_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 upload_batch_size() const;
  void set_upload_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upload_batch_size() const;
  void _internal_set_upload_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable_ssl_encryption = 7;
  void clear_enable_ssl_encryption();
  bool enable_ssl_encryption() const;
  void set_enable_ssl_encryption(bool value);
  private:
  bool _internal_enable_ssl_encryption() const;
  void _internal_set_enable_ssl_encryption(bool value);
  public:

  // bool enable_google_auth = 9;
  void clear_enable_google_auth();
  bool enable_google_auth() const;
  void set_enable_google_auth(bool value);
  private:
  bool _internal_enable_google_auth() const;
  void _internal_set_enable_google_auth(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.cloud.proto.MapBuilderServerOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uplink_server_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_file_directory_;
  ::cartographer::mapping::proto::MapBuilderOptions* map_builder_options_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_grpc_threads_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_event_threads_;
  ::PROTOBUF_NAMESPACE_ID::int32 upload_batch_size_;
  bool enable_ssl_encryption_;
  bool enable_google_auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapBuilderServerOptions

// string server_address = 1;
inline void MapBuilderServerOptions::clear_server_address() {
  server_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapBuilderServerOptions::server_address() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
  return _internal_server_address();
}
inline void MapBuilderServerOptions::set_server_address(const std::string& value) {
  _internal_set_server_address(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
}
inline std::string* MapBuilderServerOptions::mutable_server_address() {
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
  return _internal_mutable_server_address();
}
inline const std::string& MapBuilderServerOptions::_internal_server_address() const {
  return server_address_.GetNoArena();
}
inline void MapBuilderServerOptions::_internal_set_server_address(const std::string& value) {
  
  server_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapBuilderServerOptions::set_server_address(std::string&& value) {
  
  server_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
}
inline void MapBuilderServerOptions::set_server_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
}
inline void MapBuilderServerOptions::set_server_address(const char* value, size_t size) {
  
  server_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
}
inline std::string* MapBuilderServerOptions::_internal_mutable_server_address() {
  
  return server_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapBuilderServerOptions::release_server_address() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
  
  return server_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapBuilderServerOptions::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  server_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_address);
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.MapBuilderServerOptions.server_address)
}

// int32 num_grpc_threads = 2;
inline void MapBuilderServerOptions::clear_num_grpc_threads() {
  num_grpc_threads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderServerOptions::_internal_num_grpc_threads() const {
  return num_grpc_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderServerOptions::num_grpc_threads() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.num_grpc_threads)
  return _internal_num_grpc_threads();
}
inline void MapBuilderServerOptions::_internal_set_num_grpc_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_grpc_threads_ = value;
}
inline void MapBuilderServerOptions::set_num_grpc_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_grpc_threads(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.num_grpc_threads)
}

// int32 num_event_threads = 3;
inline void MapBuilderServerOptions::clear_num_event_threads() {
  num_event_threads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderServerOptions::_internal_num_event_threads() const {
  return num_event_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderServerOptions::num_event_threads() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.num_event_threads)
  return _internal_num_event_threads();
}
inline void MapBuilderServerOptions::_internal_set_num_event_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_event_threads_ = value;
}
inline void MapBuilderServerOptions::set_num_event_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_event_threads(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.num_event_threads)
}

// .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
inline bool MapBuilderServerOptions::_internal_has_map_builder_options() const {
  return this != internal_default_instance() && map_builder_options_ != nullptr;
}
inline bool MapBuilderServerOptions::has_map_builder_options() const {
  return _internal_has_map_builder_options();
}
inline const ::cartographer::mapping::proto::MapBuilderOptions& MapBuilderServerOptions::_internal_map_builder_options() const {
  const ::cartographer::mapping::proto::MapBuilderOptions* p = map_builder_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::MapBuilderOptions*>(
      &::cartographer::mapping::proto::_MapBuilderOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::MapBuilderOptions& MapBuilderServerOptions::map_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.map_builder_options)
  return _internal_map_builder_options();
}
inline ::cartographer::mapping::proto::MapBuilderOptions* MapBuilderServerOptions::release_map_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.MapBuilderServerOptions.map_builder_options)
  
  ::cartographer::mapping::proto::MapBuilderOptions* temp = map_builder_options_;
  map_builder_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::MapBuilderOptions* MapBuilderServerOptions::_internal_mutable_map_builder_options() {
  
  if (map_builder_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::MapBuilderOptions>(GetArenaNoVirtual());
    map_builder_options_ = p;
  }
  return map_builder_options_;
}
inline ::cartographer::mapping::proto::MapBuilderOptions* MapBuilderServerOptions::mutable_map_builder_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.MapBuilderServerOptions.map_builder_options)
  return _internal_mutable_map_builder_options();
}
inline void MapBuilderServerOptions::set_allocated_map_builder_options(::cartographer::mapping::proto::MapBuilderOptions* map_builder_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_builder_options_);
  }
  if (map_builder_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_builder_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_builder_options, submessage_arena);
    }
    
  } else {
    
  }
  map_builder_options_ = map_builder_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.MapBuilderServerOptions.map_builder_options)
}

// string uplink_server_address = 5;
inline void MapBuilderServerOptions::clear_uplink_server_address() {
  uplink_server_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapBuilderServerOptions::uplink_server_address() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
  return _internal_uplink_server_address();
}
inline void MapBuilderServerOptions::set_uplink_server_address(const std::string& value) {
  _internal_set_uplink_server_address(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
}
inline std::string* MapBuilderServerOptions::mutable_uplink_server_address() {
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
  return _internal_mutable_uplink_server_address();
}
inline const std::string& MapBuilderServerOptions::_internal_uplink_server_address() const {
  return uplink_server_address_.GetNoArena();
}
inline void MapBuilderServerOptions::_internal_set_uplink_server_address(const std::string& value) {
  
  uplink_server_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapBuilderServerOptions::set_uplink_server_address(std::string&& value) {
  
  uplink_server_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
}
inline void MapBuilderServerOptions::set_uplink_server_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uplink_server_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
}
inline void MapBuilderServerOptions::set_uplink_server_address(const char* value, size_t size) {
  
  uplink_server_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
}
inline std::string* MapBuilderServerOptions::_internal_mutable_uplink_server_address() {
  
  return uplink_server_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapBuilderServerOptions::release_uplink_server_address() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
  
  return uplink_server_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapBuilderServerOptions::set_allocated_uplink_server_address(std::string* uplink_server_address) {
  if (uplink_server_address != nullptr) {
    
  } else {
    
  }
  uplink_server_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uplink_server_address);
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address)
}

// int32 upload_batch_size = 6;
inline void MapBuilderServerOptions::clear_upload_batch_size() {
  upload_batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderServerOptions::_internal_upload_batch_size() const {
  return upload_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderServerOptions::upload_batch_size() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.upload_batch_size)
  return _internal_upload_batch_size();
}
inline void MapBuilderServerOptions::_internal_set_upload_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upload_batch_size_ = value;
}
inline void MapBuilderServerOptions::set_upload_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upload_batch_size(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.upload_batch_size)
}

// bool enable_ssl_encryption = 7;
inline void MapBuilderServerOptions::clear_enable_ssl_encryption() {
  enable_ssl_encryption_ = false;
}
inline bool MapBuilderServerOptions::_internal_enable_ssl_encryption() const {
  return enable_ssl_encryption_;
}
inline bool MapBuilderServerOptions::enable_ssl_encryption() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.enable_ssl_encryption)
  return _internal_enable_ssl_encryption();
}
inline void MapBuilderServerOptions::_internal_set_enable_ssl_encryption(bool value) {
  
  enable_ssl_encryption_ = value;
}
inline void MapBuilderServerOptions::set_enable_ssl_encryption(bool value) {
  _internal_set_enable_ssl_encryption(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.enable_ssl_encryption)
}

// bool enable_google_auth = 9;
inline void MapBuilderServerOptions::clear_enable_google_auth() {
  enable_google_auth_ = false;
}
inline bool MapBuilderServerOptions::_internal_enable_google_auth() const {
  return enable_google_auth_;
}
inline bool MapBuilderServerOptions::enable_google_auth() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.enable_google_auth)
  return _internal_enable_google_auth();
}
inline void MapBuilderServerOptions::_internal_set_enable_google_auth(bool value) {
  
  enable_google_auth_ = value;
}
inline void MapBuilderServerOptions::set_enable_google_auth(bool value) {
  _internal_set_enable_google_auth(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.enable_google_auth)
}

// string root_file_directory = 10;
inline void MapBuilderServerOptions::clear_root_file_directory() {
  root_file_directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapBuilderServerOptions::root_file_directory() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
  return _internal_root_file_directory();
}
inline void MapBuilderServerOptions::set_root_file_directory(const std::string& value) {
  _internal_set_root_file_directory(value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
}
inline std::string* MapBuilderServerOptions::mutable_root_file_directory() {
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
  return _internal_mutable_root_file_directory();
}
inline const std::string& MapBuilderServerOptions::_internal_root_file_directory() const {
  return root_file_directory_.GetNoArena();
}
inline void MapBuilderServerOptions::_internal_set_root_file_directory(const std::string& value) {
  
  root_file_directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapBuilderServerOptions::set_root_file_directory(std::string&& value) {
  
  root_file_directory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
}
inline void MapBuilderServerOptions::set_root_file_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_file_directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
}
inline void MapBuilderServerOptions::set_root_file_directory(const char* value, size_t size) {
  
  root_file_directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
}
inline std::string* MapBuilderServerOptions::_internal_mutable_root_file_directory() {
  
  return root_file_directory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapBuilderServerOptions::release_root_file_directory() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
  
  return root_file_directory_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapBuilderServerOptions::set_allocated_root_file_directory(std::string* root_file_directory) {
  if (root_file_directory != nullptr) {
    
  } else {
    
  }
  root_file_directory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_file_directory);
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.MapBuilderServerOptions.root_file_directory)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cloud
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto
