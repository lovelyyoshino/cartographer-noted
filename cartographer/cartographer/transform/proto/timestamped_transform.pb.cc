// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/timestamped_transform.proto

#include "cartographer/transform/proto/timestamped_transform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace transform {
namespace proto {
class TimestampedTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimestampedTransform> _instance;
} _TimestampedTransform_default_instance_;
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
static void InitDefaultsscc_info_TimestampedTransform_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::transform::proto::_TimestampedTransform_default_instance_;
    new (ptr) ::cartographer::transform::proto::TimestampedTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::TimestampedTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimestampedTransform_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimestampedTransform_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::TimestampedTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::TimestampedTransform, time_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::TimestampedTransform, transform_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::transform::proto::TimestampedTransform)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::transform::proto::_TimestampedTransform_default_instance_),
};

const char descriptor_table_protodef_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8cartographer/transform/proto/timestamp"
  "ed_transform.proto\022\034cartographer.transfo"
  "rm.proto\032,cartographer/transform/proto/t"
  "ransform.proto\"^\n\024TimestampedTransform\022\014"
  "\n\004time\030\001 \001(\003\0228\n\ttransform\030\002 \001(\0132%.cartog"
  "rapher.transform.proto.Rigid3db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_sccs[1] = {
  &scc_info_TimestampedTransform_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_once;
static bool descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = {
  &descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_initialized, descriptor_table_protodef_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto, "cartographer/transform/proto/timestamped_transform.proto", 238,
  &descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_once, descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_sccs, descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto::offsets,
  file_level_metadata_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto, 1, file_level_enum_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto, file_level_service_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto), true);
namespace cartographer {
namespace transform {
namespace proto {

// ===================================================================

void TimestampedTransform::InitAsDefaultInstance() {
  ::cartographer::transform::proto::_TimestampedTransform_default_instance_._instance.get_mutable()->transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class TimestampedTransform::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& transform(const TimestampedTransform* msg);
};

const ::cartographer::transform::proto::Rigid3d&
TimestampedTransform::_Internal::transform(const TimestampedTransform* msg) {
  return *msg->transform_;
}
void TimestampedTransform::clear_transform() {
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
TimestampedTransform::TimestampedTransform()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.TimestampedTransform)
}
TimestampedTransform::TimestampedTransform(const TimestampedTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::cartographer::transform::proto::Rigid3d(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.TimestampedTransform)
}

void TimestampedTransform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimestampedTransform_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto.base);
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(time_));
}

TimestampedTransform::~TimestampedTransform() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.TimestampedTransform)
  SharedDtor();
}

void TimestampedTransform::SharedDtor() {
  if (this != internal_default_instance()) delete transform_;
}

void TimestampedTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimestampedTransform& TimestampedTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimestampedTransform_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto.base);
  return *internal_default_instance();
}


void TimestampedTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.TimestampedTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TimestampedTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimestampedTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.TimestampedTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.TimestampedTransform)
  return target;
}

size_t TimestampedTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.TimestampedTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimestampedTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.TimestampedTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampedTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimestampedTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.TimestampedTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.TimestampedTransform)
    MergeFrom(*source);
  }
}

void TimestampedTransform::MergeFrom(const TimestampedTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.TimestampedTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_transform());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void TimestampedTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.TimestampedTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampedTransform::CopyFrom(const TimestampedTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.TimestampedTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampedTransform::IsInitialized() const {
  return true;
}

void TimestampedTransform::InternalSwap(TimestampedTransform* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transform_, other->transform_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampedTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::TimestampedTransform* Arena::CreateMaybeMessage< ::cartographer::transform::proto::TimestampedTransform >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::transform::proto::TimestampedTransform >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
