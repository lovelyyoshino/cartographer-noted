// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/adaptive_voxel_filter_options.proto

#include "cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cartographer {
namespace sensor {
namespace proto {
class AdaptiveVoxelFilterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdaptiveVoxelFilterOptions> _instance;
} _AdaptiveVoxelFilterOptions_default_instance_;
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
static void InitDefaultsscc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_;
    new (ptr) ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions, max_length_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions, min_num_points_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions, max_range_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=cartographer/sensor/proto/adaptive_vox"
  "el_filter_options.proto\022\031cartographer.se"
  "nsor.proto\"[\n\032AdaptiveVoxelFilterOptions"
  "\022\022\n\nmax_length\030\001 \001(\002\022\026\n\016min_num_points\030\002"
  " \001(\002\022\021\n\tmax_range\030\003 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_sccs[1] = {
  &scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_once;
static bool descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto = {
  &descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_initialized, descriptor_table_protodef_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto, "cartographer/sensor/proto/adaptive_voxel_filter_options.proto", 191,
  &descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_once, descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_sccs, descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto, file_level_service_descriptors_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto), true);
namespace cartographer {
namespace sensor {
namespace proto {

// ===================================================================

void AdaptiveVoxelFilterOptions::InitAsDefaultInstance() {
}
class AdaptiveVoxelFilterOptions::_Internal {
 public:
};

AdaptiveVoxelFilterOptions::AdaptiveVoxelFilterOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
}
AdaptiveVoxelFilterOptions::AdaptiveVoxelFilterOptions(const AdaptiveVoxelFilterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_length_, &from.max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_range_) -
    reinterpret_cast<char*>(&max_length_)) + sizeof(max_range_));
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
}

void AdaptiveVoxelFilterOptions::SharedCtor() {
  ::memset(&max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_range_) -
      reinterpret_cast<char*>(&max_length_)) + sizeof(max_range_));
}

AdaptiveVoxelFilterOptions::~AdaptiveVoxelFilterOptions() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  SharedDtor();
}

void AdaptiveVoxelFilterOptions::SharedDtor() {
}

void AdaptiveVoxelFilterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdaptiveVoxelFilterOptions& AdaptiveVoxelFilterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto.base);
  return *internal_default_instance();
}


void AdaptiveVoxelFilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_range_) -
      reinterpret_cast<char*>(&max_length_)) + sizeof(max_range_));
  _internal_metadata_.Clear();
}

const char* AdaptiveVoxelFilterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_num_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          min_num_points_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdaptiveVoxelFilterOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_length(), target);
  }

  // float min_num_points = 2;
  if (!(this->min_num_points() <= 0 && this->min_num_points() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_num_points(), target);
  }

  // float max_range = 3;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  return target;
}

size_t AdaptiveVoxelFilterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_num_points = 2;
  if (!(this->min_num_points() <= 0 && this->min_num_points() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_range = 3;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdaptiveVoxelFilterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AdaptiveVoxelFilterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdaptiveVoxelFilterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
    MergeFrom(*source);
  }
}

void AdaptiveVoxelFilterOptions::MergeFrom(const AdaptiveVoxelFilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_length() <= 0 && from.max_length() >= 0)) {
    _internal_set_max_length(from._internal_max_length());
  }
  if (!(from.min_num_points() <= 0 && from.min_num_points() >= 0)) {
    _internal_set_min_num_points(from._internal_min_num_points());
  }
  if (!(from.max_range() <= 0 && from.max_range() >= 0)) {
    _internal_set_max_range(from._internal_max_range());
  }
}

void AdaptiveVoxelFilterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveVoxelFilterOptions::CopyFrom(const AdaptiveVoxelFilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveVoxelFilterOptions::IsInitialized() const {
  return true;
}

void AdaptiveVoxelFilterOptions::InternalSwap(AdaptiveVoxelFilterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_length_, other->max_length_);
  swap(min_num_points_, other->min_num_points_);
  swap(max_range_, other->max_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveVoxelFilterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
