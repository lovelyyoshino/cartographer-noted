// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fsensor_2fproto_2fsensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fsensor_2fproto_2fsensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto;
namespace cartographer {
namespace sensor {
namespace proto {
class CompressedPointCloud;
class CompressedPointCloudDefaultTypeInternal;
extern CompressedPointCloudDefaultTypeInternal _CompressedPointCloud_default_instance_;
class FixedFramePoseData;
class FixedFramePoseDataDefaultTypeInternal;
extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
class ImuData;
class ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class LandmarkData;
class LandmarkDataDefaultTypeInternal;
extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
class LandmarkData_LandmarkObservation;
class LandmarkData_LandmarkObservationDefaultTypeInternal;
extern LandmarkData_LandmarkObservationDefaultTypeInternal _LandmarkData_LandmarkObservation_default_instance_;
class OdometryData;
class OdometryDataDefaultTypeInternal;
extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
class RangeData;
class RangeDataDefaultTypeInternal;
extern RangeDataDefaultTypeInternal _RangeData_default_instance_;
class RangefinderPoint;
class RangefinderPointDefaultTypeInternal;
extern RangefinderPointDefaultTypeInternal _RangefinderPoint_default_instance_;
class TimedPointCloudData;
class TimedPointCloudDataDefaultTypeInternal;
extern TimedPointCloudDataDefaultTypeInternal _TimedPointCloudData_default_instance_;
class TimedRangefinderPoint;
class TimedRangefinderPointDefaultTypeInternal;
extern TimedRangefinderPointDefaultTypeInternal _TimedRangefinderPoint_default_instance_;
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::sensor::proto::CompressedPointCloud* Arena::CreateMaybeMessage<::cartographer::sensor::proto::CompressedPointCloud>(Arena*);
template<> ::cartographer::sensor::proto::FixedFramePoseData* Arena::CreateMaybeMessage<::cartographer::sensor::proto::FixedFramePoseData>(Arena*);
template<> ::cartographer::sensor::proto::ImuData* Arena::CreateMaybeMessage<::cartographer::sensor::proto::ImuData>(Arena*);
template<> ::cartographer::sensor::proto::LandmarkData* Arena::CreateMaybeMessage<::cartographer::sensor::proto::LandmarkData>(Arena*);
template<> ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* Arena::CreateMaybeMessage<::cartographer::sensor::proto::LandmarkData_LandmarkObservation>(Arena*);
template<> ::cartographer::sensor::proto::OdometryData* Arena::CreateMaybeMessage<::cartographer::sensor::proto::OdometryData>(Arena*);
template<> ::cartographer::sensor::proto::RangeData* Arena::CreateMaybeMessage<::cartographer::sensor::proto::RangeData>(Arena*);
template<> ::cartographer::sensor::proto::RangefinderPoint* Arena::CreateMaybeMessage<::cartographer::sensor::proto::RangefinderPoint>(Arena*);
template<> ::cartographer::sensor::proto::TimedPointCloudData* Arena::CreateMaybeMessage<::cartographer::sensor::proto::TimedPointCloudData>(Arena*);
template<> ::cartographer::sensor::proto::TimedRangefinderPoint* Arena::CreateMaybeMessage<::cartographer::sensor::proto::TimedRangefinderPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace sensor {
namespace proto {

// ===================================================================

class RangefinderPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.RangefinderPoint) */ {
 public:
  RangefinderPoint();
  virtual ~RangefinderPoint();

  RangefinderPoint(const RangefinderPoint& from);
  RangefinderPoint(RangefinderPoint&& from) noexcept
    : RangefinderPoint() {
    *this = ::std::move(from);
  }

  inline RangefinderPoint& operator=(const RangefinderPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangefinderPoint& operator=(RangefinderPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangefinderPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangefinderPoint* internal_default_instance() {
    return reinterpret_cast<const RangefinderPoint*>(
               &_RangefinderPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RangefinderPoint& a, RangefinderPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RangefinderPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangefinderPoint* New() const final {
    return CreateMaybeMessage<RangefinderPoint>(nullptr);
  }

  RangefinderPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangefinderPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangefinderPoint& from);
  void MergeFrom(const RangefinderPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangefinderPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.RangefinderPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .cartographer.transform.proto.Vector3f position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::cartographer::transform::proto::Vector3f& position() const;
  ::cartographer::transform::proto::Vector3f* release_position();
  ::cartographer::transform::proto::Vector3f* mutable_position();
  void set_allocated_position(::cartographer::transform::proto::Vector3f* position);
  private:
  const ::cartographer::transform::proto::Vector3f& _internal_position() const;
  ::cartographer::transform::proto::Vector3f* _internal_mutable_position();
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.RangefinderPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Vector3f* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class TimedRangefinderPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.TimedRangefinderPoint) */ {
 public:
  TimedRangefinderPoint();
  virtual ~TimedRangefinderPoint();

  TimedRangefinderPoint(const TimedRangefinderPoint& from);
  TimedRangefinderPoint(TimedRangefinderPoint&& from) noexcept
    : TimedRangefinderPoint() {
    *this = ::std::move(from);
  }

  inline TimedRangefinderPoint& operator=(const TimedRangefinderPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimedRangefinderPoint& operator=(TimedRangefinderPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimedRangefinderPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimedRangefinderPoint* internal_default_instance() {
    return reinterpret_cast<const TimedRangefinderPoint*>(
               &_TimedRangefinderPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimedRangefinderPoint& a, TimedRangefinderPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TimedRangefinderPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimedRangefinderPoint* New() const final {
    return CreateMaybeMessage<TimedRangefinderPoint>(nullptr);
  }

  TimedRangefinderPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimedRangefinderPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimedRangefinderPoint& from);
  void MergeFrom(const TimedRangefinderPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimedRangefinderPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.TimedRangefinderPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // .cartographer.transform.proto.Vector3f position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::cartographer::transform::proto::Vector3f& position() const;
  ::cartographer::transform::proto::Vector3f* release_position();
  ::cartographer::transform::proto::Vector3f* mutable_position();
  void set_allocated_position(::cartographer::transform::proto::Vector3f* position);
  private:
  const ::cartographer::transform::proto::Vector3f& _internal_position() const;
  ::cartographer::transform::proto::Vector3f* _internal_mutable_position();
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.TimedRangefinderPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Vector3f* position_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class CompressedPointCloud :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.CompressedPointCloud) */ {
 public:
  CompressedPointCloud();
  virtual ~CompressedPointCloud();

  CompressedPointCloud(const CompressedPointCloud& from);
  CompressedPointCloud(CompressedPointCloud&& from) noexcept
    : CompressedPointCloud() {
    *this = ::std::move(from);
  }

  inline CompressedPointCloud& operator=(const CompressedPointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressedPointCloud& operator=(CompressedPointCloud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompressedPointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressedPointCloud* internal_default_instance() {
    return reinterpret_cast<const CompressedPointCloud*>(
               &_CompressedPointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompressedPointCloud& a, CompressedPointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressedPointCloud* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompressedPointCloud* New() const final {
    return CreateMaybeMessage<CompressedPointCloud>(nullptr);
  }

  CompressedPointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompressedPointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompressedPointCloud& from);
  void MergeFrom(const CompressedPointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressedPointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.CompressedPointCloud";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointDataFieldNumber = 3,
    kNumPointsFieldNumber = 1,
  };
  // repeated int32 point_data = 3;
  int point_data_size() const;
  private:
  int _internal_point_data_size() const;
  public:
  void clear_point_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_point_data() const;
  void _internal_add_point_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_point_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 point_data(int index) const;
  void set_point_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_point_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      point_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_point_data();

  // int32 num_points = 1;
  void clear_num_points();
  ::PROTOBUF_NAMESPACE_ID::int32 num_points() const;
  void set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_points() const;
  void _internal_set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.CompressedPointCloud)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > point_data_;
  mutable std::atomic<int> _point_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class TimedPointCloudData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.TimedPointCloudData) */ {
 public:
  TimedPointCloudData();
  virtual ~TimedPointCloudData();

  TimedPointCloudData(const TimedPointCloudData& from);
  TimedPointCloudData(TimedPointCloudData&& from) noexcept
    : TimedPointCloudData() {
    *this = ::std::move(from);
  }

  inline TimedPointCloudData& operator=(const TimedPointCloudData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimedPointCloudData& operator=(TimedPointCloudData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimedPointCloudData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimedPointCloudData* internal_default_instance() {
    return reinterpret_cast<const TimedPointCloudData*>(
               &_TimedPointCloudData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimedPointCloudData& a, TimedPointCloudData& b) {
    a.Swap(&b);
  }
  inline void Swap(TimedPointCloudData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimedPointCloudData* New() const final {
    return CreateMaybeMessage<TimedPointCloudData>(nullptr);
  }

  TimedPointCloudData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimedPointCloudData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimedPointCloudData& from);
  void MergeFrom(const TimedPointCloudData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimedPointCloudData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.TimedPointCloudData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointDataLegacyFieldNumber = 3,
    kPointDataFieldNumber = 4,
    kIntensitiesFieldNumber = 5,
    kOriginFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  int point_data_legacy_size() const;
  private:
  int _internal_point_data_legacy_size() const;
  public:
  void clear_point_data_legacy();
  ::cartographer::transform::proto::Vector4f* mutable_point_data_legacy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector4f >*
      mutable_point_data_legacy();
  private:
  const ::cartographer::transform::proto::Vector4f& _internal_point_data_legacy(int index) const;
  ::cartographer::transform::proto::Vector4f* _internal_add_point_data_legacy();
  public:
  const ::cartographer::transform::proto::Vector4f& point_data_legacy(int index) const;
  ::cartographer::transform::proto::Vector4f* add_point_data_legacy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector4f >&
      point_data_legacy() const;

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  int point_data_size() const;
  private:
  int _internal_point_data_size() const;
  public:
  void clear_point_data();
  ::cartographer::sensor::proto::TimedRangefinderPoint* mutable_point_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::TimedRangefinderPoint >*
      mutable_point_data();
  private:
  const ::cartographer::sensor::proto::TimedRangefinderPoint& _internal_point_data(int index) const;
  ::cartographer::sensor::proto::TimedRangefinderPoint* _internal_add_point_data();
  public:
  const ::cartographer::sensor::proto::TimedRangefinderPoint& point_data(int index) const;
  ::cartographer::sensor::proto::TimedRangefinderPoint* add_point_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::TimedRangefinderPoint >&
      point_data() const;

  // repeated float intensities = 5;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  float _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_intensities() const;
  void _internal_add_intensities(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_intensities();
  public:
  float intensities(int index) const;
  void set_intensities(int index, float value);
  void add_intensities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_intensities();

  // .cartographer.transform.proto.Vector3f origin = 2;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::cartographer::transform::proto::Vector3f& origin() const;
  ::cartographer::transform::proto::Vector3f* release_origin();
  ::cartographer::transform::proto::Vector3f* mutable_origin();
  void set_allocated_origin(::cartographer::transform::proto::Vector3f* origin);
  private:
  const ::cartographer::transform::proto::Vector3f& _internal_origin() const;
  ::cartographer::transform::proto::Vector3f* _internal_mutable_origin();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.TimedPointCloudData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector4f > point_data_legacy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::TimedRangefinderPoint > point_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > intensities_;
  mutable std::atomic<int> _intensities_cached_byte_size_;
  ::cartographer::transform::proto::Vector3f* origin_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class RangeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.RangeData) */ {
 public:
  RangeData();
  virtual ~RangeData();

  RangeData(const RangeData& from);
  RangeData(RangeData&& from) noexcept
    : RangeData() {
    *this = ::std::move(from);
  }

  inline RangeData& operator=(const RangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeData& operator=(RangeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeData* internal_default_instance() {
    return reinterpret_cast<const RangeData*>(
               &_RangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RangeData& a, RangeData& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeData* New() const final {
    return CreateMaybeMessage<RangeData>(nullptr);
  }

  RangeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeData& from);
  void MergeFrom(const RangeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.RangeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnsLegacyFieldNumber = 2,
    kMissesLegacyFieldNumber = 3,
    kReturnsFieldNumber = 4,
    kMissesFieldNumber = 5,
    kOriginFieldNumber = 1,
  };
  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  int returns_legacy_size() const;
  private:
  int _internal_returns_legacy_size() const;
  public:
  void clear_returns_legacy();
  ::cartographer::transform::proto::Vector3f* mutable_returns_legacy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >*
      mutable_returns_legacy();
  private:
  const ::cartographer::transform::proto::Vector3f& _internal_returns_legacy(int index) const;
  ::cartographer::transform::proto::Vector3f* _internal_add_returns_legacy();
  public:
  const ::cartographer::transform::proto::Vector3f& returns_legacy(int index) const;
  ::cartographer::transform::proto::Vector3f* add_returns_legacy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >&
      returns_legacy() const;

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  int misses_legacy_size() const;
  private:
  int _internal_misses_legacy_size() const;
  public:
  void clear_misses_legacy();
  ::cartographer::transform::proto::Vector3f* mutable_misses_legacy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >*
      mutable_misses_legacy();
  private:
  const ::cartographer::transform::proto::Vector3f& _internal_misses_legacy(int index) const;
  ::cartographer::transform::proto::Vector3f* _internal_add_misses_legacy();
  public:
  const ::cartographer::transform::proto::Vector3f& misses_legacy(int index) const;
  ::cartographer::transform::proto::Vector3f* add_misses_legacy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >&
      misses_legacy() const;

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  int returns_size() const;
  private:
  int _internal_returns_size() const;
  public:
  void clear_returns();
  ::cartographer::sensor::proto::RangefinderPoint* mutable_returns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >*
      mutable_returns();
  private:
  const ::cartographer::sensor::proto::RangefinderPoint& _internal_returns(int index) const;
  ::cartographer::sensor::proto::RangefinderPoint* _internal_add_returns();
  public:
  const ::cartographer::sensor::proto::RangefinderPoint& returns(int index) const;
  ::cartographer::sensor::proto::RangefinderPoint* add_returns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >&
      returns() const;

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  int misses_size() const;
  private:
  int _internal_misses_size() const;
  public:
  void clear_misses();
  ::cartographer::sensor::proto::RangefinderPoint* mutable_misses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >*
      mutable_misses();
  private:
  const ::cartographer::sensor::proto::RangefinderPoint& _internal_misses(int index) const;
  ::cartographer::sensor::proto::RangefinderPoint* _internal_add_misses();
  public:
  const ::cartographer::sensor::proto::RangefinderPoint& misses(int index) const;
  ::cartographer::sensor::proto::RangefinderPoint* add_misses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >&
      misses() const;

  // .cartographer.transform.proto.Vector3f origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::cartographer::transform::proto::Vector3f& origin() const;
  ::cartographer::transform::proto::Vector3f* release_origin();
  ::cartographer::transform::proto::Vector3f* mutable_origin();
  void set_allocated_origin(::cartographer::transform::proto::Vector3f* origin);
  private:
  const ::cartographer::transform::proto::Vector3f& _internal_origin() const;
  ::cartographer::transform::proto::Vector3f* _internal_mutable_origin();
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.RangeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f > returns_legacy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f > misses_legacy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint > returns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint > misses_;
  ::cartographer::transform::proto::Vector3f* origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class ImuData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.ImuData) */ {
 public:
  ImuData();
  virtual ~ImuData();

  ImuData(const ImuData& from);
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData& operator=(ImuData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImuData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImuData* New() const final {
    return CreateMaybeMessage<ImuData>(nullptr);
  }

  ImuData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImuData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImuData& from);
  void MergeFrom(const ImuData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.ImuData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::cartographer::transform::proto::Vector3d& linear_acceleration() const;
  ::cartographer::transform::proto::Vector3d* release_linear_acceleration();
  ::cartographer::transform::proto::Vector3d* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration);
  private:
  const ::cartographer::transform::proto::Vector3d& _internal_linear_acceleration() const;
  ::cartographer::transform::proto::Vector3d* _internal_mutable_linear_acceleration();
  public:

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::cartographer::transform::proto::Vector3d& angular_velocity() const;
  ::cartographer::transform::proto::Vector3d* release_angular_velocity();
  ::cartographer::transform::proto::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity);
  private:
  const ::cartographer::transform::proto::Vector3d& _internal_angular_velocity() const;
  ::cartographer::transform::proto::Vector3d* _internal_mutable_angular_velocity();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.ImuData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Vector3d* linear_acceleration_;
  ::cartographer::transform::proto::Vector3d* angular_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class OdometryData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.OdometryData) */ {
 public:
  OdometryData();
  virtual ~OdometryData();

  OdometryData(const OdometryData& from);
  OdometryData(OdometryData&& from) noexcept
    : OdometryData() {
    *this = ::std::move(from);
  }

  inline OdometryData& operator=(const OdometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdometryData& operator=(OdometryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdometryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdometryData* internal_default_instance() {
    return reinterpret_cast<const OdometryData*>(
               &_OdometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OdometryData& a, OdometryData& b) {
    a.Swap(&b);
  }
  inline void Swap(OdometryData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdometryData* New() const final {
    return CreateMaybeMessage<OdometryData>(nullptr);
  }

  OdometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdometryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdometryData& from);
  void MergeFrom(const OdometryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.OdometryData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .cartographer.transform.proto.Rigid3d pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* release_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_pose();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.OdometryData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class FixedFramePoseData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.FixedFramePoseData) */ {
 public:
  FixedFramePoseData();
  virtual ~FixedFramePoseData();

  FixedFramePoseData(const FixedFramePoseData& from);
  FixedFramePoseData(FixedFramePoseData&& from) noexcept
    : FixedFramePoseData() {
    *this = ::std::move(from);
  }

  inline FixedFramePoseData& operator=(const FixedFramePoseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedFramePoseData& operator=(FixedFramePoseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedFramePoseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixedFramePoseData* internal_default_instance() {
    return reinterpret_cast<const FixedFramePoseData*>(
               &_FixedFramePoseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FixedFramePoseData& a, FixedFramePoseData& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedFramePoseData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedFramePoseData* New() const final {
    return CreateMaybeMessage<FixedFramePoseData>(nullptr);
  }

  FixedFramePoseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedFramePoseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedFramePoseData& from);
  void MergeFrom(const FixedFramePoseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedFramePoseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.FixedFramePoseData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .cartographer.transform.proto.Rigid3d pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* release_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_pose();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.FixedFramePoseData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class LandmarkData_LandmarkObservation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.LandmarkData.LandmarkObservation) */ {
 public:
  LandmarkData_LandmarkObservation();
  virtual ~LandmarkData_LandmarkObservation();

  LandmarkData_LandmarkObservation(const LandmarkData_LandmarkObservation& from);
  LandmarkData_LandmarkObservation(LandmarkData_LandmarkObservation&& from) noexcept
    : LandmarkData_LandmarkObservation() {
    *this = ::std::move(from);
  }

  inline LandmarkData_LandmarkObservation& operator=(const LandmarkData_LandmarkObservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkData_LandmarkObservation& operator=(LandmarkData_LandmarkObservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkData_LandmarkObservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkData_LandmarkObservation* internal_default_instance() {
    return reinterpret_cast<const LandmarkData_LandmarkObservation*>(
               &_LandmarkData_LandmarkObservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LandmarkData_LandmarkObservation& a, LandmarkData_LandmarkObservation& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkData_LandmarkObservation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkData_LandmarkObservation* New() const final {
    return CreateMaybeMessage<LandmarkData_LandmarkObservation>(nullptr);
  }

  LandmarkData_LandmarkObservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkData_LandmarkObservation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkData_LandmarkObservation& from);
  void MergeFrom(const LandmarkData_LandmarkObservation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkData_LandmarkObservation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.LandmarkData.LandmarkObservation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 5,
    kLandmarkToTrackingTransformFieldNumber = 2,
    kLandmarkToMapTransformFieldNumber = 6,
    kTranslationWeightFieldNumber = 3,
    kRotationWeightFieldNumber = 4,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes type = 5;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  bool has_landmark_to_tracking_transform() const;
  private:
  bool _internal_has_landmark_to_tracking_transform() const;
  public:
  void clear_landmark_to_tracking_transform();
  const ::cartographer::transform::proto::Rigid3d& landmark_to_tracking_transform() const;
  ::cartographer::transform::proto::Rigid3d* release_landmark_to_tracking_transform();
  ::cartographer::transform::proto::Rigid3d* mutable_landmark_to_tracking_transform();
  void set_allocated_landmark_to_tracking_transform(::cartographer::transform::proto::Rigid3d* landmark_to_tracking_transform);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_landmark_to_tracking_transform() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_landmark_to_tracking_transform();
  public:

  // .cartographer.transform.proto.Rigid3d landmark_to_map_transform = 6;
  bool has_landmark_to_map_transform() const;
  private:
  bool _internal_has_landmark_to_map_transform() const;
  public:
  void clear_landmark_to_map_transform();
  const ::cartographer::transform::proto::Rigid3d& landmark_to_map_transform() const;
  ::cartographer::transform::proto::Rigid3d* release_landmark_to_map_transform();
  ::cartographer::transform::proto::Rigid3d* mutable_landmark_to_map_transform();
  void set_allocated_landmark_to_map_transform(::cartographer::transform::proto::Rigid3d* landmark_to_map_transform);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_landmark_to_map_transform() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_landmark_to_map_transform();
  public:

  // double translation_weight = 3;
  void clear_translation_weight();
  double translation_weight() const;
  void set_translation_weight(double value);
  private:
  double _internal_translation_weight() const;
  void _internal_set_translation_weight(double value);
  public:

  // double rotation_weight = 4;
  void clear_rotation_weight();
  double rotation_weight() const;
  void set_rotation_weight(double value);
  private:
  double _internal_rotation_weight() const;
  void _internal_set_rotation_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::cartographer::transform::proto::Rigid3d* landmark_to_tracking_transform_;
  ::cartographer::transform::proto::Rigid3d* landmark_to_map_transform_;
  double translation_weight_;
  double rotation_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class LandmarkData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.LandmarkData) */ {
 public:
  LandmarkData();
  virtual ~LandmarkData();

  LandmarkData(const LandmarkData& from);
  LandmarkData(LandmarkData&& from) noexcept
    : LandmarkData() {
    *this = ::std::move(from);
  }

  inline LandmarkData& operator=(const LandmarkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkData& operator=(LandmarkData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkData* internal_default_instance() {
    return reinterpret_cast<const LandmarkData*>(
               &_LandmarkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LandmarkData& a, LandmarkData& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkData* New() const final {
    return CreateMaybeMessage<LandmarkData>(nullptr);
  }

  LandmarkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkData& from);
  void MergeFrom(const LandmarkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.sensor.proto.LandmarkData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
    return ::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LandmarkData_LandmarkObservation LandmarkObservation;

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkObservationsFieldNumber = 2,
    kGlobalLandmarkPoseFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  int landmark_observations_size() const;
  private:
  int _internal_landmark_observations_size() const;
  public:
  void clear_landmark_observations();
  ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* mutable_landmark_observations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >*
      mutable_landmark_observations();
  private:
  const ::cartographer::sensor::proto::LandmarkData_LandmarkObservation& _internal_landmark_observations(int index) const;
  ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* _internal_add_landmark_observations();
  public:
  const ::cartographer::sensor::proto::LandmarkData_LandmarkObservation& landmark_observations(int index) const;
  ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* add_landmark_observations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >&
      landmark_observations() const;

  // .cartographer.transform.proto.Rigid3d global_landmark_pose = 3;
  bool has_global_landmark_pose() const;
  private:
  bool _internal_has_global_landmark_pose() const;
  public:
  void clear_global_landmark_pose();
  const ::cartographer::transform::proto::Rigid3d& global_landmark_pose() const;
  ::cartographer::transform::proto::Rigid3d* release_global_landmark_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_global_landmark_pose();
  void set_allocated_global_landmark_pose(::cartographer::transform::proto::Rigid3d* global_landmark_pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_global_landmark_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_global_landmark_pose();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.LandmarkData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation > landmark_observations_;
  ::cartographer::transform::proto::Rigid3d* global_landmark_pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RangefinderPoint

// .cartographer.transform.proto.Vector3f position = 1;
inline bool RangefinderPoint::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool RangefinderPoint::has_position() const {
  return _internal_has_position();
}
inline const ::cartographer::transform::proto::Vector3f& RangefinderPoint::_internal_position() const {
  const ::cartographer::transform::proto::Vector3f* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3f*>(
      &::cartographer::transform::proto::_Vector3f_default_instance_);
}
inline const ::cartographer::transform::proto::Vector3f& RangefinderPoint::position() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangefinderPoint.position)
  return _internal_position();
}
inline ::cartographer::transform::proto::Vector3f* RangefinderPoint::release_position() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.RangefinderPoint.position)
  
  ::cartographer::transform::proto::Vector3f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector3f* RangefinderPoint::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector3f>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::cartographer::transform::proto::Vector3f* RangefinderPoint::mutable_position() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangefinderPoint.position)
  return _internal_mutable_position();
}
inline void RangefinderPoint::set_allocated_position(::cartographer::transform::proto::Vector3f* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.RangefinderPoint.position)
}

// -------------------------------------------------------------------

// TimedRangefinderPoint

// .cartographer.transform.proto.Vector3f position = 1;
inline bool TimedRangefinderPoint::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool TimedRangefinderPoint::has_position() const {
  return _internal_has_position();
}
inline const ::cartographer::transform::proto::Vector3f& TimedRangefinderPoint::_internal_position() const {
  const ::cartographer::transform::proto::Vector3f* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3f*>(
      &::cartographer::transform::proto::_Vector3f_default_instance_);
}
inline const ::cartographer::transform::proto::Vector3f& TimedRangefinderPoint::position() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedRangefinderPoint.position)
  return _internal_position();
}
inline ::cartographer::transform::proto::Vector3f* TimedRangefinderPoint::release_position() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.TimedRangefinderPoint.position)
  
  ::cartographer::transform::proto::Vector3f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector3f* TimedRangefinderPoint::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector3f>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::cartographer::transform::proto::Vector3f* TimedRangefinderPoint::mutable_position() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedRangefinderPoint.position)
  return _internal_mutable_position();
}
inline void TimedRangefinderPoint::set_allocated_position(::cartographer::transform::proto::Vector3f* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.TimedRangefinderPoint.position)
}

// float time = 2;
inline void TimedRangefinderPoint::clear_time() {
  time_ = 0;
}
inline float TimedRangefinderPoint::_internal_time() const {
  return time_;
}
inline float TimedRangefinderPoint::time() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedRangefinderPoint.time)
  return _internal_time();
}
inline void TimedRangefinderPoint::_internal_set_time(float value) {
  
  time_ = value;
}
inline void TimedRangefinderPoint::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedRangefinderPoint.time)
}

// -------------------------------------------------------------------

// CompressedPointCloud

// int32 num_points = 1;
inline void CompressedPointCloud::clear_num_points() {
  num_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressedPointCloud::_internal_num_points() const {
  return num_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressedPointCloud::num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.num_points)
  return _internal_num_points();
}
inline void CompressedPointCloud::_internal_set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_points_ = value;
}
inline void CompressedPointCloud::set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_points(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.num_points)
}

// repeated int32 point_data = 3;
inline int CompressedPointCloud::_internal_point_data_size() const {
  return point_data_.size();
}
inline int CompressedPointCloud::point_data_size() const {
  return _internal_point_data_size();
}
inline void CompressedPointCloud::clear_point_data() {
  point_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressedPointCloud::_internal_point_data(int index) const {
  return point_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressedPointCloud::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return _internal_point_data(index);
}
inline void CompressedPointCloud::set_point_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  point_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
inline void CompressedPointCloud::_internal_add_point_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  point_data_.Add(value);
}
inline void CompressedPointCloud::add_point_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_point_data(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CompressedPointCloud::_internal_point_data() const {
  return point_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CompressedPointCloud::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return _internal_point_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CompressedPointCloud::_internal_mutable_point_data() {
  return &point_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CompressedPointCloud::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return _internal_mutable_point_data();
}

// -------------------------------------------------------------------

// TimedPointCloudData

// int64 timestamp = 1;
inline void TimedPointCloudData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimedPointCloudData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimedPointCloudData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.timestamp)
  return _internal_timestamp();
}
inline void TimedPointCloudData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void TimedPointCloudData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedPointCloudData.timestamp)
}

// .cartographer.transform.proto.Vector3f origin = 2;
inline bool TimedPointCloudData::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool TimedPointCloudData::has_origin() const {
  return _internal_has_origin();
}
inline const ::cartographer::transform::proto::Vector3f& TimedPointCloudData::_internal_origin() const {
  const ::cartographer::transform::proto::Vector3f* p = origin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3f*>(
      &::cartographer::transform::proto::_Vector3f_default_instance_);
}
inline const ::cartographer::transform::proto::Vector3f& TimedPointCloudData::origin() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.origin)
  return _internal_origin();
}
inline ::cartographer::transform::proto::Vector3f* TimedPointCloudData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.TimedPointCloudData.origin)
  
  ::cartographer::transform::proto::Vector3f* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector3f* TimedPointCloudData::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector3f>(GetArenaNoVirtual());
    origin_ = p;
  }
  return origin_;
}
inline ::cartographer::transform::proto::Vector3f* TimedPointCloudData::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.origin)
  return _internal_mutable_origin();
}
inline void TimedPointCloudData::set_allocated_origin(::cartographer::transform::proto::Vector3f* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.TimedPointCloudData.origin)
}

// repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
inline int TimedPointCloudData::_internal_point_data_legacy_size() const {
  return point_data_legacy_.size();
}
inline int TimedPointCloudData::point_data_legacy_size() const {
  return _internal_point_data_legacy_size();
}
inline ::cartographer::transform::proto::Vector4f* TimedPointCloudData::mutable_point_data_legacy(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return point_data_legacy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector4f >*
TimedPointCloudData::mutable_point_data_legacy() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return &point_data_legacy_;
}
inline const ::cartographer::transform::proto::Vector4f& TimedPointCloudData::_internal_point_data_legacy(int index) const {
  return point_data_legacy_.Get(index);
}
inline const ::cartographer::transform::proto::Vector4f& TimedPointCloudData::point_data_legacy(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return _internal_point_data_legacy(index);
}
inline ::cartographer::transform::proto::Vector4f* TimedPointCloudData::_internal_add_point_data_legacy() {
  return point_data_legacy_.Add();
}
inline ::cartographer::transform::proto::Vector4f* TimedPointCloudData::add_point_data_legacy() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return _internal_add_point_data_legacy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector4f >&
TimedPointCloudData::point_data_legacy() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return point_data_legacy_;
}

// repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
inline int TimedPointCloudData::_internal_point_data_size() const {
  return point_data_.size();
}
inline int TimedPointCloudData::point_data_size() const {
  return _internal_point_data_size();
}
inline void TimedPointCloudData::clear_point_data() {
  point_data_.Clear();
}
inline ::cartographer::sensor::proto::TimedRangefinderPoint* TimedPointCloudData::mutable_point_data(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::TimedRangefinderPoint >*
TimedPointCloudData::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return &point_data_;
}
inline const ::cartographer::sensor::proto::TimedRangefinderPoint& TimedPointCloudData::_internal_point_data(int index) const {
  return point_data_.Get(index);
}
inline const ::cartographer::sensor::proto::TimedRangefinderPoint& TimedPointCloudData::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return _internal_point_data(index);
}
inline ::cartographer::sensor::proto::TimedRangefinderPoint* TimedPointCloudData::_internal_add_point_data() {
  return point_data_.Add();
}
inline ::cartographer::sensor::proto::TimedRangefinderPoint* TimedPointCloudData::add_point_data() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return _internal_add_point_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::TimedRangefinderPoint >&
TimedPointCloudData::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_;
}

// repeated float intensities = 5;
inline int TimedPointCloudData::_internal_intensities_size() const {
  return intensities_.size();
}
inline int TimedPointCloudData::intensities_size() const {
  return _internal_intensities_size();
}
inline void TimedPointCloudData::clear_intensities() {
  intensities_.Clear();
}
inline float TimedPointCloudData::_internal_intensities(int index) const {
  return intensities_.Get(index);
}
inline float TimedPointCloudData::intensities(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.intensities)
  return _internal_intensities(index);
}
inline void TimedPointCloudData::set_intensities(int index, float value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedPointCloudData.intensities)
}
inline void TimedPointCloudData::_internal_add_intensities(float value) {
  intensities_.Add(value);
}
inline void TimedPointCloudData::add_intensities(float value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TimedPointCloudData::_internal_intensities() const {
  return intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TimedPointCloudData::intensities() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TimedPointCloudData::_internal_mutable_intensities() {
  return &intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TimedPointCloudData::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.intensities)
  return _internal_mutable_intensities();
}

// -------------------------------------------------------------------

// RangeData

// .cartographer.transform.proto.Vector3f origin = 1;
inline bool RangeData::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool RangeData::has_origin() const {
  return _internal_has_origin();
}
inline const ::cartographer::transform::proto::Vector3f& RangeData::_internal_origin() const {
  const ::cartographer::transform::proto::Vector3f* p = origin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3f*>(
      &::cartographer::transform::proto::_Vector3f_default_instance_);
}
inline const ::cartographer::transform::proto::Vector3f& RangeData::origin() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.origin)
  return _internal_origin();
}
inline ::cartographer::transform::proto::Vector3f* RangeData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.RangeData.origin)
  
  ::cartographer::transform::proto::Vector3f* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector3f* RangeData::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector3f>(GetArenaNoVirtual());
    origin_ = p;
  }
  return origin_;
}
inline ::cartographer::transform::proto::Vector3f* RangeData::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.origin)
  return _internal_mutable_origin();
}
inline void RangeData::set_allocated_origin(::cartographer::transform::proto::Vector3f* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.RangeData.origin)
}

// repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
inline int RangeData::_internal_returns_legacy_size() const {
  return returns_legacy_.size();
}
inline int RangeData::returns_legacy_size() const {
  return _internal_returns_legacy_size();
}
inline ::cartographer::transform::proto::Vector3f* RangeData::mutable_returns_legacy(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.returns_legacy)
  return returns_legacy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >*
RangeData::mutable_returns_legacy() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.returns_legacy)
  return &returns_legacy_;
}
inline const ::cartographer::transform::proto::Vector3f& RangeData::_internal_returns_legacy(int index) const {
  return returns_legacy_.Get(index);
}
inline const ::cartographer::transform::proto::Vector3f& RangeData::returns_legacy(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.returns_legacy)
  return _internal_returns_legacy(index);
}
inline ::cartographer::transform::proto::Vector3f* RangeData::_internal_add_returns_legacy() {
  return returns_legacy_.Add();
}
inline ::cartographer::transform::proto::Vector3f* RangeData::add_returns_legacy() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.returns_legacy)
  return _internal_add_returns_legacy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >&
RangeData::returns_legacy() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.returns_legacy)
  return returns_legacy_;
}

// repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
inline int RangeData::_internal_misses_legacy_size() const {
  return misses_legacy_.size();
}
inline int RangeData::misses_legacy_size() const {
  return _internal_misses_legacy_size();
}
inline ::cartographer::transform::proto::Vector3f* RangeData::mutable_misses_legacy(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.misses_legacy)
  return misses_legacy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >*
RangeData::mutable_misses_legacy() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.misses_legacy)
  return &misses_legacy_;
}
inline const ::cartographer::transform::proto::Vector3f& RangeData::_internal_misses_legacy(int index) const {
  return misses_legacy_.Get(index);
}
inline const ::cartographer::transform::proto::Vector3f& RangeData::misses_legacy(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.misses_legacy)
  return _internal_misses_legacy(index);
}
inline ::cartographer::transform::proto::Vector3f* RangeData::_internal_add_misses_legacy() {
  return misses_legacy_.Add();
}
inline ::cartographer::transform::proto::Vector3f* RangeData::add_misses_legacy() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.misses_legacy)
  return _internal_add_misses_legacy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >&
RangeData::misses_legacy() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.misses_legacy)
  return misses_legacy_;
}

// repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
inline int RangeData::_internal_returns_size() const {
  return returns_.size();
}
inline int RangeData::returns_size() const {
  return _internal_returns_size();
}
inline void RangeData::clear_returns() {
  returns_.Clear();
}
inline ::cartographer::sensor::proto::RangefinderPoint* RangeData::mutable_returns(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.returns)
  return returns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >*
RangeData::mutable_returns() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.returns)
  return &returns_;
}
inline const ::cartographer::sensor::proto::RangefinderPoint& RangeData::_internal_returns(int index) const {
  return returns_.Get(index);
}
inline const ::cartographer::sensor::proto::RangefinderPoint& RangeData::returns(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.returns)
  return _internal_returns(index);
}
inline ::cartographer::sensor::proto::RangefinderPoint* RangeData::_internal_add_returns() {
  return returns_.Add();
}
inline ::cartographer::sensor::proto::RangefinderPoint* RangeData::add_returns() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.returns)
  return _internal_add_returns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >&
RangeData::returns() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.returns)
  return returns_;
}

// repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
inline int RangeData::_internal_misses_size() const {
  return misses_.size();
}
inline int RangeData::misses_size() const {
  return _internal_misses_size();
}
inline void RangeData::clear_misses() {
  misses_.Clear();
}
inline ::cartographer::sensor::proto::RangefinderPoint* RangeData::mutable_misses(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.misses)
  return misses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >*
RangeData::mutable_misses() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.misses)
  return &misses_;
}
inline const ::cartographer::sensor::proto::RangefinderPoint& RangeData::_internal_misses(int index) const {
  return misses_.Get(index);
}
inline const ::cartographer::sensor::proto::RangefinderPoint& RangeData::misses(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.misses)
  return _internal_misses(index);
}
inline ::cartographer::sensor::proto::RangefinderPoint* RangeData::_internal_add_misses() {
  return misses_.Add();
}
inline ::cartographer::sensor::proto::RangefinderPoint* RangeData::add_misses() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.misses)
  return _internal_add_misses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::RangefinderPoint >&
RangeData::misses() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.misses)
  return misses_;
}

// -------------------------------------------------------------------

// ImuData

// int64 timestamp = 1;
inline void ImuData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImuData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImuData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.timestamp)
  return _internal_timestamp();
}
inline void ImuData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ImuData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.ImuData.timestamp)
}

// .cartographer.transform.proto.Vector3d linear_acceleration = 2;
inline bool ImuData::_internal_has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != nullptr;
}
inline bool ImuData::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::cartographer::transform::proto::Vector3d& ImuData::_internal_linear_acceleration() const {
  const ::cartographer::transform::proto::Vector3d* p = linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3d*>(
      &::cartographer::transform::proto::_Vector3d_default_instance_);
}
inline const ::cartographer::transform::proto::Vector3d& ImuData::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.linear_acceleration)
  return _internal_linear_acceleration();
}
inline ::cartographer::transform::proto::Vector3d* ImuData::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.linear_acceleration)
  
  ::cartographer::transform::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::_internal_mutable_linear_acceleration() {
  
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector3d>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void ImuData::set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.linear_acceleration)
}

// .cartographer.transform.proto.Vector3d angular_velocity = 3;
inline bool ImuData::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool ImuData::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::cartographer::transform::proto::Vector3d& ImuData::_internal_angular_velocity() const {
  const ::cartographer::transform::proto::Vector3d* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3d*>(
      &::cartographer::transform::proto::_Vector3d_default_instance_);
}
inline const ::cartographer::transform::proto::Vector3d& ImuData::angular_velocity() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.angular_velocity)
  return _internal_angular_velocity();
}
inline ::cartographer::transform::proto::Vector3d* ImuData::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.angular_velocity)
  
  ::cartographer::transform::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Vector3d>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void ImuData::set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.angular_velocity)
}

// -------------------------------------------------------------------

// OdometryData

// int64 timestamp = 1;
inline void OdometryData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OdometryData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OdometryData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.timestamp)
  return _internal_timestamp();
}
inline void OdometryData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void OdometryData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.OdometryData.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 2;
inline bool OdometryData::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool OdometryData::has_pose() const {
  return _internal_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& OdometryData::_internal_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& OdometryData::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.pose)
  return _internal_pose();
}
inline ::cartographer::transform::proto::Rigid3d* OdometryData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.OdometryData.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* OdometryData::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* OdometryData::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.OdometryData.pose)
  return _internal_mutable_pose();
}
inline void OdometryData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.OdometryData.pose)
}

// -------------------------------------------------------------------

// FixedFramePoseData

// int64 timestamp = 1;
inline void FixedFramePoseData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FixedFramePoseData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FixedFramePoseData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.timestamp)
  return _internal_timestamp();
}
inline void FixedFramePoseData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void FixedFramePoseData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.FixedFramePoseData.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 2;
inline bool FixedFramePoseData::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool FixedFramePoseData::has_pose() const {
  return _internal_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& FixedFramePoseData::_internal_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& FixedFramePoseData::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.pose)
  return _internal_pose();
}
inline ::cartographer::transform::proto::Rigid3d* FixedFramePoseData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.FixedFramePoseData.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* FixedFramePoseData::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* FixedFramePoseData::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.FixedFramePoseData.pose)
  return _internal_mutable_pose();
}
inline void FixedFramePoseData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.FixedFramePoseData.pose)
}

// -------------------------------------------------------------------

// LandmarkData_LandmarkObservation

// bytes id = 1;
inline void LandmarkData_LandmarkObservation::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LandmarkData_LandmarkObservation::id() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  return _internal_id();
}
inline void LandmarkData_LandmarkObservation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
inline std::string* LandmarkData_LandmarkObservation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  return _internal_mutable_id();
}
inline const std::string& LandmarkData_LandmarkObservation::_internal_id() const {
  return id_.GetNoArena();
}
inline void LandmarkData_LandmarkObservation::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LandmarkData_LandmarkObservation::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
inline void LandmarkData_LandmarkObservation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
inline void LandmarkData_LandmarkObservation::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
inline std::string* LandmarkData_LandmarkObservation::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LandmarkData_LandmarkObservation::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LandmarkData_LandmarkObservation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}

// .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
inline bool LandmarkData_LandmarkObservation::_internal_has_landmark_to_tracking_transform() const {
  return this != internal_default_instance() && landmark_to_tracking_transform_ != nullptr;
}
inline bool LandmarkData_LandmarkObservation::has_landmark_to_tracking_transform() const {
  return _internal_has_landmark_to_tracking_transform();
}
inline const ::cartographer::transform::proto::Rigid3d& LandmarkData_LandmarkObservation::_internal_landmark_to_tracking_transform() const {
  const ::cartographer::transform::proto::Rigid3d* p = landmark_to_tracking_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& LandmarkData_LandmarkObservation::landmark_to_tracking_transform() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  return _internal_landmark_to_tracking_transform();
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::release_landmark_to_tracking_transform() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  
  ::cartographer::transform::proto::Rigid3d* temp = landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::_internal_mutable_landmark_to_tracking_transform() {
  
  if (landmark_to_tracking_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    landmark_to_tracking_transform_ = p;
  }
  return landmark_to_tracking_transform_;
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::mutable_landmark_to_tracking_transform() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  return _internal_mutable_landmark_to_tracking_transform();
}
inline void LandmarkData_LandmarkObservation::set_allocated_landmark_to_tracking_transform(::cartographer::transform::proto::Rigid3d* landmark_to_tracking_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmark_to_tracking_transform_);
  }
  if (landmark_to_tracking_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      landmark_to_tracking_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_to_tracking_transform, submessage_arena);
    }
    
  } else {
    
  }
  landmark_to_tracking_transform_ = landmark_to_tracking_transform;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
}

// double translation_weight = 3;
inline void LandmarkData_LandmarkObservation::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double LandmarkData_LandmarkObservation::_internal_translation_weight() const {
  return translation_weight_;
}
inline double LandmarkData_LandmarkObservation::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.translation_weight)
  return _internal_translation_weight();
}
inline void LandmarkData_LandmarkObservation::_internal_set_translation_weight(double value) {
  
  translation_weight_ = value;
}
inline void LandmarkData_LandmarkObservation::set_translation_weight(double value) {
  _internal_set_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.translation_weight)
}

// double rotation_weight = 4;
inline void LandmarkData_LandmarkObservation::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double LandmarkData_LandmarkObservation::_internal_rotation_weight() const {
  return rotation_weight_;
}
inline double LandmarkData_LandmarkObservation::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.rotation_weight)
  return _internal_rotation_weight();
}
inline void LandmarkData_LandmarkObservation::_internal_set_rotation_weight(double value) {
  
  rotation_weight_ = value;
}
inline void LandmarkData_LandmarkObservation::set_rotation_weight(double value) {
  _internal_set_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.rotation_weight)
}

// bytes type = 5;
inline void LandmarkData_LandmarkObservation::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LandmarkData_LandmarkObservation::type() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
  return _internal_type();
}
inline void LandmarkData_LandmarkObservation::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
}
inline std::string* LandmarkData_LandmarkObservation::mutable_type() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
  return _internal_mutable_type();
}
inline const std::string& LandmarkData_LandmarkObservation::_internal_type() const {
  return type_.GetNoArena();
}
inline void LandmarkData_LandmarkObservation::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LandmarkData_LandmarkObservation::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
}
inline void LandmarkData_LandmarkObservation::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
}
inline void LandmarkData_LandmarkObservation::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
}
inline std::string* LandmarkData_LandmarkObservation::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LandmarkData_LandmarkObservation::release_type() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LandmarkData_LandmarkObservation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.type)
}

// .cartographer.transform.proto.Rigid3d landmark_to_map_transform = 6;
inline bool LandmarkData_LandmarkObservation::_internal_has_landmark_to_map_transform() const {
  return this != internal_default_instance() && landmark_to_map_transform_ != nullptr;
}
inline bool LandmarkData_LandmarkObservation::has_landmark_to_map_transform() const {
  return _internal_has_landmark_to_map_transform();
}
inline const ::cartographer::transform::proto::Rigid3d& LandmarkData_LandmarkObservation::_internal_landmark_to_map_transform() const {
  const ::cartographer::transform::proto::Rigid3d* p = landmark_to_map_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& LandmarkData_LandmarkObservation::landmark_to_map_transform() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_map_transform)
  return _internal_landmark_to_map_transform();
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::release_landmark_to_map_transform() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_map_transform)
  
  ::cartographer::transform::proto::Rigid3d* temp = landmark_to_map_transform_;
  landmark_to_map_transform_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::_internal_mutable_landmark_to_map_transform() {
  
  if (landmark_to_map_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    landmark_to_map_transform_ = p;
  }
  return landmark_to_map_transform_;
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::mutable_landmark_to_map_transform() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_map_transform)
  return _internal_mutable_landmark_to_map_transform();
}
inline void LandmarkData_LandmarkObservation::set_allocated_landmark_to_map_transform(::cartographer::transform::proto::Rigid3d* landmark_to_map_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(landmark_to_map_transform_);
  }
  if (landmark_to_map_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      landmark_to_map_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_to_map_transform, submessage_arena);
    }
    
  } else {
    
  }
  landmark_to_map_transform_ = landmark_to_map_transform;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_map_transform)
}

// -------------------------------------------------------------------

// LandmarkData

// int64 timestamp = 1;
inline void LandmarkData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LandmarkData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LandmarkData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.timestamp)
  return _internal_timestamp();
}
inline void LandmarkData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void LandmarkData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.timestamp)
}

// repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
inline int LandmarkData::_internal_landmark_observations_size() const {
  return landmark_observations_.size();
}
inline int LandmarkData::landmark_observations_size() const {
  return _internal_landmark_observations_size();
}
inline void LandmarkData::clear_landmark_observations() {
  landmark_observations_.Clear();
}
inline ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::mutable_landmark_observations(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >*
LandmarkData::mutable_landmark_observations() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return &landmark_observations_;
}
inline const ::cartographer::sensor::proto::LandmarkData_LandmarkObservation& LandmarkData::_internal_landmark_observations(int index) const {
  return landmark_observations_.Get(index);
}
inline const ::cartographer::sensor::proto::LandmarkData_LandmarkObservation& LandmarkData::landmark_observations(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return _internal_landmark_observations(index);
}
inline ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::_internal_add_landmark_observations() {
  return landmark_observations_.Add();
}
inline ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::add_landmark_observations() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return _internal_add_landmark_observations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >&
LandmarkData::landmark_observations() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_;
}

// .cartographer.transform.proto.Rigid3d global_landmark_pose = 3;
inline bool LandmarkData::_internal_has_global_landmark_pose() const {
  return this != internal_default_instance() && global_landmark_pose_ != nullptr;
}
inline bool LandmarkData::has_global_landmark_pose() const {
  return _internal_has_global_landmark_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& LandmarkData::_internal_global_landmark_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = global_landmark_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& LandmarkData::global_landmark_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.global_landmark_pose)
  return _internal_global_landmark_pose();
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData::release_global_landmark_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.global_landmark_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = global_landmark_pose_;
  global_landmark_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData::_internal_mutable_global_landmark_pose() {
  
  if (global_landmark_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    global_landmark_pose_ = p;
  }
  return global_landmark_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* LandmarkData::mutable_global_landmark_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.global_landmark_pose)
  return _internal_mutable_global_landmark_pose();
}
inline void LandmarkData::set_allocated_global_landmark_pose(::cartographer::transform::proto::Rigid3d* global_landmark_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_landmark_pose_);
  }
  if (global_landmark_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_landmark_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_landmark_pose, submessage_arena);
    }
    
  } else {
    
  }
  global_landmark_pose_ = global_landmark_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.global_landmark_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fsensor_2fproto_2fsensor_2eproto
