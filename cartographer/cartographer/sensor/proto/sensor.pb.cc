// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector4f_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace sensor {
namespace proto {
class RangefinderPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangefinderPoint> _instance;
} _RangefinderPoint_default_instance_;
class TimedRangefinderPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimedRangefinderPoint> _instance;
} _TimedRangefinderPoint_default_instance_;
class CompressedPointCloudDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompressedPointCloud> _instance;
} _CompressedPointCloud_default_instance_;
class TimedPointCloudDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimedPointCloudData> _instance;
} _TimedPointCloudData_default_instance_;
class RangeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeData> _instance;
} _RangeData_default_instance_;
class ImuDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuData> _instance;
} _ImuData_default_instance_;
class OdometryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdometryData> _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedFramePoseData> _instance;
} _FixedFramePoseData_default_instance_;
class LandmarkData_LandmarkObservationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkData_LandmarkObservation> _instance;
} _LandmarkData_LandmarkObservation_default_instance_;
class LandmarkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkData> _instance;
} _LandmarkData_default_instance_;
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
static void InitDefaultsscc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_;
    new (ptr) ::cartographer::sensor::proto::CompressedPointCloud();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::CompressedPointCloud::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {}};

static void InitDefaultsscc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_FixedFramePoseData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::FixedFramePoseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::FixedFramePoseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_ImuData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::ImuData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::ImuData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_LandmarkData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::LandmarkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::LandmarkData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_;
    new (ptr) ::cartographer::sensor::proto::LandmarkData_LandmarkObservation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::LandmarkData_LandmarkObservation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_OdometryData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::OdometryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::OdometryData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_RangeData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::RangeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::RangeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_RangefinderPoint_default_instance_;
    new (ptr) ::cartographer::sensor::proto::RangefinderPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::RangefinderPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_TimedPointCloudData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::TimedPointCloudData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::TimedPointCloudData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_Vector4f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_;
    new (ptr) ::cartographer::sensor::proto::TimedRangefinderPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::TimedRangefinderPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangefinderPoint, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, position_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, num_points_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, point_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, origin_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, point_data_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, point_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, intensities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, origin_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, returns_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, misses_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, returns_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, misses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, angular_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, landmark_to_tracking_transform_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, type_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, landmark_to_map_transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, landmark_observations_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, global_landmark_pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::sensor::proto::RangefinderPoint)},
  { 6, -1, sizeof(::cartographer::sensor::proto::TimedRangefinderPoint)},
  { 13, -1, sizeof(::cartographer::sensor::proto::CompressedPointCloud)},
  { 20, -1, sizeof(::cartographer::sensor::proto::TimedPointCloudData)},
  { 30, -1, sizeof(::cartographer::sensor::proto::RangeData)},
  { 40, -1, sizeof(::cartographer::sensor::proto::ImuData)},
  { 48, -1, sizeof(::cartographer::sensor::proto::OdometryData)},
  { 55, -1, sizeof(::cartographer::sensor::proto::FixedFramePoseData)},
  { 62, -1, sizeof(::cartographer::sensor::proto::LandmarkData_LandmarkObservation)},
  { 73, -1, sizeof(::cartographer::sensor::proto::LandmarkData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_RangefinderPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_CompressedPointCloud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_TimedPointCloudData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_RangeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_ImuData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_OdometryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_FixedFramePoseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::sensor::proto::_LandmarkData_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fsensor_2fproto_2fsensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&cartographer/sensor/proto/sensor.proto"
  "\022\031cartographer.sensor.proto\032,cartographe"
  "r/transform/proto/transform.proto\"L\n\020Ran"
  "gefinderPoint\0228\n\010position\030\001 \001(\0132&.cartog"
  "rapher.transform.proto.Vector3f\"_\n\025Timed"
  "RangefinderPoint\0228\n\010position\030\001 \001(\0132&.car"
  "tographer.transform.proto.Vector3f\022\014\n\004ti"
  "me\030\002 \001(\002\">\n\024CompressedPointCloud\022\022\n\nnum_"
  "points\030\001 \001(\005\022\022\n\npoint_data\030\003 \003(\005\"\376\001\n\023Tim"
  "edPointCloudData\022\021\n\ttimestamp\030\001 \001(\003\0226\n\006o"
  "rigin\030\002 \001(\0132&.cartographer.transform.pro"
  "to.Vector3f\022A\n\021point_data_legacy\030\003 \003(\0132&"
  ".cartographer.transform.proto.Vector4f\022D"
  "\n\npoint_data\030\004 \003(\01320.cartographer.sensor"
  ".proto.TimedRangefinderPoint\022\023\n\013intensit"
  "ies\030\005 \003(\002\"\275\002\n\tRangeData\0226\n\006origin\030\001 \001(\0132"
  "&.cartographer.transform.proto.Vector3f\022"
  ">\n\016returns_legacy\030\002 \003(\0132&.cartographer.t"
  "ransform.proto.Vector3f\022=\n\rmisses_legacy"
  "\030\003 \003(\0132&.cartographer.transform.proto.Ve"
  "ctor3f\022<\n\007returns\030\004 \003(\0132+.cartographer.s"
  "ensor.proto.RangefinderPoint\022;\n\006misses\030\005"
  " \003(\0132+.cartographer.sensor.proto.Rangefi"
  "nderPoint\"\243\001\n\007ImuData\022\021\n\ttimestamp\030\001 \001(\003"
  "\022C\n\023linear_acceleration\030\002 \001(\0132&.cartogra"
  "pher.transform.proto.Vector3d\022@\n\020angular"
  "_velocity\030\003 \001(\0132&.cartographer.transform"
  ".proto.Vector3d\"V\n\014OdometryData\022\021\n\ttimes"
  "tamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%.cartographer."
  "transform.proto.Rigid3d\"\\\n\022FixedFramePos"
  "eData\022\021\n\ttimestamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%"
  ".cartographer.transform.proto.Rigid3d\"\302\003"
  "\n\014LandmarkData\022\021\n\ttimestamp\030\001 \001(\003\022Z\n\025lan"
  "dmark_observations\030\002 \003(\0132;.cartographer."
  "sensor.proto.LandmarkData.LandmarkObserv"
  "ation\022C\n\024global_landmark_pose\030\003 \001(\0132%.ca"
  "rtographer.transform.proto.Rigid3d\032\375\001\n\023L"
  "andmarkObservation\022\n\n\002id\030\001 \001(\014\022M\n\036landma"
  "rk_to_tracking_transform\030\002 \001(\0132%.cartogr"
  "apher.transform.proto.Rigid3d\022\032\n\022transla"
  "tion_weight\030\003 \001(\001\022\027\n\017rotation_weight\030\004 \001"
  "(\001\022\014\n\004type\030\005 \001(\014\022H\n\031landmark_to_map_tran"
  "sform\030\006 \001(\0132%.cartographer.transform.pro"
  "to.Rigid3dB\010B\006Sensorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_sccs[10] = {
  &scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
  &scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once;
static bool descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto = {
  &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_initialized, descriptor_table_protodef_cartographer_2fsensor_2fproto_2fsensor_2eproto, "cartographer/sensor/proto/sensor.proto", 1748,
  &descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_once, descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_sccs, descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto::offsets,
  file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto, 10, file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto, file_level_service_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fsensor_2fproto_2fsensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto), true);
namespace cartographer {
namespace sensor {
namespace proto {

// ===================================================================

void RangefinderPoint::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_RangefinderPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class RangefinderPoint::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& position(const RangefinderPoint* msg);
};

const ::cartographer::transform::proto::Vector3f&
RangefinderPoint::_Internal::position(const RangefinderPoint* msg) {
  return *msg->position_;
}
void RangefinderPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
RangefinderPoint::RangefinderPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangefinderPoint)
}
RangefinderPoint::RangefinderPoint(const RangefinderPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::cartographer::transform::proto::Vector3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangefinderPoint)
}

void RangefinderPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  position_ = nullptr;
}

RangefinderPoint::~RangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangefinderPoint)
  SharedDtor();
}

void RangefinderPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void RangefinderPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangefinderPoint& RangefinderPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void RangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangefinderPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RangefinderPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangefinderPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangefinderPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangefinderPoint)
  return target;
}

size_t RangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangefinderPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangefinderPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RangefinderPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangefinderPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangefinderPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangefinderPoint)
    MergeFrom(*source);
  }
}

void RangefinderPoint::MergeFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::cartographer::transform::proto::Vector3f::MergeFrom(from._internal_position());
  }
}

void RangefinderPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangefinderPoint::CopyFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangefinderPoint::IsInitialized() const {
  return true;
}

void RangefinderPoint::InternalSwap(RangefinderPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangefinderPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimedRangefinderPoint::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class TimedRangefinderPoint::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& position(const TimedRangefinderPoint* msg);
};

const ::cartographer::transform::proto::Vector3f&
TimedRangefinderPoint::_Internal::position(const TimedRangefinderPoint* msg) {
  return *msg->position_;
}
void TimedRangefinderPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
TimedRangefinderPoint::TimedRangefinderPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}
TimedRangefinderPoint::TimedRangefinderPoint(const TimedRangefinderPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::cartographer::transform::proto::Vector3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}

void TimedRangefinderPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&position_)) + sizeof(time_));
}

TimedRangefinderPoint::~TimedRangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedRangefinderPoint)
  SharedDtor();
}

void TimedRangefinderPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void TimedRangefinderPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimedRangefinderPoint& TimedRangefinderPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void TimedRangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear();
}

const char* TimedRangefinderPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedRangefinderPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedRangefinderPoint)
  return target;
}

size_t TimedRangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedRangefinderPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedRangefinderPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedRangefinderPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedRangefinderPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedRangefinderPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedRangefinderPoint)
    MergeFrom(*source);
  }
}

void TimedRangefinderPoint::MergeFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::cartographer::transform::proto::Vector3f::MergeFrom(from._internal_position());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
}

void TimedRangefinderPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedRangefinderPoint::CopyFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedRangefinderPoint::IsInitialized() const {
  return true;
}

void TimedRangefinderPoint::InternalSwap(TimedRangefinderPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedRangefinderPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompressedPointCloud::InitAsDefaultInstance() {
}
class CompressedPointCloud::_Internal {
 public:
};

CompressedPointCloud::CompressedPointCloud()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedPointCloud)
}
CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      point_data_(from.point_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_points_ = from.num_points_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::SharedCtor() {
  num_points_ = 0;
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
}

void CompressedPointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressedPointCloud& CompressedPointCloud::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_.Clear();
  num_points_ = 0;
  _internal_metadata_.Clear();
}

const char* CompressedPointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 point_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_point_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_point_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompressedPointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_points(), target);
  }

  // repeated int32 point_data = 3;
  {
    int byte_size = _point_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_point_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

size_t CompressedPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 point_data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->point_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _point_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedPointCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompressedPointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedPointCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedPointCloud)
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_.MergeFrom(from.point_data_);
  if (from.num_points() != 0) {
    _internal_set_num_points(from._internal_num_points());
  }
}

void CompressedPointCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {
  return true;
}

void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  point_data_.InternalSwap(&other->point_data_);
  swap(num_points_, other->num_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressedPointCloud::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimedPointCloudData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_TimedPointCloudData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class TimedPointCloudData::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& origin(const TimedPointCloudData* msg);
};

const ::cartographer::transform::proto::Vector3f&
TimedPointCloudData::_Internal::origin(const TimedPointCloudData* msg) {
  return *msg->origin_;
}
void TimedPointCloudData::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
void TimedPointCloudData::clear_point_data_legacy() {
  point_data_legacy_.Clear();
}
TimedPointCloudData::TimedPointCloudData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedPointCloudData)
}
TimedPointCloudData::TimedPointCloudData(const TimedPointCloudData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      point_data_legacy_(from.point_data_legacy_),
      point_data_(from.point_data_),
      intensities_(from.intensities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::cartographer::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedPointCloudData)
}

void TimedPointCloudData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(timestamp_));
}

TimedPointCloudData::~TimedPointCloudData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedPointCloudData)
  SharedDtor();
}

void TimedPointCloudData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void TimedPointCloudData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimedPointCloudData& TimedPointCloudData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void TimedPointCloudData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedPointCloudData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_legacy_.Clear();
  point_data_.Clear();
  intensities_.Clear();
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TimedPointCloudData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector3f origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_data_legacy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float intensities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_intensities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedPointCloudData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedPointCloudData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::origin(this), target, stream);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_data_legacy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_point_data_legacy(i), target, stream);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_point_data(i), target, stream);
  }

  // repeated float intensities = 5;
  if (this->_internal_intensities_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_intensities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedPointCloudData)
  return target;
}

size_t TimedPointCloudData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedPointCloudData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  total_size += 1UL * this->_internal_point_data_legacy_size();
  for (const auto& msg : this->point_data_legacy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  total_size += 1UL * this->_internal_point_data_size();
  for (const auto& msg : this->point_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float intensities = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedPointCloudData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedPointCloudData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedPointCloudData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedPointCloudData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedPointCloudData)
    MergeFrom(*source);
  }
}

void TimedPointCloudData::MergeFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_legacy_.MergeFrom(from.point_data_legacy_);
  point_data_.MergeFrom(from.point_data_);
  intensities_.MergeFrom(from.intensities_);
  if (from.has_origin()) {
    _internal_mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from._internal_origin());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TimedPointCloudData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedPointCloudData::CopyFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedPointCloudData::IsInitialized() const {
  return true;
}

void TimedPointCloudData::InternalSwap(TimedPointCloudData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  point_data_legacy_.InternalSwap(&other->point_data_legacy_);
  point_data_.InternalSwap(&other->point_data_);
  intensities_.InternalSwap(&other->intensities_);
  swap(origin_, other->origin_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedPointCloudData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RangeData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_RangeData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class RangeData::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3f& origin(const RangeData* msg);
};

const ::cartographer::transform::proto::Vector3f&
RangeData::_Internal::origin(const RangeData* msg) {
  return *msg->origin_;
}
void RangeData::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
void RangeData::clear_returns_legacy() {
  returns_legacy_.Clear();
}
void RangeData::clear_misses_legacy() {
  misses_legacy_.Clear();
}
RangeData::RangeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangeData)
}
RangeData::RangeData(const RangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      returns_legacy_(from.returns_legacy_),
      misses_legacy_(from.misses_legacy_),
      returns_(from.returns_),
      misses_(from.misses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::cartographer::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangeData)
}

void RangeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  origin_ = nullptr;
}

RangeData::~RangeData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangeData)
  SharedDtor();
}

void RangeData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void RangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeData& RangeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void RangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  returns_legacy_.Clear();
  misses_legacy_.Clear();
  returns_.Clear();
  misses_.Clear();
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RangeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_returns_legacy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_misses_legacy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_returns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_misses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_returns_legacy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_returns_legacy(i), target, stream);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_misses_legacy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_misses_legacy(i), target, stream);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_returns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_returns(i), target, stream);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_misses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_misses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangeData)
  return target;
}

size_t RangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  total_size += 1UL * this->_internal_returns_legacy_size();
  for (const auto& msg : this->returns_legacy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  total_size += 1UL * this->_internal_misses_legacy_size();
  for (const auto& msg : this->misses_legacy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  total_size += 1UL * this->_internal_returns_size();
  for (const auto& msg : this->returns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  total_size += 1UL * this->_internal_misses_size();
  for (const auto& msg : this->misses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangeData)
    MergeFrom(*source);
  }
}

void RangeData::MergeFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  returns_legacy_.MergeFrom(from.returns_legacy_);
  misses_legacy_.MergeFrom(from.misses_legacy_);
  returns_.MergeFrom(from.returns_);
  misses_.MergeFrom(from.misses_);
  if (from.has_origin()) {
    _internal_mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from._internal_origin());
  }
}

void RangeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeData::CopyFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeData::IsInitialized() const {
  return true;
}

void RangeData::InternalSwap(RangeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  returns_legacy_.InternalSwap(&other->returns_legacy_);
  misses_legacy_.InternalSwap(&other->misses_legacy_);
  returns_.InternalSwap(&other->returns_);
  misses_.InternalSwap(&other->misses_);
  swap(origin_, other->origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_ImuData_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  ::cartographer::sensor::proto::_ImuData_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
}
class ImuData::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector3d& linear_acceleration(const ImuData* msg);
  static const ::cartographer::transform::proto::Vector3d& angular_velocity(const ImuData* msg);
};

const ::cartographer::transform::proto::Vector3d&
ImuData::_Internal::linear_acceleration(const ImuData* msg) {
  return *msg->linear_acceleration_;
}
const ::cartographer::transform::proto::Vector3d&
ImuData::_Internal::angular_velocity(const ImuData* msg) {
  return *msg->angular_velocity_;
}
void ImuData::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
}
void ImuData::clear_angular_velocity() {
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
ImuData::ImuData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&linear_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&linear_acceleration_)) + sizeof(timestamp_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuData& ImuData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ImuData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linear_acceleration(this), target, stream);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angular_velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.ImuData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(from._internal_linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(from._internal_angular_velocity());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ImuData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OdometryData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_OdometryData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class OdometryData::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const OdometryData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
OdometryData::_Internal::pose(const OdometryData* msg) {
  return *msg->pose_;
}
void OdometryData::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
OdometryData::OdometryData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void OdometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdometryData& OdometryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* OdometryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdometryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.OdometryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void OdometryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedFramePoseData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_FixedFramePoseData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class FixedFramePoseData::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const FixedFramePoseData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
FixedFramePoseData::_Internal::pose(const FixedFramePoseData* msg) {
  return *msg->pose_;
}
void FixedFramePoseData::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
FixedFramePoseData::FixedFramePoseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedFramePoseData& FixedFramePoseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* FixedFramePoseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedFramePoseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedFramePoseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.FixedFramePoseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void FixedFramePoseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedFramePoseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkData_LandmarkObservation::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_._instance.get_mutable()->landmark_to_tracking_transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_._instance.get_mutable()->landmark_to_map_transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class LandmarkData_LandmarkObservation::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& landmark_to_tracking_transform(const LandmarkData_LandmarkObservation* msg);
  static const ::cartographer::transform::proto::Rigid3d& landmark_to_map_transform(const LandmarkData_LandmarkObservation* msg);
};

const ::cartographer::transform::proto::Rigid3d&
LandmarkData_LandmarkObservation::_Internal::landmark_to_tracking_transform(const LandmarkData_LandmarkObservation* msg) {
  return *msg->landmark_to_tracking_transform_;
}
const ::cartographer::transform::proto::Rigid3d&
LandmarkData_LandmarkObservation::_Internal::landmark_to_map_transform(const LandmarkData_LandmarkObservation* msg) {
  return *msg->landmark_to_map_transform_;
}
void LandmarkData_LandmarkObservation::clear_landmark_to_tracking_transform() {
  if (GetArenaNoVirtual() == nullptr && landmark_to_tracking_transform_ != nullptr) {
    delete landmark_to_tracking_transform_;
  }
  landmark_to_tracking_transform_ = nullptr;
}
void LandmarkData_LandmarkObservation::clear_landmark_to_map_transform() {
  if (GetArenaNoVirtual() == nullptr && landmark_to_map_transform_ != nullptr) {
    delete landmark_to_map_transform_;
  }
  landmark_to_map_transform_ = nullptr;
}
LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}
LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(const LandmarkData_LandmarkObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_landmark_to_tracking_transform()) {
    landmark_to_tracking_transform_ = new ::cartographer::transform::proto::Rigid3d(*from.landmark_to_tracking_transform_);
  } else {
    landmark_to_tracking_transform_ = nullptr;
  }
  if (from._internal_has_landmark_to_map_transform()) {
    landmark_to_map_transform_ = new ::cartographer::transform::proto::Rigid3d(*from.landmark_to_map_transform_);
  } else {
    landmark_to_map_transform_ = nullptr;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_weight_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

void LandmarkData_LandmarkObservation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&landmark_to_tracking_transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&landmark_to_tracking_transform_)) + sizeof(rotation_weight_));
}

LandmarkData_LandmarkObservation::~LandmarkData_LandmarkObservation() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  SharedDtor();
}

void LandmarkData_LandmarkObservation::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete landmark_to_tracking_transform_;
  if (this != internal_default_instance()) delete landmark_to_map_transform_;
}

void LandmarkData_LandmarkObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkData_LandmarkObservation& LandmarkData_LandmarkObservation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void LandmarkData_LandmarkObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && landmark_to_tracking_transform_ != nullptr) {
    delete landmark_to_tracking_transform_;
  }
  landmark_to_tracking_transform_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && landmark_to_map_transform_ != nullptr) {
    delete landmark_to_map_transform_;
  }
  landmark_to_map_transform_ = nullptr;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  _internal_metadata_.Clear();
}

const char* LandmarkData_LandmarkObservation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_to_tracking_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double translation_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rotation_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d landmark_to_map_transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_to_map_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkData_LandmarkObservation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::landmark_to_tracking_transform(this), target, stream);
  }

  // double translation_weight = 3;
  if (!(this->translation_weight() <= 0 && this->translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_translation_weight(), target);
  }

  // double rotation_weight = 4;
  if (!(this->rotation_weight() <= 0 && this->rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rotation_weight(), target);
  }

  // bytes type = 5;
  if (this->type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_type(), target);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_map_transform = 6;
  if (this->has_landmark_to_map_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::landmark_to_map_transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return target;
}

size_t LandmarkData_LandmarkObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landmark_to_tracking_transform_);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_map_transform = 6;
  if (this->has_landmark_to_map_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landmark_to_map_transform_);
  }

  // double translation_weight = 3;
  if (!(this->translation_weight() <= 0 && this->translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 4;
  if (!(this->rotation_weight() <= 0 && this->rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkData_LandmarkObservation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData_LandmarkObservation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkData_LandmarkObservation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    MergeFrom(*source);
  }
}

void LandmarkData_LandmarkObservation::MergeFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_landmark_to_tracking_transform()) {
    _internal_mutable_landmark_to_tracking_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_landmark_to_tracking_transform());
  }
  if (from.has_landmark_to_map_transform()) {
    _internal_mutable_landmark_to_map_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_landmark_to_map_transform());
  }
  if (!(from.translation_weight() <= 0 && from.translation_weight() >= 0)) {
    _internal_set_translation_weight(from._internal_translation_weight());
  }
  if (!(from.rotation_weight() <= 0 && from.rotation_weight() >= 0)) {
    _internal_set_rotation_weight(from._internal_rotation_weight());
  }
}

void LandmarkData_LandmarkObservation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData_LandmarkObservation::CopyFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData_LandmarkObservation::IsInitialized() const {
  return true;
}

void LandmarkData_LandmarkObservation::InternalSwap(LandmarkData_LandmarkObservation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(landmark_to_tracking_transform_, other->landmark_to_tracking_transform_);
  swap(landmark_to_map_transform_, other->landmark_to_map_transform_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkData_LandmarkObservation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_LandmarkData_default_instance_._instance.get_mutable()->global_landmark_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class LandmarkData::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& global_landmark_pose(const LandmarkData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
LandmarkData::_Internal::global_landmark_pose(const LandmarkData* msg) {
  return *msg->global_landmark_pose_;
}
void LandmarkData::clear_global_landmark_pose() {
  if (GetArenaNoVirtual() == nullptr && global_landmark_pose_ != nullptr) {
    delete global_landmark_pose_;
  }
  global_landmark_pose_ = nullptr;
}
LandmarkData::LandmarkData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData)
}
LandmarkData::LandmarkData(const LandmarkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      landmark_observations_(from.landmark_observations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_global_landmark_pose()) {
    global_landmark_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_landmark_pose_);
  } else {
    global_landmark_pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&global_landmark_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&global_landmark_pose_)) + sizeof(timestamp_));
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
  if (this != internal_default_instance()) delete global_landmark_pose_;
}

void LandmarkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkData& LandmarkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_observations_.Clear();
  if (GetArenaNoVirtual() == nullptr && global_landmark_pose_ != nullptr) {
    delete global_landmark_pose_;
  }
  global_landmark_pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LandmarkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark_observations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d global_landmark_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_landmark_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_observations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_landmark_observations(i), target, stream);
  }

  // .cartographer.transform.proto.Rigid3d global_landmark_pose = 3;
  if (this->has_global_landmark_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::global_landmark_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData)
  return target;
}

size_t LandmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  total_size += 1UL * this->_internal_landmark_observations_size();
  for (const auto& msg : this->landmark_observations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cartographer.transform.proto.Rigid3d global_landmark_pose = 3;
  if (this->has_global_landmark_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_landmark_pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_observations_.MergeFrom(from.landmark_observations_);
  if (from.has_global_landmark_pose()) {
    _internal_mutable_global_landmark_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_global_landmark_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void LandmarkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {
  return true;
}

void LandmarkData::InternalSwap(LandmarkData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  landmark_observations_.InternalSwap(&other->landmark_observations_);
  swap(global_landmark_pose_, other->global_landmark_pose_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::RangefinderPoint* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::RangefinderPoint >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::RangefinderPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::TimedRangefinderPoint* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::TimedRangefinderPoint >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::TimedRangefinderPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::CompressedPointCloud* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::CompressedPointCloud >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::CompressedPointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::TimedPointCloudData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::TimedPointCloudData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::TimedPointCloudData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::RangeData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::RangeData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::RangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::ImuData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::ImuData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::OdometryData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::OdometryData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::OdometryData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::FixedFramePoseData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::FixedFramePoseData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::FixedFramePoseData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::LandmarkData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::LandmarkData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::LandmarkData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
