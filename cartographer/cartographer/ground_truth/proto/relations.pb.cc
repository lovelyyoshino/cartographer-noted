// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/ground_truth/proto/relations.proto

#include "cartographer/ground_truth/proto/relations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace ground_truth {
namespace proto {
class RelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Relation> _instance;
} _Relation_default_instance_;
class GroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundTruth> _instance;
} _GroundTruth_default_instance_;
}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer
static void InitDefaultsscc_info_GroundTruth_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::ground_truth::proto::_GroundTruth_default_instance_;
    new (ptr) ::cartographer::ground_truth::proto::GroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::ground_truth::proto::GroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroundTruth_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroundTruth_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto}, {
      &scc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base,}};

static void InitDefaultsscc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::ground_truth::proto::_Relation_default_instance_;
    new (ptr) ::cartographer::ground_truth::proto::Relation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::ground_truth::proto::Relation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, timestamp1_),
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, timestamp2_),
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, expected_),
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, covered_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::ground_truth::proto::GroundTruth, relation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::ground_truth::proto::Relation)},
  { 9, -1, sizeof(::cartographer::ground_truth::proto::GroundTruth)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::ground_truth::proto::_Relation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::ground_truth::proto::_GroundTruth_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/cartographer/ground_truth/proto/relati"
  "ons.proto\022\037cartographer.ground_truth.pro"
  "to\032,cartographer/transform/proto/transfo"
  "rm.proto\"\205\001\n\010Relation\022\022\n\ntimestamp1\030\001 \001("
  "\003\022\022\n\ntimestamp2\030\002 \001(\003\0227\n\010expected\030\003 \001(\0132"
  "%.cartographer.transform.proto.Rigid3d\022\030"
  "\n\020covered_distance\030\004 \001(\001\"J\n\013GroundTruth\022"
  ";\n\010relation\030\001 \003(\0132).cartographer.ground_"
  "truth.proto.Relationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_sccs[2] = {
  &scc_info_GroundTruth_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base,
  &scc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_once;
static bool descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = {
  &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_initialized, descriptor_table_protodef_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto, "cartographer/ground_truth/proto/relations.proto", 348,
  &descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_once, descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_sccs, descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::offsets,
  file_level_metadata_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto, 2, file_level_enum_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto, file_level_service_descriptors_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto), true);
namespace cartographer {
namespace ground_truth {
namespace proto {

// ===================================================================

void Relation::InitAsDefaultInstance() {
  ::cartographer::ground_truth::proto::_Relation_default_instance_._instance.get_mutable()->expected_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class Relation::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& expected(const Relation* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Relation::_Internal::expected(const Relation* msg) {
  return *msg->expected_;
}
void Relation::clear_expected() {
  if (GetArenaNoVirtual() == nullptr && expected_ != nullptr) {
    delete expected_;
  }
  expected_ = nullptr;
}
Relation::Relation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.ground_truth.proto.Relation)
}
Relation::Relation(const Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_expected()) {
    expected_ = new ::cartographer::transform::proto::Rigid3d(*from.expected_);
  } else {
    expected_ = nullptr;
  }
  ::memcpy(&timestamp1_, &from.timestamp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&covered_distance_) -
    reinterpret_cast<char*>(&timestamp1_)) + sizeof(covered_distance_));
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.Relation)
}

void Relation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base);
  ::memset(&expected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covered_distance_) -
      reinterpret_cast<char*>(&expected_)) + sizeof(covered_distance_));
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.Relation)
  SharedDtor();
}

void Relation::SharedDtor() {
  if (this != internal_default_instance()) delete expected_;
}

void Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Relation& Relation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Relation_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base);
  return *internal_default_instance();
}


void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expected_ != nullptr) {
    delete expected_;
  }
  expected_ = nullptr;
  ::memset(&timestamp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covered_distance_) -
      reinterpret_cast<char*>(&timestamp1_)) + sizeof(covered_distance_));
  _internal_metadata_.Clear();
}

const char* Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d expected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double covered_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          covered_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp1(), target);
  }

  // int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp2(), target);
  }

  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expected(this), target, stream);
  }

  // double covered_distance = 4;
  if (!(this->covered_distance() <= 0 && this->covered_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_covered_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.Relation)
  return target;
}

size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expected_);
  }

  // int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp1());
  }

  // int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp2());
  }

  // double covered_distance = 4;
  if (!(this->covered_distance() <= 0 && this->covered_distance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.ground_truth.proto.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.ground_truth.proto.Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.ground_truth.proto.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expected()) {
    _internal_mutable_expected()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_expected());
  }
  if (from.timestamp1() != 0) {
    _internal_set_timestamp1(from._internal_timestamp1());
  }
  if (from.timestamp2() != 0) {
    _internal_set_timestamp2(from._internal_timestamp2());
  }
  if (!(from.covered_distance() <= 0 && from.covered_distance() >= 0)) {
    _internal_set_covered_distance(from._internal_covered_distance());
  }
}

void Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  return true;
}

void Relation::InternalSwap(Relation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expected_, other->expected_);
  swap(timestamp1_, other->timestamp1_);
  swap(timestamp2_, other->timestamp2_);
  swap(covered_distance_, other->covered_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundTruth::InitAsDefaultInstance() {
}
class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.ground_truth.proto.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      relation_(from.relation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.GroundTruth)
}

void GroundTruth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroundTruth_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base);
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
}

void GroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundTruth& GroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundTruth_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto.base);
  return *internal_default_instance();
}


void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relation_.Clear();
  _internal_metadata_.Clear();
}

const char* GroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.ground_truth.proto.Relation relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_relation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.GroundTruth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  total_size += 1UL * this->_internal_relation_size();
  for (const auto& msg : this->relation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.ground_truth.proto.GroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.ground_truth.proto.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relation_.MergeFrom(from.relation_);
}

void GroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  relation_.InternalSwap(&other->relation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::ground_truth::proto::Relation* Arena::CreateMaybeMessage< ::cartographer::ground_truth::proto::Relation >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::ground_truth::proto::Relation >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::ground_truth::proto::GroundTruth* Arena::CreateMaybeMessage< ::cartographer::ground_truth::proto::GroundTruth >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::ground_truth::proto::GroundTruth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
