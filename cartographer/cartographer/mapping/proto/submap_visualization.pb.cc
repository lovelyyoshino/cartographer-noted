// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#include "cartographer/mapping/proto/submap_visualization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class SubmapList_SubmapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapList_SubmapEntry> _instance;
} _SubmapList_SubmapEntry_default_instance_;
class SubmapList_TrajectorySubmapListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapList_TrajectorySubmapList> _instance;
} _SubmapList_TrajectorySubmapList_default_instance_;
class SubmapListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapList> _instance;
} _SubmapList_default_instance_;
class SubmapQuery_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapQuery_Request> _instance;
} _SubmapQuery_Request_default_instance_;
class SubmapQuery_Response_SubmapTextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapQuery_Response_SubmapTexture> _instance;
} _SubmapQuery_Response_SubmapTexture_default_instance_;
class SubmapQuery_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapQuery_Response> _instance;
} _SubmapQuery_Response_default_instance_;
class SubmapQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmapQuery> _instance;
} _SubmapQuery_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_SubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapList_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {
      &scc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapList_SubmapEntry_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapList_SubmapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapList_SubmapEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapList_TrajectorySubmapList_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {
      &scc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_SubmapQuery_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapQuery_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubmapQuery_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubmapQuery_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {
      &scc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
      &scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapQuery_Request_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapQuery_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapQuery_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {}};

static void InitDefaultsscc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapQuery_Response_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapQuery_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapQuery_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {
      &scc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapQuery_Response_SubmapTexture_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_SubmapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_SubmapEntry, submap_version_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_SubmapEntry, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_TrajectorySubmapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList_TrajectorySubmapList, submap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapList, trajectory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Request, submap_index_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Request, trajectory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, cells_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, width_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, height_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, resolution_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture, slice_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, submap_version_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, textures_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery_Response, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery, request_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapQuery, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::SubmapList_SubmapEntry)},
  { 7, -1, sizeof(::cartographer::mapping::proto::SubmapList_TrajectorySubmapList)},
  { 13, -1, sizeof(::cartographer::mapping::proto::SubmapList)},
  { 19, -1, sizeof(::cartographer::mapping::proto::SubmapQuery_Request)},
  { 26, -1, sizeof(::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture)},
  { 36, -1, sizeof(::cartographer::mapping::proto::SubmapQuery_Response)},
  { 44, -1, sizeof(::cartographer::mapping::proto::SubmapQuery)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapList_SubmapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapList_TrajectorySubmapList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapQuery_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapQuery_Response_SubmapTexture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapQuery_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapQuery_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5cartographer/mapping/proto/submap_visu"
  "alization.proto\022\032cartographer.mapping.pr"
  "oto\032,cartographer/transform/proto/transf"
  "orm.proto\"\225\002\n\nSubmapList\022O\n\ntrajectory\030\002"
  " \003(\0132;.cartographer.mapping.proto.Submap"
  "List.TrajectorySubmapList\032Z\n\013SubmapEntry"
  "\022\026\n\016submap_version\030\001 \001(\005\0223\n\004pose\030\003 \001(\0132%"
  ".cartographer.transform.proto.Rigid3d\032Z\n"
  "\024TrajectorySubmapList\022B\n\006submap\030\001 \003(\01322."
  "cartographer.mapping.proto.SubmapList.Su"
  "bmapEntry\"\350\003\n\013SubmapQuery\022@\n\007request\030\001 \001"
  "(\0132/.cartographer.mapping.proto.SubmapQu"
  "ery.Request\022B\n\010response\030\002 \001(\01320.cartogra"
  "pher.mapping.proto.SubmapQuery.Response\032"
  "6\n\007Request\022\024\n\014submap_index\030\001 \001(\005\022\025\n\rtraj"
  "ectory_id\030\002 \001(\005\032\232\002\n\010Response\022\026\n\016submap_v"
  "ersion\030\002 \001(\005\022P\n\010textures\030\n \003(\0132>.cartogr"
  "apher.mapping.proto.SubmapQuery.Response"
  ".SubmapTexture\022\025\n\rerror_message\030\010 \001(\t\032\214\001"
  "\n\rSubmapTexture\022\r\n\005cells\030\001 \001(\014\022\r\n\005width\030"
  "\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\022\n\nresolution\030\004 \001("
  "\001\0229\n\nslice_pose\030\005 \001(\0132%.cartographer.tra"
  "nsform.proto.Rigid3db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_sccs[7] = {
  &scc_info_SubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
  &scc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
  &scc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
  &scc_info_SubmapQuery_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
  &scc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
  &scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
  &scc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto, "cartographer/mapping/proto/submap_visualization.proto", 908,
  &descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto, 7, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void SubmapList_SubmapEntry::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_SubmapList_SubmapEntry_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class SubmapList_SubmapEntry::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const SubmapList_SubmapEntry* msg);
};

const ::cartographer::transform::proto::Rigid3d&
SubmapList_SubmapEntry::_Internal::pose(const SubmapList_SubmapEntry* msg) {
  return *msg->pose_;
}
void SubmapList_SubmapEntry::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
SubmapList_SubmapEntry::SubmapList_SubmapEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}
SubmapList_SubmapEntry::SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  submap_version_ = from.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

void SubmapList_SubmapEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_version_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(submap_version_));
}

SubmapList_SubmapEntry::~SubmapList_SubmapEntry() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
  SharedDtor();
}

void SubmapList_SubmapEntry::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void SubmapList_SubmapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapList_SubmapEntry& SubmapList_SubmapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapList_SubmapEntry_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapList_SubmapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  submap_version_ = 0;
  _internal_metadata_.Clear();
}

const char* SubmapList_SubmapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 submap_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          submap_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapList_SubmapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 1;
  if (this->submap_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_submap_version(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return target;
}

size_t SubmapList_SubmapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int32 submap_version = 1;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_submap_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapList_SubmapEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapList_SubmapEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapList_SubmapEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList.SubmapEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList.SubmapEntry)
    MergeFrom(*source);
  }
}

void SubmapList_SubmapEntry::MergeFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_pose());
  }
  if (from.submap_version() != 0) {
    _internal_set_submap_version(from._internal_submap_version());
  }
}

void SubmapList_SubmapEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_SubmapEntry::CopyFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_SubmapEntry::IsInitialized() const {
  return true;
}

void SubmapList_SubmapEntry::InternalSwap(SubmapList_SubmapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(submap_version_, other->submap_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapList_SubmapEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapList_TrajectorySubmapList::InitAsDefaultInstance() {
}
class SubmapList_TrajectorySubmapList::_Internal {
 public:
};

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}
SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      submap_(from.submap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

void SubmapList_TrajectorySubmapList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
}

SubmapList_TrajectorySubmapList::~SubmapList_TrajectorySubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  SharedDtor();
}

void SubmapList_TrajectorySubmapList::SharedDtor() {
}

void SubmapList_TrajectorySubmapList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapList_TrajectorySubmapList& SubmapList_TrajectorySubmapList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapList_TrajectorySubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapList_TrajectorySubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submap_.Clear();
  _internal_metadata_.Clear();
}

const char* SubmapList_TrajectorySubmapList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapList_TrajectorySubmapList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_submap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_submap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return target;
}

size_t SubmapList_TrajectorySubmapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  total_size += 1UL * this->_internal_submap_size();
  for (const auto& msg : this->submap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapList_TrajectorySubmapList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapList_TrajectorySubmapList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapList_TrajectorySubmapList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
    MergeFrom(*source);
  }
}

void SubmapList_TrajectorySubmapList::MergeFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submap_.MergeFrom(from.submap_);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_TrajectorySubmapList::IsInitialized() const {
  return true;
}

void SubmapList_TrajectorySubmapList::InternalSwap(SubmapList_TrajectorySubmapList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  submap_.InternalSwap(&other->submap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapList_TrajectorySubmapList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapList::InitAsDefaultInstance() {
}
class SubmapList::_Internal {
 public:
};

SubmapList::SubmapList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList)
}
SubmapList::SubmapList(const SubmapList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList)
}

void SubmapList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
}

SubmapList::~SubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList)
  SharedDtor();
}

void SubmapList::SharedDtor() {
}

void SubmapList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapList& SubmapList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapList_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  _internal_metadata_.Clear();
}

const char* SubmapList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList)
  return target;
}

size_t SubmapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList)
    MergeFrom(*source);
  }
}

void SubmapList::MergeFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void SubmapList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList::CopyFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList::IsInitialized() const {
  return true;
}

void SubmapList::InternalSwap(SubmapList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trajectory_.InternalSwap(&other->trajectory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapQuery_Request::InitAsDefaultInstance() {
}
class SubmapQuery_Request::_Internal {
 public:
};

SubmapQuery_Request::SubmapQuery_Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Request)
}
SubmapQuery_Request::SubmapQuery_Request(const SubmapQuery_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&submap_index_, &from.submap_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_id_) -
    reinterpret_cast<char*>(&submap_index_)) + sizeof(trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Request)
}

void SubmapQuery_Request::SharedCtor() {
  ::memset(&submap_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&submap_index_)) + sizeof(trajectory_id_));
}

SubmapQuery_Request::~SubmapQuery_Request() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Request)
  SharedDtor();
}

void SubmapQuery_Request::SharedDtor() {
}

void SubmapQuery_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapQuery_Request& SubmapQuery_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapQuery_Request_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapQuery_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&submap_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&submap_index_)) + sizeof(trajectory_id_));
  _internal_metadata_.Clear();
}

const char* SubmapQuery_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 submap_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          submap_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trajectory_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapQuery_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_index = 1;
  if (this->submap_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_submap_index(), target);
  }

  // int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Request)
  return target;
}

size_t SubmapQuery_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 submap_index = 1;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_submap_index());
  }

  // int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapQuery_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapQuery_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Request)
    MergeFrom(*source);
  }
}

void SubmapQuery_Request::MergeFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.submap_index() != 0) {
    _internal_set_submap_index(from._internal_submap_index());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void SubmapQuery_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Request::CopyFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Request::IsInitialized() const {
  return true;
}

void SubmapQuery_Request::InternalSwap(SubmapQuery_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_index_, other->submap_index_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapQuery_Response_SubmapTexture::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_SubmapQuery_Response_SubmapTexture_default_instance_._instance.get_mutable()->slice_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class SubmapQuery_Response_SubmapTexture::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& slice_pose(const SubmapQuery_Response_SubmapTexture* msg);
};

const ::cartographer::transform::proto::Rigid3d&
SubmapQuery_Response_SubmapTexture::_Internal::slice_pose(const SubmapQuery_Response_SubmapTexture* msg) {
  return *msg->slice_pose_;
}
void SubmapQuery_Response_SubmapTexture::clear_slice_pose() {
  if (GetArenaNoVirtual() == nullptr && slice_pose_ != nullptr) {
    delete slice_pose_;
  }
  slice_pose_ = nullptr;
}
SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}
SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture(const SubmapQuery_Response_SubmapTexture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cells_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cells().empty()) {
    cells_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cells_);
  }
  if (from._internal_has_slice_pose()) {
    slice_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.slice_pose_);
  } else {
    slice_pose_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&width_)) + sizeof(resolution_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

void SubmapQuery_Response_SubmapTexture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  cells_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&slice_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&slice_pose_)) + sizeof(resolution_));
}

SubmapQuery_Response_SubmapTexture::~SubmapQuery_Response_SubmapTexture() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  SharedDtor();
}

void SubmapQuery_Response_SubmapTexture::SharedDtor() {
  cells_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete slice_pose_;
}

void SubmapQuery_Response_SubmapTexture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapQuery_Response_SubmapTexture& SubmapQuery_Response_SubmapTexture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapQuery_Response_SubmapTexture_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapQuery_Response_SubmapTexture::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && slice_pose_ != nullptr) {
    delete slice_pose_;
  }
  slice_pose_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&width_)) + sizeof(resolution_));
  _internal_metadata_.Clear();
}

const char* SubmapQuery_Response_SubmapTexture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cells();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d slice_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapQuery_Response_SubmapTexture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cells = 1;
  if (this->cells().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cells(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // double resolution = 4;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_resolution(), target);
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::slice_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return target;
}

size_t SubmapQuery_Response_SubmapTexture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cells = 1;
  if (this->cells().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cells());
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slice_pose_);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // double resolution = 4;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapQuery_Response_SubmapTexture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery_Response_SubmapTexture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapQuery_Response_SubmapTexture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
    MergeFrom(*source);
  }
}

void SubmapQuery_Response_SubmapTexture::MergeFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cells().size() > 0) {

    cells_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cells_);
  }
  if (from.has_slice_pose()) {
    _internal_mutable_slice_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_slice_pose());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.resolution() <= 0 && from.resolution() >= 0)) {
    _internal_set_resolution(from._internal_resolution());
  }
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response_SubmapTexture::IsInitialized() const {
  return true;
}

void SubmapQuery_Response_SubmapTexture::InternalSwap(SubmapQuery_Response_SubmapTexture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cells_.Swap(&other->cells_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(slice_pose_, other->slice_pose_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(resolution_, other->resolution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery_Response_SubmapTexture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapQuery_Response::InitAsDefaultInstance() {
}
class SubmapQuery_Response::_Internal {
 public:
};

SubmapQuery_Response::SubmapQuery_Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Response)
}
SubmapQuery_Response::SubmapQuery_Response(const SubmapQuery_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      textures_(from.textures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  submap_version_ = from.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response)
}

void SubmapQuery_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submap_version_ = 0;
}

SubmapQuery_Response::~SubmapQuery_Response() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response)
  SharedDtor();
}

void SubmapQuery_Response::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmapQuery_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapQuery_Response& SubmapQuery_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapQuery_Response_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textures_.Clear();
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submap_version_ = 0;
  _internal_metadata_.Clear();
}

const char* SubmapQuery_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 submap_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          submap_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.mapping.proto.SubmapQuery.Response.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapQuery_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_version(), target);
  }

  // string error_message = 8;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SubmapQuery.Response.error_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_error_message(), target);
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_textures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_textures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response)
  return target;
}

size_t SubmapQuery_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  total_size += 1UL * this->_internal_textures_size();
  for (const auto& msg : this->textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 8;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_submap_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapQuery_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapQuery_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Response)
    MergeFrom(*source);
  }
}

void SubmapQuery_Response::MergeFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textures_.MergeFrom(from.textures_);
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.submap_version() != 0) {
    _internal_set_submap_version(from._internal_submap_version());
  }
}

void SubmapQuery_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response::CopyFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response::IsInitialized() const {
  return true;
}

void SubmapQuery_Response::InternalSwap(SubmapQuery_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  textures_.InternalSwap(&other->textures_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(submap_version_, other->submap_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmapQuery::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_SubmapQuery_default_instance_._instance.get_mutable()->request_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Request*>(
      ::cartographer::mapping::proto::SubmapQuery_Request::internal_default_instance());
  ::cartographer::mapping::proto::_SubmapQuery_default_instance_._instance.get_mutable()->response_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Response*>(
      ::cartographer::mapping::proto::SubmapQuery_Response::internal_default_instance());
}
class SubmapQuery::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapQuery_Request& request(const SubmapQuery* msg);
  static const ::cartographer::mapping::proto::SubmapQuery_Response& response(const SubmapQuery* msg);
};

const ::cartographer::mapping::proto::SubmapQuery_Request&
SubmapQuery::_Internal::request(const SubmapQuery* msg) {
  return *msg->request_;
}
const ::cartographer::mapping::proto::SubmapQuery_Response&
SubmapQuery::_Internal::response(const SubmapQuery* msg) {
  return *msg->response_;
}
SubmapQuery::SubmapQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery)
}
SubmapQuery::SubmapQuery(const SubmapQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::cartographer::mapping::proto::SubmapQuery_Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::cartographer::mapping::proto::SubmapQuery_Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery)
}

void SubmapQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmapQuery_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&request_)) + sizeof(response_));
}

SubmapQuery::~SubmapQuery() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery)
  SharedDtor();
}

void SubmapQuery::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void SubmapQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapQuery& SubmapQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmapQuery_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void SubmapQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SubmapQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery)
  return target;
}

size_t SubmapQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmapQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery)
    MergeFrom(*source);
  }
}

void SubmapQuery::MergeFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::cartographer::mapping::proto::SubmapQuery_Request::MergeFrom(from._internal_request());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::cartographer::mapping::proto::SubmapQuery_Response::MergeFrom(from._internal_response());
  }
}

void SubmapQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery::CopyFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery::IsInitialized() const {
  return true;
}

void SubmapQuery::InternalSwap(SubmapQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapList_SubmapEntry* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapList_SubmapEntry >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapList_SubmapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapList* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapList >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapList >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery_Request* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery_Request >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapQuery_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery_Response* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery_Response >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapQuery_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapQuery* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapQuery >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
