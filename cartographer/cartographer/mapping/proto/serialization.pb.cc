// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#include "cartographer/mapping/proto/serialization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Submap2D_cartographer_2fmapping_2fproto_2fsubmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Submap3D_cartographer_2fmapping_2fproto_2fsubmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaterniond_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class SubmapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Submap> _instance;
} _Submap_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class ImuDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuData> _instance;
} _ImuData_default_instance_;
class OdometryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdometryData> _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedFramePoseData> _instance;
} _FixedFramePoseData_default_instance_;
class LandmarkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkData> _instance;
} _LandmarkData_default_instance_;
class TrajectoryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryData> _instance;
} _TrajectoryData_default_instance_;
class LocalSlamResultDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalSlamResultData> _instance;
} _LocalSlamResultData_default_instance_;
class SerializationHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializationHeader> _instance;
} _SerializationHeader_default_instance_;
class SerializedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedData> _instance;
  const ::cartographer::mapping::proto::PoseGraph* pose_graph_;
  const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options_;
  const ::cartographer::mapping::proto::Submap* submap_;
  const ::cartographer::mapping::proto::Node* node_;
  const ::cartographer::mapping::proto::TrajectoryData* trajectory_data_;
  const ::cartographer::mapping::proto::ImuData* imu_data_;
  const ::cartographer::mapping::proto::OdometryData* odometry_data_;
  const ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
  const ::cartographer::mapping::proto::LandmarkData* landmark_data_;
} _SerializedData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_FixedFramePoseData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::FixedFramePoseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::FixedFramePoseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_ImuData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::ImuData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::ImuData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LandmarkData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LandmarkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LandmarkData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LocalSlamResultData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LocalSlamResultData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LocalSlamResultData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto.base,
      &scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

static void InitDefaultsscc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Node_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_OdometryData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::OdometryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::OdometryData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsscc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SerializationHeader_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SerializationHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SerializationHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {}};

static void InitDefaultsscc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SerializedData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SerializedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SerializedData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_PoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
      &scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

static void InitDefaultsscc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Submap_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Submap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Submap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_Submap2D_cartographer_2fmapping_2fproto_2fsubmap_2eproto.base,
      &scc_info_Submap3D_cartographer_2fmapping_2fproto_2fsubmap_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto}, {
      &scc_info_Quaterniond_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fserialization_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fserialization_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fserialization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap, submap_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap, submap_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Submap, submap_3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Node, node_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Node, node_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuData, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuData, imu_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::OdometryData, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::OdometryData, odometry_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::FixedFramePoseData, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::FixedFramePoseData, fixed_frame_pose_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LandmarkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LandmarkData, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LandmarkData, landmark_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryData, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryData, gravity_constant_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryData, imu_calibration_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryData, fixed_frame_origin_in_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalSlamResultData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalSlamResultData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalSlamResultData, node_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalSlamResultData, submaps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SerializationHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SerializationHeader, format_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SerializedData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SerializedData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, pose_graph_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, all_trajectory_builder_options_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, submap_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, node_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, trajectory_data_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, imu_data_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, odometry_data_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, fixed_frame_pose_data_),
  offsetof(::cartographer::mapping::proto::SerializedDataDefaultTypeInternal, landmark_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SerializedData, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::Submap)},
  { 8, -1, sizeof(::cartographer::mapping::proto::Node)},
  { 15, -1, sizeof(::cartographer::mapping::proto::ImuData)},
  { 22, -1, sizeof(::cartographer::mapping::proto::OdometryData)},
  { 29, -1, sizeof(::cartographer::mapping::proto::FixedFramePoseData)},
  { 36, -1, sizeof(::cartographer::mapping::proto::LandmarkData)},
  { 43, -1, sizeof(::cartographer::mapping::proto::TrajectoryData)},
  { 52, -1, sizeof(::cartographer::mapping::proto::LocalSlamResultData)},
  { 60, -1, sizeof(::cartographer::mapping::proto::SerializationHeader)},
  { 66, -1, sizeof(::cartographer::mapping::proto::SerializedData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_Submap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_ImuData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_OdometryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_FixedFramePoseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_LandmarkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TrajectoryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_LocalSlamResultData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SerializationHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SerializedData_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fserialization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.cartographer/mapping/proto/serializati"
  "on.proto\022\032cartographer.mapping.proto\032+ca"
  "rtographer/mapping/proto/pose_graph.prot"
  "o\032\'cartographer/mapping/proto/submap.pro"
  "to\0325cartographer/mapping/proto/trajector"
  "y_node_data.proto\032&cartographer/sensor/p"
  "roto/sensor.proto\032;cartographer/mapping/"
  "proto/trajectory_builder_options.proto\032,"
  "cartographer/transform/proto/transform.p"
  "roto\"\263\001\n\006Submap\0227\n\tsubmap_id\030\001 \001(\0132$.car"
  "tographer.mapping.proto.SubmapId\0227\n\tsubm"
  "ap_2d\030\002 \001(\0132$.cartographer.mapping.proto"
  ".Submap2D\0227\n\tsubmap_3d\030\003 \001(\0132$.cartograp"
  "her.mapping.proto.Submap3D\"~\n\004Node\0223\n\007no"
  "de_id\030\001 \001(\0132\".cartographer.mapping.proto"
  ".NodeId\022A\n\tnode_data\030\005 \001(\0132..cartographe"
  "r.mapping.proto.TrajectoryNodeData\"V\n\007Im"
  "uData\022\025\n\rtrajectory_id\030\001 \001(\005\0224\n\010imu_data"
  "\030\002 \001(\0132\".cartographer.sensor.proto.ImuDa"
  "ta\"e\n\014OdometryData\022\025\n\rtrajectory_id\030\001 \001("
  "\005\022>\n\rodometry_data\030\002 \001(\0132\'.cartographer."
  "sensor.proto.OdometryData\"y\n\022FixedFrameP"
  "oseData\022\025\n\rtrajectory_id\030\001 \001(\005\022L\n\025fixed_"
  "frame_pose_data\030\002 \001(\0132-.cartographer.sen"
  "sor.proto.FixedFramePoseData\"e\n\014Landmark"
  "Data\022\025\n\rtrajectory_id\030\001 \001(\005\022>\n\rlandmark_"
  "data\030\002 \001(\0132\'.cartographer.sensor.proto.L"
  "andmarkData\"\317\001\n\016TrajectoryData\022\025\n\rtrajec"
  "tory_id\030\001 \001(\005\022\030\n\020gravity_constant\030\002 \001(\001\022"
  "B\n\017imu_calibration\030\003 \001(\0132).cartographer."
  "transform.proto.Quaterniond\022H\n\031fixed_fra"
  "me_origin_in_map\030\004 \001(\0132%.cartographer.tr"
  "ansform.proto.Rigid3d\"\240\001\n\023LocalSlamResul"
  "tData\022\021\n\ttimestamp\030\001 \001(\003\022A\n\tnode_data\030\002 "
  "\001(\0132..cartographer.mapping.proto.Traject"
  "oryNodeData\0223\n\007submaps\030\003 \003(\0132\".cartograp"
  "her.mapping.proto.Submap\"-\n\023Serializatio"
  "nHeader\022\026\n\016format_version\030\001 \001(\r\"\367\004\n\016Seri"
  "alizedData\022;\n\npose_graph\030\001 \001(\0132%.cartogr"
  "apher.mapping.proto.PoseGraphH\000\022a\n\036all_t"
  "rajectory_builder_options\030\002 \001(\01327.cartog"
  "rapher.mapping.proto.AllTrajectoryBuilde"
  "rOptionsH\000\0224\n\006submap\030\003 \001(\0132\".cartographe"
  "r.mapping.proto.SubmapH\000\0220\n\004node\030\004 \001(\0132 "
  ".cartographer.mapping.proto.NodeH\000\022E\n\017tr"
  "ajectory_data\030\005 \001(\0132*.cartographer.mappi"
  "ng.proto.TrajectoryDataH\000\0227\n\010imu_data\030\006 "
  "\001(\0132#.cartographer.mapping.proto.ImuData"
  "H\000\022A\n\rodometry_data\030\007 \001(\0132(.cartographer"
  ".mapping.proto.OdometryDataH\000\022O\n\025fixed_f"
  "rame_pose_data\030\010 \001(\0132..cartographer.mapp"
  "ing.proto.FixedFramePoseDataH\000\022A\n\rlandma"
  "rk_data\030\t \001(\0132(.cartographer.mapping.pro"
  "to.LandmarkDataH\000B\006\n\004datab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_deps[6] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fsubmap_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto,
  &::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_sccs[10] = {
  &scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
  &scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fserialization_2eproto, "cartographer/mapping/proto/serialization.proto", 2153,
  &descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto_deps, 10, 6,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fserialization_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fserialization_2eproto, 10, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fserialization_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fserialization_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fserialization_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fserialization_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void Submap::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Submap_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  ::cartographer::mapping::proto::_Submap_default_instance_._instance.get_mutable()->submap_2d_ = const_cast< ::cartographer::mapping::proto::Submap2D*>(
      ::cartographer::mapping::proto::Submap2D::internal_default_instance());
  ::cartographer::mapping::proto::_Submap_default_instance_._instance.get_mutable()->submap_3d_ = const_cast< ::cartographer::mapping::proto::Submap3D*>(
      ::cartographer::mapping::proto::Submap3D::internal_default_instance());
}
class Submap::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapId& submap_id(const Submap* msg);
  static const ::cartographer::mapping::proto::Submap2D& submap_2d(const Submap* msg);
  static const ::cartographer::mapping::proto::Submap3D& submap_3d(const Submap* msg);
};

const ::cartographer::mapping::proto::SubmapId&
Submap::_Internal::submap_id(const Submap* msg) {
  return *msg->submap_id_;
}
const ::cartographer::mapping::proto::Submap2D&
Submap::_Internal::submap_2d(const Submap* msg) {
  return *msg->submap_2d_;
}
const ::cartographer::mapping::proto::Submap3D&
Submap::_Internal::submap_3d(const Submap* msg) {
  return *msg->submap_3d_;
}
void Submap::clear_submap_id() {
  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
}
void Submap::clear_submap_2d() {
  if (GetArenaNoVirtual() == nullptr && submap_2d_ != nullptr) {
    delete submap_2d_;
  }
  submap_2d_ = nullptr;
}
void Submap::clear_submap_3d() {
  if (GetArenaNoVirtual() == nullptr && submap_3d_ != nullptr) {
    delete submap_3d_;
  }
  submap_3d_ = nullptr;
}
Submap::Submap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Submap)
}
Submap::Submap(const Submap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = nullptr;
  }
  if (from._internal_has_submap_2d()) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D(*from.submap_2d_);
  } else {
    submap_2d_ = nullptr;
  }
  if (from._internal_has_submap_3d()) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D(*from.submap_3d_);
  } else {
    submap_3d_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap)
}

void Submap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_3d_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_3d_));
}

Submap::~Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap)
  SharedDtor();
}

void Submap::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete submap_2d_;
  if (this != internal_default_instance()) delete submap_3d_;
}

void Submap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Submap& Submap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && submap_2d_ != nullptr) {
    delete submap_2d_;
  }
  submap_2d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && submap_3d_ != nullptr) {
    delete submap_3d_;
  }
  submap_3d_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Submap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.Submap2D submap_2d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.Submap3D submap_3d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Submap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submap_id(this), target, stream);
  }

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submap_2d(this), target, stream);
  }

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submap_3d(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap)
  return target;
}

size_t Submap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_2d_);
  }

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_3d_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Submap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  const Submap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Submap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Submap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Submap)
    MergeFrom(*source);
  }
}

void Submap::MergeFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    _internal_mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from._internal_submap_id());
  }
  if (from.has_submap_2d()) {
    _internal_mutable_submap_2d()->::cartographer::mapping::proto::Submap2D::MergeFrom(from._internal_submap_2d());
  }
  if (from.has_submap_3d()) {
    _internal_mutable_submap_3d()->::cartographer::mapping::proto::Submap3D::MergeFrom(from._internal_submap_3d());
  }
}

void Submap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap::CopyFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap::IsInitialized() const {
  return true;
}

void Submap::InternalSwap(Submap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_id_, other->submap_id_);
  swap(submap_2d_, other->submap_2d_);
  swap(submap_3d_, other->submap_3d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Submap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Node_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
  ::cartographer::mapping::proto::_Node_default_instance_._instance.get_mutable()->node_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryNodeData*>(
      ::cartographer::mapping::proto::TrajectoryNodeData::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::cartographer::mapping::proto::NodeId& node_id(const Node* msg);
  static const ::cartographer::mapping::proto::TrajectoryNodeData& node_data(const Node* msg);
};

const ::cartographer::mapping::proto::NodeId&
Node::_Internal::node_id(const Node* msg) {
  return *msg->node_id_;
}
const ::cartographer::mapping::proto::TrajectoryNodeData&
Node::_Internal::node_data(const Node* msg) {
  return *msg->node_data_;
}
void Node::clear_node_id() {
  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
void Node::clear_node_data() {
  if (GetArenaNoVirtual() == nullptr && node_data_ != nullptr) {
    delete node_data_;
  }
  node_data_ = nullptr;
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from._internal_has_node_data()) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData(*from.node_data_);
  } else {
    node_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_data_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(node_data_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete node_data_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && node_data_ != nullptr) {
    delete node_data_;
  }
  node_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::node_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    _internal_mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from._internal_node_id());
  }
  if (from.has_node_data()) {
    _internal_mutable_node_data()->::cartographer::mapping::proto::TrajectoryNodeData::MergeFrom(from._internal_node_data());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
  swap(node_data_, other->node_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_ImuData_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(
      ::cartographer::sensor::proto::ImuData::internal_default_instance());
}
class ImuData::_Internal {
 public:
  static const ::cartographer::sensor::proto::ImuData& imu_data(const ImuData* msg);
};

const ::cartographer::sensor::proto::ImuData&
ImuData::_Internal::imu_data(const ImuData* msg) {
  return *msg->imu_data_;
}
void ImuData::clear_imu_data() {
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
}
ImuData::ImuData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_imu_data()) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = nullptr;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ImuData)
}

void ImuData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&imu_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&imu_data_)) + sizeof(trajectory_id_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete imu_data_;
}

void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuData& ImuData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ImuData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.ImuData imu_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::imu_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ImuData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ImuData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu_data()) {
    _internal_mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from._internal_imu_data());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void ImuData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(imu_data_, other->imu_data_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OdometryData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_OdometryData_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(
      ::cartographer::sensor::proto::OdometryData::internal_default_instance());
}
class OdometryData::_Internal {
 public:
  static const ::cartographer::sensor::proto::OdometryData& odometry_data(const OdometryData* msg);
};

const ::cartographer::sensor::proto::OdometryData&
OdometryData::_Internal::odometry_data(const OdometryData* msg) {
  return *msg->odometry_data_;
}
void OdometryData::clear_odometry_data() {
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
}
OdometryData::OdometryData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_odometry_data()) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = nullptr;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&odometry_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&odometry_data_)) + sizeof(trajectory_id_));
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete odometry_data_;
}

void OdometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdometryData& OdometryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.OdometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* OdometryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdometryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.OdometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::odometry_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.OdometryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.OdometryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_odometry_data()) {
    _internal_mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from._internal_odometry_data());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void OdometryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(odometry_data_, other->odometry_data_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedFramePoseData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_FixedFramePoseData_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(
      ::cartographer::sensor::proto::FixedFramePoseData::internal_default_instance());
}
class FixedFramePoseData::_Internal {
 public:
  static const ::cartographer::sensor::proto::FixedFramePoseData& fixed_frame_pose_data(const FixedFramePoseData* msg);
};

const ::cartographer::sensor::proto::FixedFramePoseData&
FixedFramePoseData::_Internal::fixed_frame_pose_data(const FixedFramePoseData* msg) {
  return *msg->fixed_frame_pose_data_;
}
void FixedFramePoseData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
}
FixedFramePoseData::FixedFramePoseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = nullptr;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&fixed_frame_pose_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&fixed_frame_pose_data_)) + sizeof(trajectory_id_));
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedFramePoseData& FixedFramePoseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.FixedFramePoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* FixedFramePoseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_frame_pose_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedFramePoseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.FixedFramePoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fixed_frame_pose_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.FixedFramePoseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fixed_frame_pose_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedFramePoseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.FixedFramePoseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fixed_frame_pose_data()) {
    _internal_mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from._internal_fixed_frame_pose_data());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void FixedFramePoseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedFramePoseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LandmarkData_default_instance_._instance.get_mutable()->landmark_data_ = const_cast< ::cartographer::sensor::proto::LandmarkData*>(
      ::cartographer::sensor::proto::LandmarkData::internal_default_instance());
}
class LandmarkData::_Internal {
 public:
  static const ::cartographer::sensor::proto::LandmarkData& landmark_data(const LandmarkData* msg);
};

const ::cartographer::sensor::proto::LandmarkData&
LandmarkData::_Internal::landmark_data(const LandmarkData* msg) {
  return *msg->landmark_data_;
}
void LandmarkData::clear_landmark_data() {
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
}
LandmarkData::LandmarkData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LandmarkData)
}
LandmarkData::LandmarkData(const LandmarkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_landmark_data()) {
    landmark_data_ = new ::cartographer::sensor::proto::LandmarkData(*from.landmark_data_);
  } else {
    landmark_data_ = nullptr;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&landmark_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&landmark_data_)) + sizeof(trajectory_id_));
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
  if (this != internal_default_instance()) delete landmark_data_;
}

void LandmarkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkData& LandmarkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LandmarkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* LandmarkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LandmarkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::landmark_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LandmarkData)
  return target;
}

size_t LandmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LandmarkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landmark_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LandmarkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_landmark_data()) {
    _internal_mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from._internal_landmark_data());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void LandmarkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {
  return true;
}

void LandmarkData::InternalSwap(LandmarkData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(landmark_data_, other->landmark_data_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TrajectoryData_default_instance_._instance.get_mutable()->imu_calibration_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(
      ::cartographer::transform::proto::Quaterniond::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryData_default_instance_._instance.get_mutable()->fixed_frame_origin_in_map_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class TrajectoryData::_Internal {
 public:
  static const ::cartographer::transform::proto::Quaterniond& imu_calibration(const TrajectoryData* msg);
  static const ::cartographer::transform::proto::Rigid3d& fixed_frame_origin_in_map(const TrajectoryData* msg);
};

const ::cartographer::transform::proto::Quaterniond&
TrajectoryData::_Internal::imu_calibration(const TrajectoryData* msg) {
  return *msg->imu_calibration_;
}
const ::cartographer::transform::proto::Rigid3d&
TrajectoryData::_Internal::fixed_frame_origin_in_map(const TrajectoryData* msg) {
  return *msg->fixed_frame_origin_in_map_;
}
void TrajectoryData::clear_imu_calibration() {
  if (GetArenaNoVirtual() == nullptr && imu_calibration_ != nullptr) {
    delete imu_calibration_;
  }
  imu_calibration_ = nullptr;
}
void TrajectoryData::clear_fixed_frame_origin_in_map() {
  if (GetArenaNoVirtual() == nullptr && fixed_frame_origin_in_map_ != nullptr) {
    delete fixed_frame_origin_in_map_;
  }
  fixed_frame_origin_in_map_ = nullptr;
}
TrajectoryData::TrajectoryData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryData)
}
TrajectoryData::TrajectoryData(const TrajectoryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_imu_calibration()) {
    imu_calibration_ = new ::cartographer::transform::proto::Quaterniond(*from.imu_calibration_);
  } else {
    imu_calibration_ = nullptr;
  }
  if (from._internal_has_fixed_frame_origin_in_map()) {
    fixed_frame_origin_in_map_ = new ::cartographer::transform::proto::Rigid3d(*from.fixed_frame_origin_in_map_);
  } else {
    fixed_frame_origin_in_map_ = nullptr;
  }
  ::memcpy(&gravity_constant_, &from.gravity_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_id_) -
    reinterpret_cast<char*>(&gravity_constant_)) + sizeof(trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryData)
}

void TrajectoryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&imu_calibration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&imu_calibration_)) + sizeof(trajectory_id_));
}

TrajectoryData::~TrajectoryData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryData)
  SharedDtor();
}

void TrajectoryData::SharedDtor() {
  if (this != internal_default_instance()) delete imu_calibration_;
  if (this != internal_default_instance()) delete fixed_frame_origin_in_map_;
}

void TrajectoryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryData& TrajectoryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && imu_calibration_ != nullptr) {
    delete imu_calibration_;
  }
  imu_calibration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fixed_frame_origin_in_map_ != nullptr) {
    delete fixed_frame_origin_in_map_;
  }
  fixed_frame_origin_in_map_ = nullptr;
  ::memset(&gravity_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&gravity_constant_)) + sizeof(trajectory_id_));
  _internal_metadata_.Clear();
}

const char* TrajectoryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gravity_constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          gravity_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Quaterniond imu_calibration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_calibration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_frame_origin_in_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // double gravity_constant = 2;
  if (!(this->gravity_constant() <= 0 && this->gravity_constant() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gravity_constant(), target);
  }

  // .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  if (this->has_imu_calibration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::imu_calibration(this), target, stream);
  }

  // .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  if (this->has_fixed_frame_origin_in_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fixed_frame_origin_in_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryData)
  return target;
}

size_t TrajectoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  if (this->has_imu_calibration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_calibration_);
  }

  // .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  if (this->has_fixed_frame_origin_in_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fixed_frame_origin_in_map_);
  }

  // double gravity_constant = 2;
  if (!(this->gravity_constant() <= 0 && this->gravity_constant() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryData)
    MergeFrom(*source);
  }
}

void TrajectoryData::MergeFrom(const TrajectoryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu_calibration()) {
    _internal_mutable_imu_calibration()->::cartographer::transform::proto::Quaterniond::MergeFrom(from._internal_imu_calibration());
  }
  if (from.has_fixed_frame_origin_in_map()) {
    _internal_mutable_fixed_frame_origin_in_map()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_fixed_frame_origin_in_map());
  }
  if (!(from.gravity_constant() <= 0 && from.gravity_constant() >= 0)) {
    _internal_set_gravity_constant(from._internal_gravity_constant());
  }
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void TrajectoryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryData::CopyFrom(const TrajectoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryData::IsInitialized() const {
  return true;
}

void TrajectoryData::InternalSwap(TrajectoryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(imu_calibration_, other->imu_calibration_);
  swap(fixed_frame_origin_in_map_, other->fixed_frame_origin_in_map_);
  swap(gravity_constant_, other->gravity_constant_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalSlamResultData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LocalSlamResultData_default_instance_._instance.get_mutable()->node_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryNodeData*>(
      ::cartographer::mapping::proto::TrajectoryNodeData::internal_default_instance());
}
class LocalSlamResultData::_Internal {
 public:
  static const ::cartographer::mapping::proto::TrajectoryNodeData& node_data(const LocalSlamResultData* msg);
};

const ::cartographer::mapping::proto::TrajectoryNodeData&
LocalSlamResultData::_Internal::node_data(const LocalSlamResultData* msg) {
  return *msg->node_data_;
}
void LocalSlamResultData::clear_node_data() {
  if (GetArenaNoVirtual() == nullptr && node_data_ != nullptr) {
    delete node_data_;
  }
  node_data_ = nullptr;
}
LocalSlamResultData::LocalSlamResultData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalSlamResultData)
}
LocalSlamResultData::LocalSlamResultData(const LocalSlamResultData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      submaps_(from.submaps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node_data()) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData(*from.node_data_);
  } else {
    node_data_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalSlamResultData)
}

void LocalSlamResultData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  ::memset(&node_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&node_data_)) + sizeof(timestamp_));
}

LocalSlamResultData::~LocalSlamResultData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalSlamResultData)
  SharedDtor();
}

void LocalSlamResultData::SharedDtor() {
  if (this != internal_default_instance()) delete node_data_;
}

void LocalSlamResultData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalSlamResultData& LocalSlamResultData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalSlamResultData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void LocalSlamResultData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalSlamResultData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submaps_.Clear();
  if (GetArenaNoVirtual() == nullptr && node_data_ != nullptr) {
    delete node_data_;
  }
  node_data_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LocalSlamResultData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.Submap submaps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalSlamResultData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalSlamResultData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  if (this->has_node_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node_data(this), target, stream);
  }

  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_submaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_submaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalSlamResultData)
  return target;
}

size_t LocalSlamResultData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalSlamResultData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  total_size += 1UL * this->_internal_submaps_size();
  for (const auto& msg : this->submaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  if (this->has_node_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_data_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalSlamResultData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalSlamResultData)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalSlamResultData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalSlamResultData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalSlamResultData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalSlamResultData)
    MergeFrom(*source);
  }
}

void LocalSlamResultData::MergeFrom(const LocalSlamResultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalSlamResultData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submaps_.MergeFrom(from.submaps_);
  if (from.has_node_data()) {
    _internal_mutable_node_data()->::cartographer::mapping::proto::TrajectoryNodeData::MergeFrom(from._internal_node_data());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void LocalSlamResultData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalSlamResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSlamResultData::CopyFrom(const LocalSlamResultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalSlamResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSlamResultData::IsInitialized() const {
  return true;
}

void LocalSlamResultData::InternalSwap(LocalSlamResultData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  submaps_.InternalSwap(&other->submaps_);
  swap(node_data_, other->node_data_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalSlamResultData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializationHeader::InitAsDefaultInstance() {
}
class SerializationHeader::_Internal {
 public:
};

SerializationHeader::SerializationHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SerializationHeader)
}
SerializationHeader::SerializationHeader(const SerializationHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_version_ = from.format_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SerializationHeader)
}

void SerializationHeader::SharedCtor() {
  format_version_ = 0u;
}

SerializationHeader::~SerializationHeader() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SerializationHeader)
  SharedDtor();
}

void SerializationHeader::SharedDtor() {
}

void SerializationHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializationHeader& SerializationHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializationHeader_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void SerializationHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SerializationHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_version_ = 0u;
  _internal_metadata_.Clear();
}

const char* SerializationHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 format_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          format_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializationHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SerializationHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 format_version = 1;
  if (this->format_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SerializationHeader)
  return target;
}

size_t SerializationHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SerializationHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 format_version = 1;
  if (this->format_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_format_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializationHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SerializationHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializationHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializationHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SerializationHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SerializationHeader)
    MergeFrom(*source);
  }
}

void SerializationHeader::MergeFrom(const SerializationHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SerializationHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format_version() != 0) {
    _internal_set_format_version(from._internal_format_version());
  }
}

void SerializationHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SerializationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializationHeader::CopyFrom(const SerializationHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SerializationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializationHeader::IsInitialized() const {
  return true;
}

void SerializationHeader::InternalSwap(SerializationHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(format_version_, other->format_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializationHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_SerializedData_default_instance_.pose_graph_ = const_cast< ::cartographer::mapping::proto::PoseGraph*>(
      ::cartographer::mapping::proto::PoseGraph::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.all_trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions*>(
      ::cartographer::mapping::proto::AllTrajectoryBuilderOptions::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(
      ::cartographer::mapping::proto::Submap::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.node_ = const_cast< ::cartographer::mapping::proto::Node*>(
      ::cartographer::mapping::proto::Node::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.trajectory_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryData*>(
      ::cartographer::mapping::proto::TrajectoryData::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(
      ::cartographer::mapping::proto::ImuData::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(
      ::cartographer::mapping::proto::OdometryData::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(
      ::cartographer::mapping::proto::FixedFramePoseData::internal_default_instance());
  ::cartographer::mapping::proto::_SerializedData_default_instance_.landmark_data_ = const_cast< ::cartographer::mapping::proto::LandmarkData*>(
      ::cartographer::mapping::proto::LandmarkData::internal_default_instance());
}
class SerializedData::_Internal {
 public:
  static const ::cartographer::mapping::proto::PoseGraph& pose_graph(const SerializedData* msg);
  static const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions& all_trajectory_builder_options(const SerializedData* msg);
  static const ::cartographer::mapping::proto::Submap& submap(const SerializedData* msg);
  static const ::cartographer::mapping::proto::Node& node(const SerializedData* msg);
  static const ::cartographer::mapping::proto::TrajectoryData& trajectory_data(const SerializedData* msg);
  static const ::cartographer::mapping::proto::ImuData& imu_data(const SerializedData* msg);
  static const ::cartographer::mapping::proto::OdometryData& odometry_data(const SerializedData* msg);
  static const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data(const SerializedData* msg);
  static const ::cartographer::mapping::proto::LandmarkData& landmark_data(const SerializedData* msg);
};

const ::cartographer::mapping::proto::PoseGraph&
SerializedData::_Internal::pose_graph(const SerializedData* msg) {
  return *msg->data_.pose_graph_;
}
const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions&
SerializedData::_Internal::all_trajectory_builder_options(const SerializedData* msg) {
  return *msg->data_.all_trajectory_builder_options_;
}
const ::cartographer::mapping::proto::Submap&
SerializedData::_Internal::submap(const SerializedData* msg) {
  return *msg->data_.submap_;
}
const ::cartographer::mapping::proto::Node&
SerializedData::_Internal::node(const SerializedData* msg) {
  return *msg->data_.node_;
}
const ::cartographer::mapping::proto::TrajectoryData&
SerializedData::_Internal::trajectory_data(const SerializedData* msg) {
  return *msg->data_.trajectory_data_;
}
const ::cartographer::mapping::proto::ImuData&
SerializedData::_Internal::imu_data(const SerializedData* msg) {
  return *msg->data_.imu_data_;
}
const ::cartographer::mapping::proto::OdometryData&
SerializedData::_Internal::odometry_data(const SerializedData* msg) {
  return *msg->data_.odometry_data_;
}
const ::cartographer::mapping::proto::FixedFramePoseData&
SerializedData::_Internal::fixed_frame_pose_data(const SerializedData* msg) {
  return *msg->data_.fixed_frame_pose_data_;
}
const ::cartographer::mapping::proto::LandmarkData&
SerializedData::_Internal::landmark_data(const SerializedData* msg) {
  return *msg->data_.landmark_data_;
}
void SerializedData::set_allocated_pose_graph(::cartographer::mapping::proto::PoseGraph* pose_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (pose_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_graph, submessage_arena);
    }
    set_has_pose_graph();
    data_.pose_graph_ = pose_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.pose_graph)
}
void SerializedData::clear_pose_graph() {
  if (_internal_has_pose_graph()) {
    delete data_.pose_graph_;
    clear_has_data();
  }
}
void SerializedData::set_allocated_all_trajectory_builder_options(::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (all_trajectory_builder_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      all_trajectory_builder_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_trajectory_builder_options, submessage_arena);
    }
    set_has_all_trajectory_builder_options();
    data_.all_trajectory_builder_options_ = all_trajectory_builder_options;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
}
void SerializedData::clear_all_trajectory_builder_options() {
  if (_internal_has_all_trajectory_builder_options()) {
    delete data_.all_trajectory_builder_options_;
    clear_has_data();
  }
}
void SerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (submap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      submap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    set_has_submap();
    data_.submap_ = submap;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}
void SerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    data_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.node)
}
void SerializedData::set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (trajectory_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_data, submessage_arena);
    }
    set_has_trajectory_data();
    data_.trajectory_data_ = trajectory_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.trajectory_data)
}
void SerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (imu_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imu_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    set_has_imu_data();
    data_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.imu_data)
}
void SerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (odometry_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      odometry_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry_data, submessage_arena);
    }
    set_has_odometry_data();
    data_.odometry_data_ = odometry_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.odometry_data)
}
void SerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (fixed_frame_pose_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_frame_pose_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_frame_pose_data, submessage_arena);
    }
    set_has_fixed_frame_pose_data();
    data_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
}
void SerializedData::set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (landmark_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      landmark_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_data, submessage_arena);
    }
    set_has_landmark_data();
    data_.landmark_data_ = landmark_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.landmark_data)
}
SerializedData::SerializedData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SerializedData)
}
SerializedData::SerializedData(const SerializedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPoseGraph: {
      _internal_mutable_pose_graph()->::cartographer::mapping::proto::PoseGraph::MergeFrom(from._internal_pose_graph());
      break;
    }
    case kAllTrajectoryBuilderOptions: {
      _internal_mutable_all_trajectory_builder_options()->::cartographer::mapping::proto::AllTrajectoryBuilderOptions::MergeFrom(from._internal_all_trajectory_builder_options());
      break;
    }
    case kSubmap: {
      _internal_mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from._internal_submap());
      break;
    }
    case kNode: {
      _internal_mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from._internal_node());
      break;
    }
    case kTrajectoryData: {
      _internal_mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from._internal_trajectory_data());
      break;
    }
    case kImuData: {
      _internal_mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from._internal_imu_data());
      break;
    }
    case kOdometryData: {
      _internal_mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from._internal_odometry_data());
      break;
    }
    case kFixedFramePoseData: {
      _internal_mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from._internal_fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      _internal_mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from._internal_landmark_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SerializedData)
}

void SerializedData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  clear_has_data();
}

SerializedData::~SerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SerializedData)
  SharedDtor();
}

void SerializedData::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void SerializedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedData& SerializedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base);
  return *internal_default_instance();
}


void SerializedData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.mapping.proto.SerializedData)
  switch (data_case()) {
    case kPoseGraph: {
      delete data_.pose_graph_;
      break;
    }
    case kAllTrajectoryBuilderOptions: {
      delete data_.all_trajectory_builder_options_;
      break;
    }
    case kSubmap: {
      delete data_.submap_;
      break;
    }
    case kNode: {
      delete data_.node_;
      break;
    }
    case kTrajectoryData: {
      delete data_.trajectory_data_;
      break;
    }
    case kImuData: {
      delete data_.imu_data_;
      break;
    }
    case kOdometryData: {
      delete data_.odometry_data_;
      break;
    }
    case kFixedFramePoseData: {
      delete data_.fixed_frame_pose_data_;
      break;
    }
    case kLandmarkData: {
      delete data_.landmark_data_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SerializedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear();
}

const char* SerializedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.PoseGraph pose_graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_trajectory_builder_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.Submap submap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.Node node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.ImuData imu_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.OdometryData odometry_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_frame_pose_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.LandmarkData landmark_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SerializedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraph pose_graph = 1;
  if (_internal_has_pose_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose_graph(this), target, stream);
  }

  // .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
  if (_internal_has_all_trajectory_builder_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::all_trajectory_builder_options(this), target, stream);
  }

  // .cartographer.mapping.proto.Submap submap = 3;
  if (_internal_has_submap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submap(this), target, stream);
  }

  // .cartographer.mapping.proto.Node node = 4;
  if (_internal_has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::node(this), target, stream);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
  if (_internal_has_trajectory_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trajectory_data(this), target, stream);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 6;
  if (_internal_has_imu_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::imu_data(this), target, stream);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 7;
  if (_internal_has_odometry_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::odometry_data(this), target, stream);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
  if (_internal_has_fixed_frame_pose_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fixed_frame_pose_data(this), target, stream);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 9;
  if (_internal_has_landmark_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::landmark_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SerializedData)
  return target;
}

size_t SerializedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SerializedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .cartographer.mapping.proto.PoseGraph pose_graph = 1;
    case kPoseGraph: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.pose_graph_);
      break;
    }
    // .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
    case kAllTrajectoryBuilderOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.all_trajectory_builder_options_);
      break;
    }
    // .cartographer.mapping.proto.Submap submap = 3;
    case kSubmap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.submap_);
      break;
    }
    // .cartographer.mapping.proto.Node node = 4;
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.node_);
      break;
    }
    // .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
    case kTrajectoryData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.trajectory_data_);
      break;
    }
    // .cartographer.mapping.proto.ImuData imu_data = 6;
    case kImuData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.imu_data_);
      break;
    }
    // .cartographer.mapping.proto.OdometryData odometry_data = 7;
    case kOdometryData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.odometry_data_);
      break;
    }
    // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
    case kFixedFramePoseData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.fixed_frame_pose_data_);
      break;
    }
    // .cartographer.mapping.proto.LandmarkData landmark_data = 9;
    case kLandmarkData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.landmark_data_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SerializedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SerializedData)
    MergeFrom(*source);
  }
}

void SerializedData::MergeFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPoseGraph: {
      _internal_mutable_pose_graph()->::cartographer::mapping::proto::PoseGraph::MergeFrom(from._internal_pose_graph());
      break;
    }
    case kAllTrajectoryBuilderOptions: {
      _internal_mutable_all_trajectory_builder_options()->::cartographer::mapping::proto::AllTrajectoryBuilderOptions::MergeFrom(from._internal_all_trajectory_builder_options());
      break;
    }
    case kSubmap: {
      _internal_mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from._internal_submap());
      break;
    }
    case kNode: {
      _internal_mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from._internal_node());
      break;
    }
    case kTrajectoryData: {
      _internal_mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from._internal_trajectory_data());
      break;
    }
    case kImuData: {
      _internal_mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from._internal_imu_data());
      break;
    }
    case kOdometryData: {
      _internal_mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from._internal_odometry_data());
      break;
    }
    case kFixedFramePoseData: {
      _internal_mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from._internal_fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      _internal_mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from._internal_landmark_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void SerializedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedData::CopyFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedData::IsInitialized() const {
  return true;
}

void SerializedData::InternalSwap(SerializedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Submap* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Submap >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Submap >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Node* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Node >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::ImuData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::ImuData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::OdometryData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::OdometryData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::OdometryData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::FixedFramePoseData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::FixedFramePoseData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::FixedFramePoseData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LandmarkData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LandmarkData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LandmarkData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LocalSlamResultData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LocalSlamResultData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LocalSlamResultData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SerializationHeader* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SerializationHeader >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SerializationHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SerializedData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SerializedData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SerializedData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
