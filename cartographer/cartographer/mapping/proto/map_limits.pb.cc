// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_limits.proto

#include "cartographer/mapping/proto/map_limits.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fcell_5flimits_5f2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellLimits_cartographer_2fmapping_2fproto_2fcell_5flimits_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class MapLimitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapLimits> _instance;
} _MapLimits_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_MapLimits_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_MapLimits_default_instance_;
    new (ptr) ::cartographer::mapping::proto::MapLimits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::MapLimits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapLimits_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapLimits_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto}, {
      &scc_info_Vector2d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_CellLimits_cartographer_2fmapping_2fproto_2fcell_5flimits_5f2d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, resolution_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, max_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, cell_limits_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::MapLimits)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_MapLimits_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+cartographer/mapping/proto/map_limits."
  "proto\022\032cartographer.mapping.proto\032/carto"
  "grapher/mapping/proto/cell_limits_2d.pro"
  "to\032,cartographer/transform/proto/transfo"
  "rm.proto\"\221\001\n\tMapLimits\022\022\n\nresolution\030\001 \001"
  "(\001\0223\n\003max\030\002 \001(\0132&.cartographer.transform"
  ".proto.Vector2d\022;\n\013cell_limits\030\003 \001(\0132&.c"
  "artographer.mapping.proto.CellLimitsb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_deps[2] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fcell_5flimits_5f2d_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_sccs[1] = {
  &scc_info_MapLimits_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto, "cartographer/mapping/proto/map_limits.proto", 324,
  &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void MapLimits::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_MapLimits_default_instance_._instance.get_mutable()->max_ = const_cast< ::cartographer::transform::proto::Vector2d*>(
      ::cartographer::transform::proto::Vector2d::internal_default_instance());
  ::cartographer::mapping::proto::_MapLimits_default_instance_._instance.get_mutable()->cell_limits_ = const_cast< ::cartographer::mapping::proto::CellLimits*>(
      ::cartographer::mapping::proto::CellLimits::internal_default_instance());
}
class MapLimits::_Internal {
 public:
  static const ::cartographer::transform::proto::Vector2d& max(const MapLimits* msg);
  static const ::cartographer::mapping::proto::CellLimits& cell_limits(const MapLimits* msg);
};

const ::cartographer::transform::proto::Vector2d&
MapLimits::_Internal::max(const MapLimits* msg) {
  return *msg->max_;
}
const ::cartographer::mapping::proto::CellLimits&
MapLimits::_Internal::cell_limits(const MapLimits* msg) {
  return *msg->cell_limits_;
}
void MapLimits::clear_max() {
  if (GetArenaNoVirtual() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
void MapLimits::clear_cell_limits() {
  if (GetArenaNoVirtual() == nullptr && cell_limits_ != nullptr) {
    delete cell_limits_;
  }
  cell_limits_ = nullptr;
}
MapLimits::MapLimits()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.MapLimits)
}
MapLimits::MapLimits(const MapLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_max()) {
    max_ = new ::cartographer::transform::proto::Vector2d(*from.max_);
  } else {
    max_ = nullptr;
  }
  if (from._internal_has_cell_limits()) {
    cell_limits_ = new ::cartographer::mapping::proto::CellLimits(*from.cell_limits_);
  } else {
    cell_limits_ = nullptr;
  }
  resolution_ = from.resolution_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapLimits)
}

void MapLimits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapLimits_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto.base);
  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&max_)) + sizeof(resolution_));
}

MapLimits::~MapLimits() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapLimits)
  SharedDtor();
}

void MapLimits::SharedDtor() {
  if (this != internal_default_instance()) delete max_;
  if (this != internal_default_instance()) delete cell_limits_;
}

void MapLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapLimits& MapLimits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapLimits_cartographer_2fmapping_2fproto_2fmap_5flimits_2eproto.base);
  return *internal_default_instance();
}


void MapLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cell_limits_ != nullptr) {
    delete cell_limits_;
  }
  cell_limits_ = nullptr;
  resolution_ = 0;
  _internal_metadata_.Clear();
}

const char* MapLimits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Vector2d max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.CellLimits cell_limits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapLimits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_resolution(), target);
  }

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max(this), target, stream);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_limits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapLimits)
  return target;
}

size_t MapLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapLimits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_limits_);
  }

  // double resolution = 1;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLimits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.MapLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLimits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapLimits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.MapLimits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.MapLimits)
    MergeFrom(*source);
  }
}

void MapLimits::MergeFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max()) {
    _internal_mutable_max()->::cartographer::transform::proto::Vector2d::MergeFrom(from._internal_max());
  }
  if (from.has_cell_limits()) {
    _internal_mutable_cell_limits()->::cartographer::mapping::proto::CellLimits::MergeFrom(from._internal_cell_limits());
  }
  if (!(from.resolution() <= 0 && from.resolution() >= 0)) {
    _internal_set_resolution(from._internal_resolution());
  }
}

void MapLimits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLimits::CopyFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLimits::IsInitialized() const {
  return true;
}

void MapLimits::InternalSwap(MapLimits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_, other->max_);
  swap(cell_limits_, other->cell_limits_);
  swap(resolution_, other->resolution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapLimits::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::MapLimits* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::MapLimits >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::MapLimits >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
