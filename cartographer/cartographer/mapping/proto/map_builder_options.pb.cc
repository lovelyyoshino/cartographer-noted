// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_builder_options.proto

#include "cartographer/mapping/proto/map_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class MapBuilderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapBuilderOptions> _instance;
} _MapBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_MapBuilderOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::MapBuilderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::MapBuilderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto}, {
      &scc_info_PoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, use_trajectory_builder_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, use_trajectory_builder_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, num_background_threads_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, pose_graph_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, collate_by_trajectory_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::MapBuilderOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_MapBuilderOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4cartographer/mapping/proto/map_builder"
  "_options.proto\022\032cartographer.mapping.pro"
  "to\0323cartographer/mapping/proto/pose_grap"
  "h_options.proto\"\342\001\n\021MapBuilderOptions\022!\n"
  "\031use_trajectory_builder_2d\030\001 \001(\010\022!\n\031use_"
  "trajectory_builder_3d\030\002 \001(\010\022\036\n\026num_backg"
  "round_threads\030\003 \001(\005\022H\n\022pose_graph_option"
  "s\030\004 \001(\0132,.cartographer.mapping.proto.Pos"
  "eGraphOptions\022\035\n\025collate_by_trajectory\030\005"
  " \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_sccs[1] = {
  &scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto, "cartographer/mapping/proto/map_builder_options.proto", 372,
  &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void MapBuilderOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_MapBuilderOptions_default_instance_._instance.get_mutable()->pose_graph_options_ = const_cast< ::cartographer::mapping::proto::PoseGraphOptions*>(
      ::cartographer::mapping::proto::PoseGraphOptions::internal_default_instance());
}
class MapBuilderOptions::_Internal {
 public:
  static const ::cartographer::mapping::proto::PoseGraphOptions& pose_graph_options(const MapBuilderOptions* msg);
};

const ::cartographer::mapping::proto::PoseGraphOptions&
MapBuilderOptions::_Internal::pose_graph_options(const MapBuilderOptions* msg) {
  return *msg->pose_graph_options_;
}
void MapBuilderOptions::clear_pose_graph_options() {
  if (GetArenaNoVirtual() == nullptr && pose_graph_options_ != nullptr) {
    delete pose_graph_options_;
  }
  pose_graph_options_ = nullptr;
}
MapBuilderOptions::MapBuilderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.MapBuilderOptions)
}
MapBuilderOptions::MapBuilderOptions(const MapBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose_graph_options()) {
    pose_graph_options_ = new ::cartographer::mapping::proto::PoseGraphOptions(*from.pose_graph_options_);
  } else {
    pose_graph_options_ = nullptr;
  }
  ::memcpy(&use_trajectory_builder_2d_, &from.use_trajectory_builder_2d_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_background_threads_) -
    reinterpret_cast<char*>(&use_trajectory_builder_2d_)) + sizeof(num_background_threads_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapBuilderOptions)
}

void MapBuilderOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto.base);
  ::memset(&pose_graph_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_background_threads_) -
      reinterpret_cast<char*>(&pose_graph_options_)) + sizeof(num_background_threads_));
}

MapBuilderOptions::~MapBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapBuilderOptions)
  SharedDtor();
}

void MapBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete pose_graph_options_;
}

void MapBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapBuilderOptions& MapBuilderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void MapBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_graph_options_ != nullptr) {
    delete pose_graph_options_;
  }
  pose_graph_options_ = nullptr;
  ::memset(&use_trajectory_builder_2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_background_threads_) -
      reinterpret_cast<char*>(&use_trajectory_builder_2d_)) + sizeof(num_background_threads_));
  _internal_metadata_.Clear();
}

const char* MapBuilderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_trajectory_builder_2d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_trajectory_builder_2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_trajectory_builder_3d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_trajectory_builder_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_background_threads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_background_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_graph_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool collate_by_trajectory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          collate_by_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapBuilderOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_trajectory_builder_2d = 1;
  if (this->use_trajectory_builder_2d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_trajectory_builder_2d(), target);
  }

  // bool use_trajectory_builder_3d = 2;
  if (this->use_trajectory_builder_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_trajectory_builder_3d(), target);
  }

  // int32 num_background_threads = 3;
  if (this->num_background_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_background_threads(), target);
  }

  // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->has_pose_graph_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose_graph_options(this), target, stream);
  }

  // bool collate_by_trajectory = 5;
  if (this->collate_by_trajectory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_collate_by_trajectory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapBuilderOptions)
  return target;
}

size_t MapBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapBuilderOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->has_pose_graph_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_graph_options_);
  }

  // bool use_trajectory_builder_2d = 1;
  if (this->use_trajectory_builder_2d() != 0) {
    total_size += 1 + 1;
  }

  // bool use_trajectory_builder_3d = 2;
  if (this->use_trajectory_builder_3d() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_by_trajectory = 5;
  if (this->collate_by_trajectory() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_background_threads = 3;
  if (this->num_background_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_background_threads());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBuilderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.MapBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBuilderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.MapBuilderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.MapBuilderOptions)
    MergeFrom(*source);
  }
}

void MapBuilderOptions::MergeFrom(const MapBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose_graph_options()) {
    _internal_mutable_pose_graph_options()->::cartographer::mapping::proto::PoseGraphOptions::MergeFrom(from._internal_pose_graph_options());
  }
  if (from.use_trajectory_builder_2d() != 0) {
    _internal_set_use_trajectory_builder_2d(from._internal_use_trajectory_builder_2d());
  }
  if (from.use_trajectory_builder_3d() != 0) {
    _internal_set_use_trajectory_builder_3d(from._internal_use_trajectory_builder_3d());
  }
  if (from.collate_by_trajectory() != 0) {
    _internal_set_collate_by_trajectory(from._internal_collate_by_trajectory());
  }
  if (from.num_background_threads() != 0) {
    _internal_set_num_background_threads(from._internal_num_background_threads());
  }
}

void MapBuilderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBuilderOptions::CopyFrom(const MapBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBuilderOptions::IsInitialized() const {
  return true;
}

void MapBuilderOptions::InternalSwap(MapBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_graph_options_, other->pose_graph_options_);
  swap(use_trajectory_builder_2d_, other->use_trajectory_builder_2d_);
  swap(use_trajectory_builder_3d_, other->use_trajectory_builder_3d_);
  swap(collate_by_trajectory_, other->collate_by_trajectory_);
  swap(num_background_threads_, other->num_background_threads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapBuilderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::MapBuilderOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::MapBuilderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::MapBuilderOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
