// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/tsdf_2d.proto

#include "cartographer/mapping/proto/tsdf_2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cartographer {
namespace mapping {
namespace proto {
class TSDF2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TSDF2D> _instance;
} _TSDF2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_TSDF2D_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TSDF2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TSDF2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TSDF2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSDF2D_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TSDF2D_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TSDF2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TSDF2D, truncation_distance_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TSDF2D, max_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TSDF2D, weight_cells_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::TSDF2D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TSDF2D_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(cartographer/mapping/proto/tsdf_2d.pro"
  "to\022\032cartographer.mapping.proto\"O\n\006TSDF2D"
  "\022\033\n\023truncation_distance\030\001 \001(\002\022\022\n\nmax_wei"
  "ght\030\002 \001(\002\022\024\n\014weight_cells\030\003 \003(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_sccs[1] = {
  &scc_info_TSDF2D_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto, "cartographer/mapping/proto/tsdf_2d.proto", 159,
  &descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void TSDF2D::InitAsDefaultInstance() {
}
class TSDF2D::_Internal {
 public:
};

TSDF2D::TSDF2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TSDF2D)
}
TSDF2D::TSDF2D(const TSDF2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      weight_cells_(from.weight_cells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&truncation_distance_, &from.truncation_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_weight_) -
    reinterpret_cast<char*>(&truncation_distance_)) + sizeof(max_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TSDF2D)
}

void TSDF2D::SharedCtor() {
  ::memset(&truncation_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_weight_) -
      reinterpret_cast<char*>(&truncation_distance_)) + sizeof(max_weight_));
}

TSDF2D::~TSDF2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TSDF2D)
  SharedDtor();
}

void TSDF2D::SharedDtor() {
}

void TSDF2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TSDF2D& TSDF2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TSDF2D_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto.base);
  return *internal_default_instance();
}


void TSDF2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TSDF2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_cells_.Clear();
  ::memset(&truncation_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_weight_) -
      reinterpret_cast<char*>(&truncation_distance_)) + sizeof(max_weight_));
  _internal_metadata_.Clear();
}

const char* TSDF2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float truncation_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          truncation_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 weight_cells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weight_cells(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_weight_cells(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TSDF2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TSDF2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float truncation_distance = 1;
  if (!(this->truncation_distance() <= 0 && this->truncation_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_truncation_distance(), target);
  }

  // float max_weight = 2;
  if (!(this->max_weight() <= 0 && this->max_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_weight(), target);
  }

  // repeated int32 weight_cells = 3;
  {
    int byte_size = _weight_cells_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_weight_cells(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TSDF2D)
  return target;
}

size_t TSDF2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TSDF2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 weight_cells = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->weight_cells_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weight_cells_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float truncation_distance = 1;
  if (!(this->truncation_distance() <= 0 && this->truncation_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_weight = 2;
  if (!(this->max_weight() <= 0 && this->max_weight() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TSDF2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TSDF2D)
  GOOGLE_DCHECK_NE(&from, this);
  const TSDF2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TSDF2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TSDF2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TSDF2D)
    MergeFrom(*source);
  }
}

void TSDF2D::MergeFrom(const TSDF2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TSDF2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_cells_.MergeFrom(from.weight_cells_);
  if (!(from.truncation_distance() <= 0 && from.truncation_distance() >= 0)) {
    _internal_set_truncation_distance(from._internal_truncation_distance());
  }
  if (!(from.max_weight() <= 0 && from.max_weight() >= 0)) {
    _internal_set_max_weight(from._internal_max_weight());
  }
}

void TSDF2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TSDF2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSDF2D::CopyFrom(const TSDF2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TSDF2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSDF2D::IsInitialized() const {
  return true;
}

void TSDF2D::InternalSwap(TSDF2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  weight_cells_.InternalSwap(&other->weight_cells_);
  swap(truncation_distance_, other->truncation_distance_);
  swap(max_weight_, other->max_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSDF2D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TSDF2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TSDF2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TSDF2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
