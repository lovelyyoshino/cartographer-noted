// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_node_data.proto

#include "cartographer/mapping/proto/trajectory_node_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaterniond_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class TrajectoryNodeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryNodeData> _instance;
} _TrajectoryNodeData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryNodeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryNodeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto}, {
      &scc_info_Quaterniond_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, gravity_alignment_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, filtered_gravity_aligned_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, high_resolution_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, low_resolution_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, rotational_scan_matcher_histogram_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, local_pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::TrajectoryNodeData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5cartographer/mapping/proto/trajectory_"
  "node_data.proto\022\032cartographer.mapping.pr"
  "oto\032&cartographer/sensor/proto/sensor.pr"
  "oto\032,cartographer/transform/proto/transf"
  "orm.proto\"\335\003\n\022TrajectoryNodeData\022\021\n\ttime"
  "stamp\030\001 \001(\003\022D\n\021gravity_alignment\030\002 \001(\0132)"
  ".cartographer.transform.proto.Quaternion"
  "d\022]\n$filtered_gravity_aligned_point_clou"
  "d\030\003 \001(\0132/.cartographer.sensor.proto.Comp"
  "ressedPointCloud\022T\n\033high_resolution_poin"
  "t_cloud\030\004 \001(\0132/.cartographer.sensor.prot"
  "o.CompressedPointCloud\022S\n\032low_resolution"
  "_point_cloud\030\005 \001(\0132/.cartographer.sensor"
  ".proto.CompressedPointCloud\022)\n!rotationa"
  "l_scan_matcher_histogram\030\006 \003(\002\0229\n\nlocal_"
  "pose\030\007 \001(\0132%.cartographer.transform.prot"
  "o.Rigid3db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_deps[2] = {
  &::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_sccs[1] = {
  &scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto, "cartographer/mapping/proto/trajectory_node_data.proto", 657,
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void TrajectoryNodeData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_._instance.get_mutable()->gravity_alignment_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(
      ::cartographer::transform::proto::Quaterniond::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_._instance.get_mutable()->filtered_gravity_aligned_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_._instance.get_mutable()->high_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_._instance.get_mutable()->low_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class TrajectoryNodeData::_Internal {
 public:
  static const ::cartographer::transform::proto::Quaterniond& gravity_alignment(const TrajectoryNodeData* msg);
  static const ::cartographer::sensor::proto::CompressedPointCloud& filtered_gravity_aligned_point_cloud(const TrajectoryNodeData* msg);
  static const ::cartographer::sensor::proto::CompressedPointCloud& high_resolution_point_cloud(const TrajectoryNodeData* msg);
  static const ::cartographer::sensor::proto::CompressedPointCloud& low_resolution_point_cloud(const TrajectoryNodeData* msg);
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const TrajectoryNodeData* msg);
};

const ::cartographer::transform::proto::Quaterniond&
TrajectoryNodeData::_Internal::gravity_alignment(const TrajectoryNodeData* msg) {
  return *msg->gravity_alignment_;
}
const ::cartographer::sensor::proto::CompressedPointCloud&
TrajectoryNodeData::_Internal::filtered_gravity_aligned_point_cloud(const TrajectoryNodeData* msg) {
  return *msg->filtered_gravity_aligned_point_cloud_;
}
const ::cartographer::sensor::proto::CompressedPointCloud&
TrajectoryNodeData::_Internal::high_resolution_point_cloud(const TrajectoryNodeData* msg) {
  return *msg->high_resolution_point_cloud_;
}
const ::cartographer::sensor::proto::CompressedPointCloud&
TrajectoryNodeData::_Internal::low_resolution_point_cloud(const TrajectoryNodeData* msg) {
  return *msg->low_resolution_point_cloud_;
}
const ::cartographer::transform::proto::Rigid3d&
TrajectoryNodeData::_Internal::local_pose(const TrajectoryNodeData* msg) {
  return *msg->local_pose_;
}
void TrajectoryNodeData::clear_gravity_alignment() {
  if (GetArenaNoVirtual() == nullptr && gravity_alignment_ != nullptr) {
    delete gravity_alignment_;
  }
  gravity_alignment_ = nullptr;
}
void TrajectoryNodeData::clear_filtered_gravity_aligned_point_cloud() {
  if (GetArenaNoVirtual() == nullptr && filtered_gravity_aligned_point_cloud_ != nullptr) {
    delete filtered_gravity_aligned_point_cloud_;
  }
  filtered_gravity_aligned_point_cloud_ = nullptr;
}
void TrajectoryNodeData::clear_high_resolution_point_cloud() {
  if (GetArenaNoVirtual() == nullptr && high_resolution_point_cloud_ != nullptr) {
    delete high_resolution_point_cloud_;
  }
  high_resolution_point_cloud_ = nullptr;
}
void TrajectoryNodeData::clear_low_resolution_point_cloud() {
  if (GetArenaNoVirtual() == nullptr && low_resolution_point_cloud_ != nullptr) {
    delete low_resolution_point_cloud_;
  }
  low_resolution_point_cloud_ = nullptr;
}
void TrajectoryNodeData::clear_local_pose() {
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
TrajectoryNodeData::TrajectoryNodeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryNodeData)
}
TrajectoryNodeData::TrajectoryNodeData(const TrajectoryNodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rotational_scan_matcher_histogram_(from.rotational_scan_matcher_histogram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_gravity_alignment()) {
    gravity_alignment_ = new ::cartographer::transform::proto::Quaterniond(*from.gravity_alignment_);
  } else {
    gravity_alignment_ = nullptr;
  }
  if (from._internal_has_filtered_gravity_aligned_point_cloud()) {
    filtered_gravity_aligned_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.filtered_gravity_aligned_point_cloud_);
  } else {
    filtered_gravity_aligned_point_cloud_ = nullptr;
  }
  if (from._internal_has_high_resolution_point_cloud()) {
    high_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.high_resolution_point_cloud_);
  } else {
    high_resolution_point_cloud_ = nullptr;
  }
  if (from._internal_has_low_resolution_point_cloud()) {
    low_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.low_resolution_point_cloud_);
  } else {
    low_resolution_point_cloud_ = nullptr;
  }
  if (from._internal_has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryNodeData)
}

void TrajectoryNodeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto.base);
  ::memset(&gravity_alignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&gravity_alignment_)) + sizeof(timestamp_));
}

TrajectoryNodeData::~TrajectoryNodeData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryNodeData)
  SharedDtor();
}

void TrajectoryNodeData::SharedDtor() {
  if (this != internal_default_instance()) delete gravity_alignment_;
  if (this != internal_default_instance()) delete filtered_gravity_aligned_point_cloud_;
  if (this != internal_default_instance()) delete high_resolution_point_cloud_;
  if (this != internal_default_instance()) delete low_resolution_point_cloud_;
  if (this != internal_default_instance()) delete local_pose_;
}

void TrajectoryNodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryNodeData& TrajectoryNodeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryNodeData_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotational_scan_matcher_histogram_.Clear();
  if (GetArenaNoVirtual() == nullptr && gravity_alignment_ != nullptr) {
    delete gravity_alignment_;
  }
  gravity_alignment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && filtered_gravity_aligned_point_cloud_ != nullptr) {
    delete filtered_gravity_aligned_point_cloud_;
  }
  filtered_gravity_aligned_point_cloud_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_resolution_point_cloud_ != nullptr) {
    delete high_resolution_point_cloud_;
  }
  high_resolution_point_cloud_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_resolution_point_cloud_ != nullptr) {
    delete low_resolution_point_cloud_;
  }
  low_resolution_point_cloud_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TrajectoryNodeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gravity_alignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtered_gravity_aligned_point_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_resolution_point_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_resolution_point_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rotational_scan_matcher_histogram = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotational_scan_matcher_histogram(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_rotational_scan_matcher_histogram(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d local_pose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryNodeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->has_gravity_alignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gravity_alignment(this), target, stream);
  }

  // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->has_filtered_gravity_aligned_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filtered_gravity_aligned_point_cloud(this), target, stream);
  }

  // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->has_high_resolution_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::high_resolution_point_cloud(this), target, stream);
  }

  // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->has_low_resolution_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::low_resolution_point_cloud(this), target, stream);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  if (this->_internal_rotational_scan_matcher_histogram_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rotational_scan_matcher_histogram(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->has_local_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryNodeData)
  return target;
}

size_t TrajectoryNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryNodeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rotational_scan_matcher_histogram = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotational_scan_matcher_histogram_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotational_scan_matcher_histogram_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->has_gravity_alignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gravity_alignment_);
  }

  // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->has_filtered_gravity_aligned_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filtered_gravity_aligned_point_cloud_);
  }

  // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->has_high_resolution_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_resolution_point_cloud_);
  }

  // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->has_low_resolution_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_resolution_point_cloud_);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryNodeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryNodeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryNodeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryNodeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryNodeData)
    MergeFrom(*source);
  }
}

void TrajectoryNodeData::MergeFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotational_scan_matcher_histogram_.MergeFrom(from.rotational_scan_matcher_histogram_);
  if (from.has_gravity_alignment()) {
    _internal_mutable_gravity_alignment()->::cartographer::transform::proto::Quaterniond::MergeFrom(from._internal_gravity_alignment());
  }
  if (from.has_filtered_gravity_aligned_point_cloud()) {
    _internal_mutable_filtered_gravity_aligned_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from._internal_filtered_gravity_aligned_point_cloud());
  }
  if (from.has_high_resolution_point_cloud()) {
    _internal_mutable_high_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from._internal_high_resolution_point_cloud());
  }
  if (from.has_low_resolution_point_cloud()) {
    _internal_mutable_low_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from._internal_low_resolution_point_cloud());
  }
  if (from.has_local_pose()) {
    _internal_mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_local_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TrajectoryNodeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodeData::CopyFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodeData::IsInitialized() const {
  return true;
}

void TrajectoryNodeData::InternalSwap(TrajectoryNodeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rotational_scan_matcher_histogram_.InternalSwap(&other->rotational_scan_matcher_histogram_);
  swap(gravity_alignment_, other->gravity_alignment_);
  swap(filtered_gravity_aligned_point_cloud_, other->filtered_gravity_aligned_point_cloud_);
  swap(high_resolution_point_cloud_, other->high_resolution_point_cloud_);
  swap(low_resolution_point_cloud_, other->low_resolution_point_cloud_);
  swap(local_pose_, other->local_pose_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryNodeData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryNodeData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryNodeData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryNodeData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
