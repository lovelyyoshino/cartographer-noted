// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_extrapolator_options.proto

#include "cartographer/mapping/proto/pose_extrapolator_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class ConstantVelocityPoseExtrapolatorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantVelocityPoseExtrapolatorOptions> _instance;
} _ConstantVelocityPoseExtrapolatorOptions_default_instance_;
class ImuBasedPoseExtrapolatorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuBasedPoseExtrapolatorOptions> _instance;
} _ImuBasedPoseExtrapolatorOptions_default_instance_;
class PoseExtrapolatorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseExtrapolatorOptions> _instance;
} _PoseExtrapolatorOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_ConstantVelocityPoseExtrapolatorOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto}, {}};

static void InitDefaultsscc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto}, {
      &scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseExtrapolatorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseExtrapolatorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto}, {
      &scc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base,
      &scc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions, imu_gravity_time_constant_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions, pose_queue_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, pose_queue_duration_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, gravity_constant_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, imu_acceleration_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, imu_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, solver_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, odometry_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, odometry_rotation_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, use_imu_based_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, constant_velocity_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, imu_based_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions)},
  { 7, -1, sizeof(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions)},
  { 21, -1, sizeof(::cartographer::mapping::proto::PoseExtrapolatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_ConstantVelocityPoseExtrapolatorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:cartographer/mapping/proto/pose_extrap"
  "olator_options.proto\022\032cartographer.mappi"
  "ng.proto\0324cartographer/common/proto/cere"
  "s_solver_options.proto\"i\n\'ConstantVeloci"
  "tyPoseExtrapolatorOptions\022!\n\031imu_gravity"
  "_time_constant\030\001 \001(\001\022\033\n\023pose_queue_durat"
  "ion\030\002 \001(\001\"\343\002\n\037ImuBasedPoseExtrapolatorOp"
  "tions\022\033\n\023pose_queue_duration\030\001 \001(\001\022\030\n\020gr"
  "avity_constant\030\002 \001(\001\022\037\n\027pose_translation"
  "_weight\030\003 \001(\001\022\034\n\024pose_rotation_weight\030\004 "
  "\001(\001\022\037\n\027imu_acceleration_weight\030\005 \001(\001\022\033\n\023"
  "imu_rotation_weight\030\006 \001(\001\022E\n\016solver_opti"
  "ons\030\007 \001(\0132-.cartographer.common.proto.Ce"
  "resSolverOptions\022#\n\033odometry_translation"
  "_weight\030\010 \001(\001\022 \n\030odometry_rotation_weigh"
  "t\030\t \001(\001\"\340\001\n\027PoseExtrapolatorOptions\022\025\n\ru"
  "se_imu_based\030\001 \001(\010\022^\n\021constant_velocity\030"
  "\002 \001(\0132C.cartographer.mapping.proto.Const"
  "antVelocityPoseExtrapolatorOptions\022N\n\tim"
  "u_based\030\003 \001(\0132;.cartographer.mapping.pro"
  "to.ImuBasedPoseExtrapolatorOptionsb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_sccs[3] = {
  &scc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base,
  &scc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base,
  &scc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto, "cartographer/mapping/proto/pose_extrapolator_options.proto", 842,
  &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto, 3, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void ConstantVelocityPoseExtrapolatorOptions::InitAsDefaultInstance() {
}
class ConstantVelocityPoseExtrapolatorOptions::_Internal {
 public:
};

ConstantVelocityPoseExtrapolatorOptions::ConstantVelocityPoseExtrapolatorOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}
ConstantVelocityPoseExtrapolatorOptions::ConstantVelocityPoseExtrapolatorOptions(const ConstantVelocityPoseExtrapolatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&imu_gravity_time_constant_, &from.imu_gravity_time_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&pose_queue_duration_) -
    reinterpret_cast<char*>(&imu_gravity_time_constant_)) + sizeof(pose_queue_duration_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}

void ConstantVelocityPoseExtrapolatorOptions::SharedCtor() {
  ::memset(&imu_gravity_time_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_queue_duration_) -
      reinterpret_cast<char*>(&imu_gravity_time_constant_)) + sizeof(pose_queue_duration_));
}

ConstantVelocityPoseExtrapolatorOptions::~ConstantVelocityPoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  SharedDtor();
}

void ConstantVelocityPoseExtrapolatorOptions::SharedDtor() {
}

void ConstantVelocityPoseExtrapolatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantVelocityPoseExtrapolatorOptions& ConstantVelocityPoseExtrapolatorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantVelocityPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base);
  return *internal_default_instance();
}


void ConstantVelocityPoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&imu_gravity_time_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_queue_duration_) -
      reinterpret_cast<char*>(&imu_gravity_time_constant_)) + sizeof(pose_queue_duration_));
  _internal_metadata_.Clear();
}

const char* ConstantVelocityPoseExtrapolatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double imu_gravity_time_constant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          imu_gravity_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pose_queue_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pose_queue_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantVelocityPoseExtrapolatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double imu_gravity_time_constant = 1;
  if (!(this->imu_gravity_time_constant() <= 0 && this->imu_gravity_time_constant() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_imu_gravity_time_constant(), target);
  }

  // double pose_queue_duration = 2;
  if (!(this->pose_queue_duration() <= 0 && this->pose_queue_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pose_queue_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return target;
}

size_t ConstantVelocityPoseExtrapolatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double imu_gravity_time_constant = 1;
  if (!(this->imu_gravity_time_constant() <= 0 && this->imu_gravity_time_constant() >= 0)) {
    total_size += 1 + 8;
  }

  // double pose_queue_duration = 2;
  if (!(this->pose_queue_duration() <= 0 && this->pose_queue_duration() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantVelocityPoseExtrapolatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantVelocityPoseExtrapolatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantVelocityPoseExtrapolatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void ConstantVelocityPoseExtrapolatorOptions::MergeFrom(const ConstantVelocityPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.imu_gravity_time_constant() <= 0 && from.imu_gravity_time_constant() >= 0)) {
    _internal_set_imu_gravity_time_constant(from._internal_imu_gravity_time_constant());
  }
  if (!(from.pose_queue_duration() <= 0 && from.pose_queue_duration() >= 0)) {
    _internal_set_pose_queue_duration(from._internal_pose_queue_duration());
  }
}

void ConstantVelocityPoseExtrapolatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantVelocityPoseExtrapolatorOptions::CopyFrom(const ConstantVelocityPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantVelocityPoseExtrapolatorOptions::IsInitialized() const {
  return true;
}

void ConstantVelocityPoseExtrapolatorOptions::InternalSwap(ConstantVelocityPoseExtrapolatorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(pose_queue_duration_, other->pose_queue_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantVelocityPoseExtrapolatorOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuBasedPoseExtrapolatorOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_._instance.get_mutable()->solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(
      ::cartographer::common::proto::CeresSolverOptions::internal_default_instance());
}
class ImuBasedPoseExtrapolatorOptions::_Internal {
 public:
  static const ::cartographer::common::proto::CeresSolverOptions& solver_options(const ImuBasedPoseExtrapolatorOptions* msg);
};

const ::cartographer::common::proto::CeresSolverOptions&
ImuBasedPoseExtrapolatorOptions::_Internal::solver_options(const ImuBasedPoseExtrapolatorOptions* msg) {
  return *msg->solver_options_;
}
void ImuBasedPoseExtrapolatorOptions::clear_solver_options() {
  if (GetArenaNoVirtual() == nullptr && solver_options_ != nullptr) {
    delete solver_options_;
  }
  solver_options_ = nullptr;
}
ImuBasedPoseExtrapolatorOptions::ImuBasedPoseExtrapolatorOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}
ImuBasedPoseExtrapolatorOptions::ImuBasedPoseExtrapolatorOptions(const ImuBasedPoseExtrapolatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_solver_options()) {
    solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from.solver_options_);
  } else {
    solver_options_ = nullptr;
  }
  ::memcpy(&pose_queue_duration_, &from.pose_queue_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&odometry_rotation_weight_) -
    reinterpret_cast<char*>(&pose_queue_duration_)) + sizeof(odometry_rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}

void ImuBasedPoseExtrapolatorOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base);
  ::memset(&solver_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_rotation_weight_) -
      reinterpret_cast<char*>(&solver_options_)) + sizeof(odometry_rotation_weight_));
}

ImuBasedPoseExtrapolatorOptions::~ImuBasedPoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  SharedDtor();
}

void ImuBasedPoseExtrapolatorOptions::SharedDtor() {
  if (this != internal_default_instance()) delete solver_options_;
}

void ImuBasedPoseExtrapolatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuBasedPoseExtrapolatorOptions& ImuBasedPoseExtrapolatorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuBasedPoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base);
  return *internal_default_instance();
}


void ImuBasedPoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && solver_options_ != nullptr) {
    delete solver_options_;
  }
  solver_options_ = nullptr;
  ::memset(&pose_queue_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_rotation_weight_) -
      reinterpret_cast<char*>(&pose_queue_duration_)) + sizeof(odometry_rotation_weight_));
  _internal_metadata_.Clear();
}

const char* ImuBasedPoseExtrapolatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double pose_queue_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          pose_queue_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gravity_constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          gravity_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pose_translation_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pose_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pose_rotation_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          pose_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double imu_acceleration_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          imu_acceleration_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double imu_rotation_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          imu_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double odometry_translation_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          odometry_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double odometry_rotation_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          odometry_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuBasedPoseExtrapolatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pose_queue_duration = 1;
  if (!(this->pose_queue_duration() <= 0 && this->pose_queue_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pose_queue_duration(), target);
  }

  // double gravity_constant = 2;
  if (!(this->gravity_constant() <= 0 && this->gravity_constant() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gravity_constant(), target);
  }

  // double pose_translation_weight = 3;
  if (!(this->pose_translation_weight() <= 0 && this->pose_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pose_translation_weight(), target);
  }

  // double pose_rotation_weight = 4;
  if (!(this->pose_rotation_weight() <= 0 && this->pose_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pose_rotation_weight(), target);
  }

  // double imu_acceleration_weight = 5;
  if (!(this->imu_acceleration_weight() <= 0 && this->imu_acceleration_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_imu_acceleration_weight(), target);
  }

  // double imu_rotation_weight = 6;
  if (!(this->imu_rotation_weight() <= 0 && this->imu_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_imu_rotation_weight(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::solver_options(this), target, stream);
  }

  // double odometry_translation_weight = 8;
  if (!(this->odometry_translation_weight() <= 0 && this->odometry_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_odometry_translation_weight(), target);
  }

  // double odometry_rotation_weight = 9;
  if (!(this->odometry_rotation_weight() <= 0 && this->odometry_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_odometry_rotation_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return target;
}

size_t ImuBasedPoseExtrapolatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solver_options_);
  }

  // double pose_queue_duration = 1;
  if (!(this->pose_queue_duration() <= 0 && this->pose_queue_duration() >= 0)) {
    total_size += 1 + 8;
  }

  // double gravity_constant = 2;
  if (!(this->gravity_constant() <= 0 && this->gravity_constant() >= 0)) {
    total_size += 1 + 8;
  }

  // double pose_translation_weight = 3;
  if (!(this->pose_translation_weight() <= 0 && this->pose_translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double pose_rotation_weight = 4;
  if (!(this->pose_rotation_weight() <= 0 && this->pose_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double imu_acceleration_weight = 5;
  if (!(this->imu_acceleration_weight() <= 0 && this->imu_acceleration_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double imu_rotation_weight = 6;
  if (!(this->imu_rotation_weight() <= 0 && this->imu_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double odometry_translation_weight = 8;
  if (!(this->odometry_translation_weight() <= 0 && this->odometry_translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double odometry_rotation_weight = 9;
  if (!(this->odometry_rotation_weight() <= 0 && this->odometry_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuBasedPoseExtrapolatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuBasedPoseExtrapolatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuBasedPoseExtrapolatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void ImuBasedPoseExtrapolatorOptions::MergeFrom(const ImuBasedPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_options()) {
    _internal_mutable_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from._internal_solver_options());
  }
  if (!(from.pose_queue_duration() <= 0 && from.pose_queue_duration() >= 0)) {
    _internal_set_pose_queue_duration(from._internal_pose_queue_duration());
  }
  if (!(from.gravity_constant() <= 0 && from.gravity_constant() >= 0)) {
    _internal_set_gravity_constant(from._internal_gravity_constant());
  }
  if (!(from.pose_translation_weight() <= 0 && from.pose_translation_weight() >= 0)) {
    _internal_set_pose_translation_weight(from._internal_pose_translation_weight());
  }
  if (!(from.pose_rotation_weight() <= 0 && from.pose_rotation_weight() >= 0)) {
    _internal_set_pose_rotation_weight(from._internal_pose_rotation_weight());
  }
  if (!(from.imu_acceleration_weight() <= 0 && from.imu_acceleration_weight() >= 0)) {
    _internal_set_imu_acceleration_weight(from._internal_imu_acceleration_weight());
  }
  if (!(from.imu_rotation_weight() <= 0 && from.imu_rotation_weight() >= 0)) {
    _internal_set_imu_rotation_weight(from._internal_imu_rotation_weight());
  }
  if (!(from.odometry_translation_weight() <= 0 && from.odometry_translation_weight() >= 0)) {
    _internal_set_odometry_translation_weight(from._internal_odometry_translation_weight());
  }
  if (!(from.odometry_rotation_weight() <= 0 && from.odometry_rotation_weight() >= 0)) {
    _internal_set_odometry_rotation_weight(from._internal_odometry_rotation_weight());
  }
}

void ImuBasedPoseExtrapolatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuBasedPoseExtrapolatorOptions::CopyFrom(const ImuBasedPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuBasedPoseExtrapolatorOptions::IsInitialized() const {
  return true;
}

void ImuBasedPoseExtrapolatorOptions::InternalSwap(ImuBasedPoseExtrapolatorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(solver_options_, other->solver_options_);
  swap(pose_queue_duration_, other->pose_queue_duration_);
  swap(gravity_constant_, other->gravity_constant_);
  swap(pose_translation_weight_, other->pose_translation_weight_);
  swap(pose_rotation_weight_, other->pose_rotation_weight_);
  swap(imu_acceleration_weight_, other->imu_acceleration_weight_);
  swap(imu_rotation_weight_, other->imu_rotation_weight_);
  swap(odometry_translation_weight_, other->odometry_translation_weight_);
  swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuBasedPoseExtrapolatorOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseExtrapolatorOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_._instance.get_mutable()->constant_velocity_ = const_cast< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions*>(
      ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::internal_default_instance());
  ::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_._instance.get_mutable()->imu_based_ = const_cast< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions*>(
      ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::internal_default_instance());
}
class PoseExtrapolatorOptions::_Internal {
 public:
  static const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& constant_velocity(const PoseExtrapolatorOptions* msg);
  static const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& imu_based(const PoseExtrapolatorOptions* msg);
};

const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions&
PoseExtrapolatorOptions::_Internal::constant_velocity(const PoseExtrapolatorOptions* msg) {
  return *msg->constant_velocity_;
}
const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions&
PoseExtrapolatorOptions::_Internal::imu_based(const PoseExtrapolatorOptions* msg) {
  return *msg->imu_based_;
}
PoseExtrapolatorOptions::PoseExtrapolatorOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
}
PoseExtrapolatorOptions::PoseExtrapolatorOptions(const PoseExtrapolatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_constant_velocity()) {
    constant_velocity_ = new ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions(*from.constant_velocity_);
  } else {
    constant_velocity_ = nullptr;
  }
  if (from._internal_has_imu_based()) {
    imu_based_ = new ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions(*from.imu_based_);
  } else {
    imu_based_ = nullptr;
  }
  use_imu_based_ = from.use_imu_based_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
}

void PoseExtrapolatorOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base);
  ::memset(&constant_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_imu_based_) -
      reinterpret_cast<char*>(&constant_velocity_)) + sizeof(use_imu_based_));
}

PoseExtrapolatorOptions::~PoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
  SharedDtor();
}

void PoseExtrapolatorOptions::SharedDtor() {
  if (this != internal_default_instance()) delete constant_velocity_;
  if (this != internal_default_instance()) delete imu_based_;
}

void PoseExtrapolatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseExtrapolatorOptions& PoseExtrapolatorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base);
  return *internal_default_instance();
}


void PoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && constant_velocity_ != nullptr) {
    delete constant_velocity_;
  }
  constant_velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_based_ != nullptr) {
    delete imu_based_;
  }
  imu_based_ = nullptr;
  use_imu_based_ = false;
  _internal_metadata_.Clear();
}

const char* PoseExtrapolatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_imu_based = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_imu_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constant_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_based(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseExtrapolatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_imu_based(), target);
  }

  // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constant_velocity(this), target, stream);
  }

  // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::imu_based(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return target;
}

size_t PoseExtrapolatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constant_velocity_);
  }

  // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_based_);
  }

  // bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseExtrapolatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseExtrapolatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseExtrapolatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseExtrapolatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void PoseExtrapolatorOptions::MergeFrom(const PoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constant_velocity()) {
    _internal_mutable_constant_velocity()->::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::MergeFrom(from._internal_constant_velocity());
  }
  if (from.has_imu_based()) {
    _internal_mutable_imu_based()->::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::MergeFrom(from._internal_imu_based());
  }
  if (from.use_imu_based() != 0) {
    _internal_set_use_imu_based(from._internal_use_imu_based());
  }
}

void PoseExtrapolatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseExtrapolatorOptions::CopyFrom(const PoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseExtrapolatorOptions::IsInitialized() const {
  return true;
}

void PoseExtrapolatorOptions::InternalSwap(PoseExtrapolatorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constant_velocity_, other->constant_velocity_);
  swap(imu_based_, other->imu_based_);
  swap(use_imu_based_, other->use_imu_based_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseExtrapolatorOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseExtrapolatorOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseExtrapolatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseExtrapolatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
