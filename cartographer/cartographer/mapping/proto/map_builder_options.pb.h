// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_builder_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class MapBuilderOptions;
class MapBuilderOptionsDefaultTypeInternal;
extern MapBuilderOptionsDefaultTypeInternal _MapBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::MapBuilderOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::MapBuilderOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class MapBuilderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.MapBuilderOptions) */ {
 public:
  MapBuilderOptions();
  virtual ~MapBuilderOptions();

  MapBuilderOptions(const MapBuilderOptions& from);
  MapBuilderOptions(MapBuilderOptions&& from) noexcept
    : MapBuilderOptions() {
    *this = ::std::move(from);
  }

  inline MapBuilderOptions& operator=(const MapBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBuilderOptions& operator=(MapBuilderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBuilderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBuilderOptions* internal_default_instance() {
    return reinterpret_cast<const MapBuilderOptions*>(
               &_MapBuilderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapBuilderOptions& a, MapBuilderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MapBuilderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapBuilderOptions* New() const final {
    return CreateMaybeMessage<MapBuilderOptions>(nullptr);
  }

  MapBuilderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBuilderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBuilderOptions& from);
  void MergeFrom(const MapBuilderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBuilderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.MapBuilderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseGraphOptionsFieldNumber = 4,
    kUseTrajectoryBuilder2DFieldNumber = 1,
    kUseTrajectoryBuilder3DFieldNumber = 2,
    kCollateByTrajectoryFieldNumber = 5,
    kNumBackgroundThreadsFieldNumber = 3,
  };
  // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  bool has_pose_graph_options() const;
  private:
  bool _internal_has_pose_graph_options() const;
  public:
  void clear_pose_graph_options();
  const ::cartographer::mapping::proto::PoseGraphOptions& pose_graph_options() const;
  ::cartographer::mapping::proto::PoseGraphOptions* release_pose_graph_options();
  ::cartographer::mapping::proto::PoseGraphOptions* mutable_pose_graph_options();
  void set_allocated_pose_graph_options(::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options);
  private:
  const ::cartographer::mapping::proto::PoseGraphOptions& _internal_pose_graph_options() const;
  ::cartographer::mapping::proto::PoseGraphOptions* _internal_mutable_pose_graph_options();
  public:

  // bool use_trajectory_builder_2d = 1;
  void clear_use_trajectory_builder_2d();
  bool use_trajectory_builder_2d() const;
  void set_use_trajectory_builder_2d(bool value);
  private:
  bool _internal_use_trajectory_builder_2d() const;
  void _internal_set_use_trajectory_builder_2d(bool value);
  public:

  // bool use_trajectory_builder_3d = 2;
  void clear_use_trajectory_builder_3d();
  bool use_trajectory_builder_3d() const;
  void set_use_trajectory_builder_3d(bool value);
  private:
  bool _internal_use_trajectory_builder_3d() const;
  void _internal_set_use_trajectory_builder_3d(bool value);
  public:

  // bool collate_by_trajectory = 5;
  void clear_collate_by_trajectory();
  bool collate_by_trajectory() const;
  void set_collate_by_trajectory(bool value);
  private:
  bool _internal_collate_by_trajectory() const;
  void _internal_set_collate_by_trajectory(bool value);
  public:

  // int32 num_background_threads = 3;
  void clear_num_background_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 num_background_threads() const;
  void set_num_background_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_background_threads() const;
  void _internal_set_num_background_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.MapBuilderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options_;
  bool use_trajectory_builder_2d_;
  bool use_trajectory_builder_3d_;
  bool collate_by_trajectory_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_background_threads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapBuilderOptions

// bool use_trajectory_builder_2d = 1;
inline void MapBuilderOptions::clear_use_trajectory_builder_2d() {
  use_trajectory_builder_2d_ = false;
}
inline bool MapBuilderOptions::_internal_use_trajectory_builder_2d() const {
  return use_trajectory_builder_2d_;
}
inline bool MapBuilderOptions::use_trajectory_builder_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_2d)
  return _internal_use_trajectory_builder_2d();
}
inline void MapBuilderOptions::_internal_set_use_trajectory_builder_2d(bool value) {
  
  use_trajectory_builder_2d_ = value;
}
inline void MapBuilderOptions::set_use_trajectory_builder_2d(bool value) {
  _internal_set_use_trajectory_builder_2d(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_2d)
}

// bool use_trajectory_builder_3d = 2;
inline void MapBuilderOptions::clear_use_trajectory_builder_3d() {
  use_trajectory_builder_3d_ = false;
}
inline bool MapBuilderOptions::_internal_use_trajectory_builder_3d() const {
  return use_trajectory_builder_3d_;
}
inline bool MapBuilderOptions::use_trajectory_builder_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_3d)
  return _internal_use_trajectory_builder_3d();
}
inline void MapBuilderOptions::_internal_set_use_trajectory_builder_3d(bool value) {
  
  use_trajectory_builder_3d_ = value;
}
inline void MapBuilderOptions::set_use_trajectory_builder_3d(bool value) {
  _internal_set_use_trajectory_builder_3d(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_3d)
}

// int32 num_background_threads = 3;
inline void MapBuilderOptions::clear_num_background_threads() {
  num_background_threads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderOptions::_internal_num_background_threads() const {
  return num_background_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBuilderOptions::num_background_threads() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.num_background_threads)
  return _internal_num_background_threads();
}
inline void MapBuilderOptions::_internal_set_num_background_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_background_threads_ = value;
}
inline void MapBuilderOptions::set_num_background_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_background_threads(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.num_background_threads)
}

// .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
inline bool MapBuilderOptions::_internal_has_pose_graph_options() const {
  return this != internal_default_instance() && pose_graph_options_ != nullptr;
}
inline bool MapBuilderOptions::has_pose_graph_options() const {
  return _internal_has_pose_graph_options();
}
inline const ::cartographer::mapping::proto::PoseGraphOptions& MapBuilderOptions::_internal_pose_graph_options() const {
  const ::cartographer::mapping::proto::PoseGraphOptions* p = pose_graph_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::PoseGraphOptions*>(
      &::cartographer::mapping::proto::_PoseGraphOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::PoseGraphOptions& MapBuilderOptions::pose_graph_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  return _internal_pose_graph_options();
}
inline ::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::release_pose_graph_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  
  ::cartographer::mapping::proto::PoseGraphOptions* temp = pose_graph_options_;
  pose_graph_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::_internal_mutable_pose_graph_options() {
  
  if (pose_graph_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::PoseGraphOptions>(GetArenaNoVirtual());
    pose_graph_options_ = p;
  }
  return pose_graph_options_;
}
inline ::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::mutable_pose_graph_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  return _internal_mutable_pose_graph_options();
}
inline void MapBuilderOptions::set_allocated_pose_graph_options(::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_graph_options_);
  }
  if (pose_graph_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose_graph_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_graph_options, submessage_arena);
    }
    
  } else {
    
  }
  pose_graph_options_ = pose_graph_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
}

// bool collate_by_trajectory = 5;
inline void MapBuilderOptions::clear_collate_by_trajectory() {
  collate_by_trajectory_ = false;
}
inline bool MapBuilderOptions::_internal_collate_by_trajectory() const {
  return collate_by_trajectory_;
}
inline bool MapBuilderOptions::collate_by_trajectory() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.collate_by_trajectory)
  return _internal_collate_by_trajectory();
}
inline void MapBuilderOptions::_internal_set_collate_by_trajectory(bool value) {
  
  collate_by_trajectory_ = value;
}
inline void MapBuilderOptions::set_collate_by_trajectory(bool value) {
  _internal_set_collate_by_trajectory(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.collate_by_trajectory)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto
