// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
#include "cartographer/mapping/proto/local_trajectory_builder_options_2d.pb.h"
#include "cartographer/mapping/proto/local_trajectory_builder_options_3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class AllTrajectoryBuilderOptions;
class AllTrajectoryBuilderOptionsDefaultTypeInternal;
extern AllTrajectoryBuilderOptionsDefaultTypeInternal _AllTrajectoryBuilderOptions_default_instance_;
class InitialTrajectoryPose;
class InitialTrajectoryPoseDefaultTypeInternal;
extern InitialTrajectoryPoseDefaultTypeInternal _InitialTrajectoryPose_default_instance_;
class SensorId;
class SensorIdDefaultTypeInternal;
extern SensorIdDefaultTypeInternal _SensorId_default_instance_;
class TrajectoryBuilderOptions;
class TrajectoryBuilderOptionsDefaultTypeInternal;
extern TrajectoryBuilderOptionsDefaultTypeInternal _TrajectoryBuilderOptions_default_instance_;
class TrajectoryBuilderOptionsWithSensorIds;
class TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal;
extern TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptions;
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptionsDefaultTypeInternal;
extern TrajectoryBuilderOptions_PureLocalizationTrimmerOptionsDefaultTypeInternal _TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::AllTrajectoryBuilderOptions>(Arena*);
template<> ::cartographer::mapping::proto::InitialTrajectoryPose* Arena::CreateMaybeMessage<::cartographer::mapping::proto::InitialTrajectoryPose>(Arena*);
template<> ::cartographer::mapping::proto::SensorId* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SensorId>(Arena*);
template<> ::cartographer::mapping::proto::TrajectoryBuilderOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryBuilderOptions>(Arena*);
template<> ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* Arena::CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds>(Arena*);
template<> ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

enum SensorId_SensorType : int {
  SensorId_SensorType_RANGE = 0,
  SensorId_SensorType_IMU = 1,
  SensorId_SensorType_ODOMETRY = 2,
  SensorId_SensorType_FIXED_FRAME_POSE = 3,
  SensorId_SensorType_LANDMARK = 4,
  SensorId_SensorType_LOCAL_SLAM_RESULT = 5,
  SensorId_SensorType_SensorId_SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SensorId_SensorType_SensorId_SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SensorId_SensorType_IsValid(int value);
constexpr SensorId_SensorType SensorId_SensorType_SensorType_MIN = SensorId_SensorType_RANGE;
constexpr SensorId_SensorType SensorId_SensorType_SensorType_MAX = SensorId_SensorType_LOCAL_SLAM_RESULT;
constexpr int SensorId_SensorType_SensorType_ARRAYSIZE = SensorId_SensorType_SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorId_SensorType_descriptor();
template<typename T>
inline const std::string& SensorId_SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorId_SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorId_SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorId_SensorType_descriptor(), enum_t_value);
}
inline bool SensorId_SensorType_Parse(
    const std::string& name, SensorId_SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorId_SensorType>(
    SensorId_SensorType_descriptor(), name, value);
}
// ===================================================================

class InitialTrajectoryPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.InitialTrajectoryPose) */ {
 public:
  InitialTrajectoryPose();
  virtual ~InitialTrajectoryPose();

  InitialTrajectoryPose(const InitialTrajectoryPose& from);
  InitialTrajectoryPose(InitialTrajectoryPose&& from) noexcept
    : InitialTrajectoryPose() {
    *this = ::std::move(from);
  }

  inline InitialTrajectoryPose& operator=(const InitialTrajectoryPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialTrajectoryPose& operator=(InitialTrajectoryPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitialTrajectoryPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialTrajectoryPose* internal_default_instance() {
    return reinterpret_cast<const InitialTrajectoryPose*>(
               &_InitialTrajectoryPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitialTrajectoryPose& a, InitialTrajectoryPose& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialTrajectoryPose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialTrajectoryPose* New() const final {
    return CreateMaybeMessage<InitialTrajectoryPose>(nullptr);
  }

  InitialTrajectoryPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialTrajectoryPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitialTrajectoryPose& from);
  void MergeFrom(const InitialTrajectoryPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialTrajectoryPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.InitialTrajectoryPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePoseFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kToTrajectoryIdFieldNumber = 2,
  };
  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  bool has_relative_pose() const;
  private:
  bool _internal_has_relative_pose() const;
  public:
  void clear_relative_pose();
  const ::cartographer::transform::proto::Rigid3d& relative_pose() const;
  ::cartographer::transform::proto::Rigid3d* release_relative_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_relative_pose();
  void set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_relative_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_relative_pose();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 to_trajectory_id = 2;
  void clear_to_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_trajectory_id() const;
  void set_to_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_trajectory_id() const;
  void _internal_set_to_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.InitialTrajectoryPose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* relative_pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_trajectory_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryBuilderOptions_PureLocalizationTrimmerOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions) */ {
 public:
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions();
  virtual ~TrajectoryBuilderOptions_PureLocalizationTrimmerOptions();

  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from);
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions&& from) noexcept
    : TrajectoryBuilderOptions_PureLocalizationTrimmerOptions() {
    *this = ::std::move(from);
  }

  inline TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& operator=(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& operator=(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* internal_default_instance() {
    return reinterpret_cast<const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(
               &_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& a, TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* New() const final {
    return CreateMaybeMessage<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(nullptr);
  }

  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from);
  void MergeFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSubmapsToKeepFieldNumber = 1,
  };
  // int32 max_submaps_to_keep = 1;
  void clear_max_submaps_to_keep();
  ::PROTOBUF_NAMESPACE_ID::int32 max_submaps_to_keep() const;
  void set_max_submaps_to_keep(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_submaps_to_keep() const;
  void _internal_set_max_submaps_to_keep(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_submaps_to_keep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryBuilderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryBuilderOptions) */ {
 public:
  TrajectoryBuilderOptions();
  virtual ~TrajectoryBuilderOptions();

  TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from);
  TrajectoryBuilderOptions(TrajectoryBuilderOptions&& from) noexcept
    : TrajectoryBuilderOptions() {
    *this = ::std::move(from);
  }

  inline TrajectoryBuilderOptions& operator=(const TrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryBuilderOptions& operator=(TrajectoryBuilderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryBuilderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryBuilderOptions* internal_default_instance() {
    return reinterpret_cast<const TrajectoryBuilderOptions*>(
               &_TrajectoryBuilderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrajectoryBuilderOptions& a, TrajectoryBuilderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryBuilderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryBuilderOptions* New() const final {
    return CreateMaybeMessage<TrajectoryBuilderOptions>(nullptr);
  }

  TrajectoryBuilderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryBuilderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryBuilderOptions& from);
  void MergeFrom(const TrajectoryBuilderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryBuilderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.TrajectoryBuilderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrajectoryBuilderOptions_PureLocalizationTrimmerOptions PureLocalizationTrimmerOptions;

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryBuilder2DOptionsFieldNumber = 1,
    kTrajectoryBuilder3DOptionsFieldNumber = 2,
    kInitialTrajectoryPoseFieldNumber = 4,
    kPureLocalizationTrimmerFieldNumber = 6,
    kPureLocalizationFieldNumber = 3,
    kCollateFixedFrameFieldNumber = 7,
    kCollateLandmarksFieldNumber = 8,
  };
  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  bool has_trajectory_builder_2d_options() const;
  private:
  bool _internal_has_trajectory_builder_2d_options() const;
  public:
  void clear_trajectory_builder_2d_options();
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& trajectory_builder_2d_options() const;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* release_trajectory_builder_2d_options();
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* mutable_trajectory_builder_2d_options();
  void set_allocated_trajectory_builder_2d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options);
  private:
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& _internal_trajectory_builder_2d_options() const;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* _internal_mutable_trajectory_builder_2d_options();
  public:

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  bool has_trajectory_builder_3d_options() const;
  private:
  bool _internal_has_trajectory_builder_3d_options() const;
  public:
  void clear_trajectory_builder_3d_options();
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& trajectory_builder_3d_options() const;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* release_trajectory_builder_3d_options();
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* mutable_trajectory_builder_3d_options();
  void set_allocated_trajectory_builder_3d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options);
  private:
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& _internal_trajectory_builder_3d_options() const;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* _internal_mutable_trajectory_builder_3d_options();
  public:

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  bool has_initial_trajectory_pose() const;
  private:
  bool _internal_has_initial_trajectory_pose() const;
  public:
  void clear_initial_trajectory_pose();
  const ::cartographer::mapping::proto::InitialTrajectoryPose& initial_trajectory_pose() const;
  ::cartographer::mapping::proto::InitialTrajectoryPose* release_initial_trajectory_pose();
  ::cartographer::mapping::proto::InitialTrajectoryPose* mutable_initial_trajectory_pose();
  void set_allocated_initial_trajectory_pose(::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose);
  private:
  const ::cartographer::mapping::proto::InitialTrajectoryPose& _internal_initial_trajectory_pose() const;
  ::cartographer::mapping::proto::InitialTrajectoryPose* _internal_mutable_initial_trajectory_pose();
  public:

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  bool has_pure_localization_trimmer() const;
  private:
  bool _internal_has_pure_localization_trimmer() const;
  public:
  void clear_pure_localization_trimmer();
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& pure_localization_trimmer() const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* release_pure_localization_trimmer();
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* mutable_pure_localization_trimmer();
  void set_allocated_pure_localization_trimmer(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* pure_localization_trimmer);
  private:
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& _internal_pure_localization_trimmer() const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* _internal_mutable_pure_localization_trimmer();
  public:

  // bool pure_localization = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_pure_localization();
  PROTOBUF_DEPRECATED bool pure_localization() const;
  PROTOBUF_DEPRECATED void set_pure_localization(bool value);
  private:
  bool _internal_pure_localization() const;
  void _internal_set_pure_localization(bool value);
  public:

  // bool collate_fixed_frame = 7;
  void clear_collate_fixed_frame();
  bool collate_fixed_frame() const;
  void set_collate_fixed_frame(bool value);
  private:
  bool _internal_collate_fixed_frame() const;
  void _internal_set_collate_fixed_frame(bool value);
  public:

  // bool collate_landmarks = 8;
  void clear_collate_landmarks();
  bool collate_landmarks() const;
  void set_collate_landmarks(bool value);
  private:
  bool _internal_collate_landmarks() const;
  void _internal_set_collate_landmarks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryBuilderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options_;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options_;
  ::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose_;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* pure_localization_trimmer_;
  bool pure_localization_;
  bool collate_fixed_frame_;
  bool collate_landmarks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
};
// -------------------------------------------------------------------

class SensorId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SensorId) */ {
 public:
  SensorId();
  virtual ~SensorId();

  SensorId(const SensorId& from);
  SensorId(SensorId&& from) noexcept
    : SensorId() {
    *this = ::std::move(from);
  }

  inline SensorId& operator=(const SensorId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorId& operator=(SensorId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorId* internal_default_instance() {
    return reinterpret_cast<const SensorId*>(
               &_SensorId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SensorId& a, SensorId& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorId* New() const final {
    return CreateMaybeMessage<SensorId>(nullptr);
  }

  SensorId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorId& from);
  void MergeFrom(const SensorId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.SensorId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorId_SensorType SensorType;
  static constexpr SensorType RANGE =
    SensorId_SensorType_RANGE;
  static constexpr SensorType IMU =
    SensorId_SensorType_IMU;
  static constexpr SensorType ODOMETRY =
    SensorId_SensorType_ODOMETRY;
  static constexpr SensorType FIXED_FRAME_POSE =
    SensorId_SensorType_FIXED_FRAME_POSE;
  static constexpr SensorType LANDMARK =
    SensorId_SensorType_LANDMARK;
  static constexpr SensorType LOCAL_SLAM_RESULT =
    SensorId_SensorType_LOCAL_SLAM_RESULT;
  static inline bool SensorType_IsValid(int value) {
    return SensorId_SensorType_IsValid(value);
  }
  static constexpr SensorType SensorType_MIN =
    SensorId_SensorType_SensorType_MIN;
  static constexpr SensorType SensorType_MAX =
    SensorId_SensorType_SensorType_MAX;
  static constexpr int SensorType_ARRAYSIZE =
    SensorId_SensorType_SensorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorType_descriptor() {
    return SensorId_SensorType_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorType_Name.");
    return SensorId_SensorType_Name(enum_t_value);
  }
  static inline bool SensorType_Parse(const std::string& name,
      SensorType* value) {
    return SensorId_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  void clear_type();
  ::cartographer::mapping::proto::SensorId_SensorType type() const;
  void set_type(::cartographer::mapping::proto::SensorId_SensorType value);
  private:
  ::cartographer::mapping::proto::SensorId_SensorType _internal_type() const;
  void _internal_set_type(::cartographer::mapping::proto::SensorId_SensorType value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SensorId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryBuilderOptionsWithSensorIds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds) */ {
 public:
  TrajectoryBuilderOptionsWithSensorIds();
  virtual ~TrajectoryBuilderOptionsWithSensorIds();

  TrajectoryBuilderOptionsWithSensorIds(const TrajectoryBuilderOptionsWithSensorIds& from);
  TrajectoryBuilderOptionsWithSensorIds(TrajectoryBuilderOptionsWithSensorIds&& from) noexcept
    : TrajectoryBuilderOptionsWithSensorIds() {
    *this = ::std::move(from);
  }

  inline TrajectoryBuilderOptionsWithSensorIds& operator=(const TrajectoryBuilderOptionsWithSensorIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryBuilderOptionsWithSensorIds& operator=(TrajectoryBuilderOptionsWithSensorIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryBuilderOptionsWithSensorIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryBuilderOptionsWithSensorIds* internal_default_instance() {
    return reinterpret_cast<const TrajectoryBuilderOptionsWithSensorIds*>(
               &_TrajectoryBuilderOptionsWithSensorIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrajectoryBuilderOptionsWithSensorIds& a, TrajectoryBuilderOptionsWithSensorIds& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryBuilderOptionsWithSensorIds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryBuilderOptionsWithSensorIds* New() const final {
    return CreateMaybeMessage<TrajectoryBuilderOptionsWithSensorIds>(nullptr);
  }

  TrajectoryBuilderOptionsWithSensorIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryBuilderOptionsWithSensorIds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryBuilderOptionsWithSensorIds& from);
  void MergeFrom(const TrajectoryBuilderOptionsWithSensorIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryBuilderOptionsWithSensorIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIdFieldNumber = 1,
    kTrajectoryBuilderOptionsFieldNumber = 2,
  };
  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  int sensor_id_size() const;
  private:
  int _internal_sensor_id_size() const;
  public:
  void clear_sensor_id();
  ::cartographer::mapping::proto::SensorId* mutable_sensor_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >*
      mutable_sensor_id();
  private:
  const ::cartographer::mapping::proto::SensorId& _internal_sensor_id(int index) const;
  ::cartographer::mapping::proto::SensorId* _internal_add_sensor_id();
  public:
  const ::cartographer::mapping::proto::SensorId& sensor_id(int index) const;
  ::cartographer::mapping::proto::SensorId* add_sensor_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >&
      sensor_id() const;

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  bool has_trajectory_builder_options() const;
  private:
  bool _internal_has_trajectory_builder_options() const;
  public:
  void clear_trajectory_builder_options();
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions& trajectory_builder_options() const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* release_trajectory_builder_options();
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* mutable_trajectory_builder_options();
  void set_allocated_trajectory_builder_options(::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options);
  private:
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions& _internal_trajectory_builder_options() const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* _internal_mutable_trajectory_builder_options();
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SensorId > sensor_id_;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
};
// -------------------------------------------------------------------

class AllTrajectoryBuilderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.AllTrajectoryBuilderOptions) */ {
 public:
  AllTrajectoryBuilderOptions();
  virtual ~AllTrajectoryBuilderOptions();

  AllTrajectoryBuilderOptions(const AllTrajectoryBuilderOptions& from);
  AllTrajectoryBuilderOptions(AllTrajectoryBuilderOptions&& from) noexcept
    : AllTrajectoryBuilderOptions() {
    *this = ::std::move(from);
  }

  inline AllTrajectoryBuilderOptions& operator=(const AllTrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllTrajectoryBuilderOptions& operator=(AllTrajectoryBuilderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllTrajectoryBuilderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllTrajectoryBuilderOptions* internal_default_instance() {
    return reinterpret_cast<const AllTrajectoryBuilderOptions*>(
               &_AllTrajectoryBuilderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AllTrajectoryBuilderOptions& a, AllTrajectoryBuilderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AllTrajectoryBuilderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllTrajectoryBuilderOptions* New() const final {
    return CreateMaybeMessage<AllTrajectoryBuilderOptions>(nullptr);
  }

  AllTrajectoryBuilderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllTrajectoryBuilderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllTrajectoryBuilderOptions& from);
  void MergeFrom(const AllTrajectoryBuilderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllTrajectoryBuilderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.AllTrajectoryBuilderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsWithSensorIdsFieldNumber = 1,
  };
  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  int options_with_sensor_ids_size() const;
  private:
  int _internal_options_with_sensor_ids_size() const;
  public:
  void clear_options_with_sensor_ids();
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* mutable_options_with_sensor_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >*
      mutable_options_with_sensor_ids();
  private:
  const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& _internal_options_with_sensor_ids(int index) const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* _internal_add_options_with_sensor_ids();
  public:
  const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& options_with_sensor_ids(int index) const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* add_options_with_sensor_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >&
      options_with_sensor_ids() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds > options_with_sensor_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitialTrajectoryPose

// .cartographer.transform.proto.Rigid3d relative_pose = 1;
inline bool InitialTrajectoryPose::_internal_has_relative_pose() const {
  return this != internal_default_instance() && relative_pose_ != nullptr;
}
inline bool InitialTrajectoryPose::has_relative_pose() const {
  return _internal_has_relative_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& InitialTrajectoryPose::_internal_relative_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = relative_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& InitialTrajectoryPose::relative_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return _internal_relative_pose();
}
inline ::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::_internal_mutable_relative_pose() {
  
  if (relative_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    relative_pose_ = p;
  }
  return relative_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::mutable_relative_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return _internal_mutable_relative_pose();
}
inline void InitialTrajectoryPose::set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_pose_);
  }
  if (relative_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_pose, submessage_arena);
    }
    
  } else {
    
  }
  relative_pose_ = relative_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
}

// int32 to_trajectory_id = 2;
inline void InitialTrajectoryPose::clear_to_trajectory_id() {
  to_trajectory_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitialTrajectoryPose::_internal_to_trajectory_id() const {
  return to_trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitialTrajectoryPose::to_trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
  return _internal_to_trajectory_id();
}
inline void InitialTrajectoryPose::_internal_set_to_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_trajectory_id_ = value;
}
inline void InitialTrajectoryPose::set_to_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
}

// int64 timestamp = 3;
inline void InitialTrajectoryPose::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InitialTrajectoryPose::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InitialTrajectoryPose::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
  return _internal_timestamp();
}
inline void InitialTrajectoryPose::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void InitialTrajectoryPose::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptions_PureLocalizationTrimmerOptions

// int32 max_submaps_to_keep = 1;
inline void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::clear_max_submaps_to_keep() {
  max_submaps_to_keep_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_internal_max_submaps_to_keep() const {
  return max_submaps_to_keep_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::max_submaps_to_keep() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions.max_submaps_to_keep)
  return _internal_max_submaps_to_keep();
}
inline void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_internal_set_max_submaps_to_keep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_submaps_to_keep_ = value;
}
inline void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::set_max_submaps_to_keep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_submaps_to_keep(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions.max_submaps_to_keep)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptions

// .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
inline bool TrajectoryBuilderOptions::_internal_has_trajectory_builder_2d_options() const {
  return this != internal_default_instance() && trajectory_builder_2d_options_ != nullptr;
}
inline bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options() const {
  return _internal_has_trajectory_builder_2d_options();
}
inline const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& TrajectoryBuilderOptions::_internal_trajectory_builder_2d_options() const {
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* p = trajectory_builder_2d_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D*>(
      &::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_);
}
inline const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& TrajectoryBuilderOptions::trajectory_builder_2d_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return _internal_trajectory_builder_2d_options();
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::release_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* temp = trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::_internal_mutable_trajectory_builder_2d_options() {
  
  if (trajectory_builder_2d_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D>(GetArenaNoVirtual());
    trajectory_builder_2d_options_ = p;
  }
  return trajectory_builder_2d_options_;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return _internal_mutable_trajectory_builder_2d_options();
}
inline void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_builder_2d_options_);
  }
  if (trajectory_builder_2d_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_builder_2d_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_builder_2d_options, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_builder_2d_options_ = trajectory_builder_2d_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
}

// .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
inline bool TrajectoryBuilderOptions::_internal_has_trajectory_builder_3d_options() const {
  return this != internal_default_instance() && trajectory_builder_3d_options_ != nullptr;
}
inline bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options() const {
  return _internal_has_trajectory_builder_3d_options();
}
inline const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& TrajectoryBuilderOptions::_internal_trajectory_builder_3d_options() const {
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* p = trajectory_builder_3d_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D*>(
      &::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_);
}
inline const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& TrajectoryBuilderOptions::trajectory_builder_3d_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return _internal_trajectory_builder_3d_options();
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::release_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* temp = trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::_internal_mutable_trajectory_builder_3d_options() {
  
  if (trajectory_builder_3d_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D>(GetArenaNoVirtual());
    trajectory_builder_3d_options_ = p;
  }
  return trajectory_builder_3d_options_;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return _internal_mutable_trajectory_builder_3d_options();
}
inline void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_builder_3d_options_);
  }
  if (trajectory_builder_3d_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_builder_3d_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_builder_3d_options, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_builder_3d_options_ = trajectory_builder_3d_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
}

// .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
inline bool TrajectoryBuilderOptions::_internal_has_initial_trajectory_pose() const {
  return this != internal_default_instance() && initial_trajectory_pose_ != nullptr;
}
inline bool TrajectoryBuilderOptions::has_initial_trajectory_pose() const {
  return _internal_has_initial_trajectory_pose();
}
inline void TrajectoryBuilderOptions::clear_initial_trajectory_pose() {
  if (GetArenaNoVirtual() == nullptr && initial_trajectory_pose_ != nullptr) {
    delete initial_trajectory_pose_;
  }
  initial_trajectory_pose_ = nullptr;
}
inline const ::cartographer::mapping::proto::InitialTrajectoryPose& TrajectoryBuilderOptions::_internal_initial_trajectory_pose() const {
  const ::cartographer::mapping::proto::InitialTrajectoryPose* p = initial_trajectory_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::InitialTrajectoryPose*>(
      &::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_);
}
inline const ::cartographer::mapping::proto::InitialTrajectoryPose& TrajectoryBuilderOptions::initial_trajectory_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return _internal_initial_trajectory_pose();
}
inline ::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::release_initial_trajectory_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  
  ::cartographer::mapping::proto::InitialTrajectoryPose* temp = initial_trajectory_pose_;
  initial_trajectory_pose_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::_internal_mutable_initial_trajectory_pose() {
  
  if (initial_trajectory_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::InitialTrajectoryPose>(GetArenaNoVirtual());
    initial_trajectory_pose_ = p;
  }
  return initial_trajectory_pose_;
}
inline ::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::mutable_initial_trajectory_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return _internal_mutable_initial_trajectory_pose();
}
inline void TrajectoryBuilderOptions::set_allocated_initial_trajectory_pose(::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete initial_trajectory_pose_;
  }
  if (initial_trajectory_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initial_trajectory_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_trajectory_pose, submessage_arena);
    }
    
  } else {
    
  }
  initial_trajectory_pose_ = initial_trajectory_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
}

// bool pure_localization = 3 [deprecated = true];
inline void TrajectoryBuilderOptions::clear_pure_localization() {
  pure_localization_ = false;
}
inline bool TrajectoryBuilderOptions::_internal_pure_localization() const {
  return pure_localization_;
}
inline bool TrajectoryBuilderOptions::pure_localization() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
  return _internal_pure_localization();
}
inline void TrajectoryBuilderOptions::_internal_set_pure_localization(bool value) {
  
  pure_localization_ = value;
}
inline void TrajectoryBuilderOptions::set_pure_localization(bool value) {
  _internal_set_pure_localization(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
}

// .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
inline bool TrajectoryBuilderOptions::_internal_has_pure_localization_trimmer() const {
  return this != internal_default_instance() && pure_localization_trimmer_ != nullptr;
}
inline bool TrajectoryBuilderOptions::has_pure_localization_trimmer() const {
  return _internal_has_pure_localization_trimmer();
}
inline void TrajectoryBuilderOptions::clear_pure_localization_trimmer() {
  if (GetArenaNoVirtual() == nullptr && pure_localization_trimmer_ != nullptr) {
    delete pure_localization_trimmer_;
  }
  pure_localization_trimmer_ = nullptr;
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions::_internal_pure_localization_trimmer() const {
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* p = pure_localization_trimmer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(
      &::cartographer::mapping::proto::_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions::pure_localization_trimmer() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  return _internal_pure_localization_trimmer();
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::release_pure_localization_trimmer() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* temp = pure_localization_trimmer_;
  pure_localization_trimmer_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::_internal_mutable_pure_localization_trimmer() {
  
  if (pure_localization_trimmer_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(GetArenaNoVirtual());
    pure_localization_trimmer_ = p;
  }
  return pure_localization_trimmer_;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::mutable_pure_localization_trimmer() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  return _internal_mutable_pure_localization_trimmer();
}
inline void TrajectoryBuilderOptions::set_allocated_pure_localization_trimmer(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* pure_localization_trimmer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pure_localization_trimmer_;
  }
  if (pure_localization_trimmer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pure_localization_trimmer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pure_localization_trimmer, submessage_arena);
    }
    
  } else {
    
  }
  pure_localization_trimmer_ = pure_localization_trimmer;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
}

// bool collate_fixed_frame = 7;
inline void TrajectoryBuilderOptions::clear_collate_fixed_frame() {
  collate_fixed_frame_ = false;
}
inline bool TrajectoryBuilderOptions::_internal_collate_fixed_frame() const {
  return collate_fixed_frame_;
}
inline bool TrajectoryBuilderOptions::collate_fixed_frame() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_fixed_frame)
  return _internal_collate_fixed_frame();
}
inline void TrajectoryBuilderOptions::_internal_set_collate_fixed_frame(bool value) {
  
  collate_fixed_frame_ = value;
}
inline void TrajectoryBuilderOptions::set_collate_fixed_frame(bool value) {
  _internal_set_collate_fixed_frame(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_fixed_frame)
}

// bool collate_landmarks = 8;
inline void TrajectoryBuilderOptions::clear_collate_landmarks() {
  collate_landmarks_ = false;
}
inline bool TrajectoryBuilderOptions::_internal_collate_landmarks() const {
  return collate_landmarks_;
}
inline bool TrajectoryBuilderOptions::collate_landmarks() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_landmarks)
  return _internal_collate_landmarks();
}
inline void TrajectoryBuilderOptions::_internal_set_collate_landmarks(bool value) {
  
  collate_landmarks_ = value;
}
inline void TrajectoryBuilderOptions::set_collate_landmarks(bool value) {
  _internal_set_collate_landmarks(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_landmarks)
}

// -------------------------------------------------------------------

// SensorId

// .cartographer.mapping.proto.SensorId.SensorType type = 1;
inline void SensorId::clear_type() {
  type_ = 0;
}
inline ::cartographer::mapping::proto::SensorId_SensorType SensorId::_internal_type() const {
  return static_cast< ::cartographer::mapping::proto::SensorId_SensorType >(type_);
}
inline ::cartographer::mapping::proto::SensorId_SensorType SensorId::type() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.type)
  return _internal_type();
}
inline void SensorId::_internal_set_type(::cartographer::mapping::proto::SensorId_SensorType value) {
  
  type_ = value;
}
inline void SensorId::set_type(::cartographer::mapping::proto::SensorId_SensorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.type)
}

// string id = 2;
inline void SensorId::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorId::id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.id)
  return _internal_id();
}
inline void SensorId::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.id)
}
inline std::string* SensorId::mutable_id() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SensorId.id)
  return _internal_mutable_id();
}
inline const std::string& SensorId::_internal_id() const {
  return id_.GetNoArena();
}
inline void SensorId::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorId::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.SensorId.id)
}
inline void SensorId::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SensorId.id)
}
inline void SensorId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SensorId.id)
}
inline std::string* SensorId::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorId::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SensorId.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorId::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SensorId.id)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptionsWithSensorIds

// repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
inline int TrajectoryBuilderOptionsWithSensorIds::_internal_sensor_id_size() const {
  return sensor_id_.size();
}
inline int TrajectoryBuilderOptionsWithSensorIds::sensor_id_size() const {
  return _internal_sensor_id_size();
}
inline void TrajectoryBuilderOptionsWithSensorIds::clear_sensor_id() {
  sensor_id_.Clear();
}
inline ::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >*
TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return &sensor_id_;
}
inline const ::cartographer::mapping::proto::SensorId& TrajectoryBuilderOptionsWithSensorIds::_internal_sensor_id(int index) const {
  return sensor_id_.Get(index);
}
inline const ::cartographer::mapping::proto::SensorId& TrajectoryBuilderOptionsWithSensorIds::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return _internal_sensor_id(index);
}
inline ::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::_internal_add_sensor_id() {
  return sensor_id_.Add();
}
inline ::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::add_sensor_id() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return _internal_add_sensor_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >&
TrajectoryBuilderOptionsWithSensorIds::sensor_id() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_;
}

// .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
inline bool TrajectoryBuilderOptionsWithSensorIds::_internal_has_trajectory_builder_options() const {
  return this != internal_default_instance() && trajectory_builder_options_ != nullptr;
}
inline bool TrajectoryBuilderOptionsWithSensorIds::has_trajectory_builder_options() const {
  return _internal_has_trajectory_builder_options();
}
inline void TrajectoryBuilderOptionsWithSensorIds::clear_trajectory_builder_options() {
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_options_ != nullptr) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = nullptr;
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptions& TrajectoryBuilderOptionsWithSensorIds::_internal_trajectory_builder_options() const {
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions* p = trajectory_builder_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryBuilderOptions*>(
      &::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_);
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptions& TrajectoryBuilderOptionsWithSensorIds::trajectory_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return _internal_trajectory_builder_options();
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::release_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* temp = trajectory_builder_options_;
  trajectory_builder_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::_internal_mutable_trajectory_builder_options() {
  
  if (trajectory_builder_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryBuilderOptions>(GetArenaNoVirtual());
    trajectory_builder_options_ = p;
  }
  return trajectory_builder_options_;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::mutable_trajectory_builder_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return _internal_mutable_trajectory_builder_options();
}
inline void TrajectoryBuilderOptionsWithSensorIds::set_allocated_trajectory_builder_options(::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trajectory_builder_options_;
  }
  if (trajectory_builder_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_builder_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_builder_options, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_builder_options_ = trajectory_builder_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
}

// -------------------------------------------------------------------

// AllTrajectoryBuilderOptions

// repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
inline int AllTrajectoryBuilderOptions::_internal_options_with_sensor_ids_size() const {
  return options_with_sensor_ids_.size();
}
inline int AllTrajectoryBuilderOptions::options_with_sensor_ids_size() const {
  return _internal_options_with_sensor_ids_size();
}
inline void AllTrajectoryBuilderOptions::clear_options_with_sensor_ids() {
  options_with_sensor_ids_.Clear();
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >*
AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return &options_with_sensor_ids_;
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& AllTrajectoryBuilderOptions::_internal_options_with_sensor_ids(int index) const {
  return options_with_sensor_ids_.Get(index);
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& AllTrajectoryBuilderOptions::options_with_sensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return _internal_options_with_sensor_ids(index);
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::_internal_add_options_with_sensor_ids() {
  return options_with_sensor_ids_.Add();
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::add_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return _internal_add_options_with_sensor_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >&
AllTrajectoryBuilderOptions::options_with_sensor_ids() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cartographer::mapping::proto::SensorId_SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cartographer::mapping::proto::SensorId_SensorType>() {
  return ::cartographer::mapping::proto::SensorId_SensorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto
