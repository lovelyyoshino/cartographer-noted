// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#include "cartographer/mapping/proto/trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class InitialTrajectoryPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialTrajectoryPose> _instance;
} _InitialTrajectoryPose_default_instance_;
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions> _instance;
} _TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_;
class TrajectoryBuilderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryBuilderOptions> _instance;
} _TrajectoryBuilderOptions_default_instance_;
class SensorIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorId> _instance;
} _SensorId_default_instance_;
class TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryBuilderOptionsWithSensorIds> _instance;
} _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
class AllTrajectoryBuilderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllTrajectoryBuilderOptions> _instance;
} _AllTrajectoryBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_AllTrajectoryBuilderOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::AllTrajectoryBuilderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::AllTrajectoryBuilderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_;
    new (ptr) ::cartographer::mapping::proto::InitialTrajectoryPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::InitialTrajectoryPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SensorId_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SensorId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SensorId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto.base,
      &scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto.base,
      &scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
      &scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptionsWithSensorIds_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
      &scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, relative_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, to_trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, max_submaps_to_keep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, trajectory_builder_2d_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, trajectory_builder_3d_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, initial_trajectory_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, pure_localization_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, pure_localization_trimmer_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, collate_fixed_frame_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, collate_landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SensorId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SensorId, type_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SensorId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds, trajectory_builder_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::AllTrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::AllTrajectoryBuilderOptions, options_with_sensor_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::InitialTrajectoryPose)},
  { 8, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions)},
  { 14, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptions)},
  { 26, -1, sizeof(::cartographer::mapping::proto::SensorId)},
  { 33, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds)},
  { 40, -1, sizeof(::cartographer::mapping::proto::AllTrajectoryBuilderOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SensorId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptionsWithSensorIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_AllTrajectoryBuilderOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;cartographer/mapping/proto/trajectory_"
  "builder_options.proto\022\032cartographer.mapp"
  "ing.proto\032,cartographer/transform/proto/"
  "transform.proto\032Dcartographer/mapping/pr"
  "oto/local_trajectory_builder_options_2d."
  "proto\032Dcartographer/mapping/proto/local_"
  "trajectory_builder_options_3d.proto\"\202\001\n\025"
  "InitialTrajectoryPose\022<\n\rrelative_pose\030\001"
  " \001(\0132%.cartographer.transform.proto.Rigi"
  "d3d\022\030\n\020to_trajectory_id\030\002 \001(\005\022\021\n\ttimesta"
  "mp\030\003 \001(\003\"\312\004\n\030TrajectoryBuilderOptions\022b\n"
  "\035trajectory_builder_2d_options\030\001 \001(\0132;.c"
  "artographer.mapping.proto.LocalTrajector"
  "yBuilderOptions2D\022b\n\035trajectory_builder_"
  "3d_options\030\002 \001(\0132;.cartographer.mapping."
  "proto.LocalTrajectoryBuilderOptions3D\022R\n"
  "\027initial_trajectory_pose\030\004 \001(\01321.cartogr"
  "apher.mapping.proto.InitialTrajectoryPos"
  "e\022\035\n\021pure_localization\030\003 \001(\010B\002\030\001\022v\n\031pure"
  "_localization_trimmer\030\006 \001(\0132S.cartograph"
  "er.mapping.proto.TrajectoryBuilderOption"
  "s.PureLocalizationTrimmerOptions\022\033\n\023coll"
  "ate_fixed_frame\030\007 \001(\010\022\031\n\021collate_landmar"
  "ks\030\010 \001(\010\032=\n\036PureLocalizationTrimmerOptio"
  "ns\022\033\n\023max_submaps_to_keep\030\001 \001(\005J\004\010\005\020\006\"\300\001"
  "\n\010SensorId\022=\n\004type\030\001 \001(\0162/.cartographer."
  "mapping.proto.SensorId.SensorType\022\n\n\002id\030"
  "\002 \001(\t\"i\n\nSensorType\022\t\n\005RANGE\020\000\022\007\n\003IMU\020\001\022"
  "\014\n\010ODOMETRY\020\002\022\024\n\020FIXED_FRAME_POSE\020\003\022\014\n\010L"
  "ANDMARK\020\004\022\025\n\021LOCAL_SLAM_RESULT\020\005\"\272\001\n%Tra"
  "jectoryBuilderOptionsWithSensorIds\0227\n\tse"
  "nsor_id\030\001 \003(\0132$.cartographer.mapping.pro"
  "to.SensorId\022X\n\032trajectory_builder_option"
  "s\030\002 \001(\01324.cartographer.mapping.proto.Tra"
  "jectoryBuilderOptions\"\201\001\n\033AllTrajectoryB"
  "uilderOptions\022b\n\027options_with_sensor_ids"
  "\030\001 \003(\0132A.cartographer.mapping.proto.Traj"
  "ectoryBuilderOptionsWithSensorIdsb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_deps[3] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_sccs[6] = {
  &scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
  &scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
  &scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
  &scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
  &scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
  &scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, "cartographer/mapping/proto/trajectory_builder_options.proto", 1521,
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, 6, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorId_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[0];
}
bool SensorId_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorId_SensorType SensorId::RANGE;
constexpr SensorId_SensorType SensorId::IMU;
constexpr SensorId_SensorType SensorId::ODOMETRY;
constexpr SensorId_SensorType SensorId::FIXED_FRAME_POSE;
constexpr SensorId_SensorType SensorId::LANDMARK;
constexpr SensorId_SensorType SensorId::LOCAL_SLAM_RESULT;
constexpr SensorId_SensorType SensorId::SensorType_MIN;
constexpr SensorId_SensorType SensorId::SensorType_MAX;
constexpr int SensorId::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InitialTrajectoryPose::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class InitialTrajectoryPose::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& relative_pose(const InitialTrajectoryPose* msg);
};

const ::cartographer::transform::proto::Rigid3d&
InitialTrajectoryPose::_Internal::relative_pose(const InitialTrajectoryPose* msg) {
  return *msg->relative_pose_;
}
void InitialTrajectoryPose::clear_relative_pose() {
  if (GetArenaNoVirtual() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
}
InitialTrajectoryPose::InitialTrajectoryPose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}
InitialTrajectoryPose::InitialTrajectoryPose(const InitialTrajectoryPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_relative_pose()) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_trajectory_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}

void InitialTrajectoryPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::memset(&relative_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&relative_pose_)) + sizeof(to_trajectory_id_));
}

InitialTrajectoryPose::~InitialTrajectoryPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.InitialTrajectoryPose)
  SharedDtor();
}

void InitialTrajectoryPose::SharedDtor() {
  if (this != internal_default_instance()) delete relative_pose_;
}

void InitialTrajectoryPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialTrajectoryPose& InitialTrajectoryPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void InitialTrajectoryPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  _internal_metadata_.Clear();
}

const char* InitialTrajectoryPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d relative_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_trajectory_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialTrajectoryPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relative_pose(this), target, stream);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to_trajectory_id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.InitialTrajectoryPose)
  return target;
}

size_t InitialTrajectoryPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.InitialTrajectoryPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_pose_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialTrajectoryPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialTrajectoryPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialTrajectoryPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.InitialTrajectoryPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.InitialTrajectoryPose)
    MergeFrom(*source);
  }
}

void InitialTrajectoryPose::MergeFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relative_pose()) {
    _internal_mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_relative_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.to_trajectory_id() != 0) {
    _internal_set_to_trajectory_id(from._internal_to_trajectory_id());
  }
}

void InitialTrajectoryPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialTrajectoryPose::CopyFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialTrajectoryPose::IsInitialized() const {
  return true;
}

void InitialTrajectoryPose::InternalSwap(InitialTrajectoryPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(relative_pose_, other->relative_pose_);
  swap(timestamp_, other->timestamp_);
  swap(to_trajectory_id_, other->to_trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialTrajectoryPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InitAsDefaultInstance() {
}
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_Internal {
 public:
};

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}
TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_submaps_to_keep_ = from.max_submaps_to_keep_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedCtor() {
  max_submaps_to_keep_ = 0;
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::~TrajectoryBuilderOptions_PureLocalizationTrimmerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedDtor() {
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_submaps_to_keep_ = 0;
  _internal_metadata_.Clear();
}

const char* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_submaps_to_keep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_submaps_to_keep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_submaps_to_keep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return target;
}

size_t TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_submaps_to_keep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_submaps_to_keep() != 0) {
    _internal_set_max_submaps_to_keep(from._internal_max_submaps_to_keep());
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSwap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_submaps_to_keep_, other->max_submaps_to_keep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryBuilderOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_2d_options_ = const_cast< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D*>(
      ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_3d_options_ = const_cast< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D*>(
      ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->initial_trajectory_pose_ = const_cast< ::cartographer::mapping::proto::InitialTrajectoryPose*>(
      ::cartographer::mapping::proto::InitialTrajectoryPose::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->pure_localization_trimmer_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::internal_default_instance());
}
class TrajectoryBuilderOptions::_Internal {
 public:
  static const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& trajectory_builder_2d_options(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& trajectory_builder_3d_options(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::InitialTrajectoryPose& initial_trajectory_pose(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& pure_localization_trimmer(const TrajectoryBuilderOptions* msg);
};

const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D&
TrajectoryBuilderOptions::_Internal::trajectory_builder_2d_options(const TrajectoryBuilderOptions* msg) {
  return *msg->trajectory_builder_2d_options_;
}
const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D&
TrajectoryBuilderOptions::_Internal::trajectory_builder_3d_options(const TrajectoryBuilderOptions* msg) {
  return *msg->trajectory_builder_3d_options_;
}
const ::cartographer::mapping::proto::InitialTrajectoryPose&
TrajectoryBuilderOptions::_Internal::initial_trajectory_pose(const TrajectoryBuilderOptions* msg) {
  return *msg->initial_trajectory_pose_;
}
const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions&
TrajectoryBuilderOptions::_Internal::pure_localization_trimmer(const TrajectoryBuilderOptions* msg) {
  return *msg->pure_localization_trimmer_;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_2d_options_ != nullptr) {
    delete trajectory_builder_2d_options_;
  }
  trajectory_builder_2d_options_ = nullptr;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_3d_options_ != nullptr) {
    delete trajectory_builder_3d_options_;
  }
  trajectory_builder_3d_options_ = nullptr;
}
TrajectoryBuilderOptions::TrajectoryBuilderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}
TrajectoryBuilderOptions::TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trajectory_builder_2d_options()) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D(*from.trajectory_builder_2d_options_);
  } else {
    trajectory_builder_2d_options_ = nullptr;
  }
  if (from._internal_has_trajectory_builder_3d_options()) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D(*from.trajectory_builder_3d_options_);
  } else {
    trajectory_builder_3d_options_ = nullptr;
  }
  if (from._internal_has_initial_trajectory_pose()) {
    initial_trajectory_pose_ = new ::cartographer::mapping::proto::InitialTrajectoryPose(*from.initial_trajectory_pose_);
  } else {
    initial_trajectory_pose_ = nullptr;
  }
  if (from._internal_has_pure_localization_trimmer()) {
    pure_localization_trimmer_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(*from.pure_localization_trimmer_);
  } else {
    pure_localization_trimmer_ = nullptr;
  }
  ::memcpy(&pure_localization_, &from.pure_localization_,
    static_cast<size_t>(reinterpret_cast<char*>(&collate_landmarks_) -
    reinterpret_cast<char*>(&pure_localization_)) + sizeof(collate_landmarks_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::memset(&trajectory_builder_2d_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collate_landmarks_) -
      reinterpret_cast<char*>(&trajectory_builder_2d_options_)) + sizeof(collate_landmarks_));
}

TrajectoryBuilderOptions::~TrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_2d_options_;
  if (this != internal_default_instance()) delete trajectory_builder_3d_options_;
  if (this != internal_default_instance()) delete initial_trajectory_pose_;
  if (this != internal_default_instance()) delete pure_localization_trimmer_;
}

void TrajectoryBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptions& TrajectoryBuilderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajectory_builder_2d_options_ != nullptr) {
    delete trajectory_builder_2d_options_;
  }
  trajectory_builder_2d_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_3d_options_ != nullptr) {
    delete trajectory_builder_3d_options_;
  }
  trajectory_builder_3d_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initial_trajectory_pose_ != nullptr) {
    delete initial_trajectory_pose_;
  }
  initial_trajectory_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pure_localization_trimmer_ != nullptr) {
    delete pure_localization_trimmer_;
  }
  pure_localization_trimmer_ = nullptr;
  ::memset(&pure_localization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collate_landmarks_) -
      reinterpret_cast<char*>(&pure_localization_)) + sizeof(collate_landmarks_));
  _internal_metadata_.Clear();
}

const char* TrajectoryBuilderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_builder_2d_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_builder_3d_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pure_localization = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pure_localization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_trajectory_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pure_localization_trimmer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool collate_fixed_frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          collate_fixed_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool collate_landmarks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          collate_landmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryBuilderOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trajectory_builder_2d_options(this), target, stream);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trajectory_builder_3d_options(this), target, stream);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pure_localization(), target);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::initial_trajectory_pose(this), target, stream);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pure_localization_trimmer(this), target, stream);
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_collate_fixed_frame(), target);
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_collate_landmarks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return target;
}

size_t TrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_builder_2d_options_);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_builder_3d_options_);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_trajectory_pose_);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pure_localization_trimmer_);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions::MergeFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_builder_2d_options()) {
    _internal_mutable_trajectory_builder_2d_options()->::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::MergeFrom(from._internal_trajectory_builder_2d_options());
  }
  if (from.has_trajectory_builder_3d_options()) {
    _internal_mutable_trajectory_builder_3d_options()->::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::MergeFrom(from._internal_trajectory_builder_3d_options());
  }
  if (from.has_initial_trajectory_pose()) {
    _internal_mutable_initial_trajectory_pose()->::cartographer::mapping::proto::InitialTrajectoryPose::MergeFrom(from._internal_initial_trajectory_pose());
  }
  if (from.has_pure_localization_trimmer()) {
    _internal_mutable_pure_localization_trimmer()->::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(from._internal_pure_localization_trimmer());
  }
  if (from.pure_localization() != 0) {
    _internal_set_pure_localization(from._internal_pure_localization());
  }
  if (from.collate_fixed_frame() != 0) {
    _internal_set_collate_fixed_frame(from._internal_collate_fixed_frame());
  }
  if (from.collate_landmarks() != 0) {
    _internal_set_collate_landmarks(from._internal_collate_landmarks());
  }
}

void TrajectoryBuilderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions::CopyFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions::InternalSwap(TrajectoryBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_builder_2d_options_, other->trajectory_builder_2d_options_);
  swap(trajectory_builder_3d_options_, other->trajectory_builder_3d_options_);
  swap(initial_trajectory_pose_, other->initial_trajectory_pose_);
  swap(pure_localization_trimmer_, other->pure_localization_trimmer_);
  swap(pure_localization_, other->pure_localization_);
  swap(collate_fixed_frame_, other->collate_fixed_frame_);
  swap(collate_landmarks_, other->collate_landmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryBuilderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorId::InitAsDefaultInstance() {
}
class SensorId::_Internal {
 public:
};

SensorId::SensorId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SensorId)
}
SensorId::SensorId(const SensorId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SensorId)
}

void SensorId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SensorId::~SensorId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SensorId)
  SharedDtor();
}

void SensorId::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorId& SensorId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void SensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SensorId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* SensorId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SensorId.SensorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cartographer::mapping::proto::SensorId_SensorType>(val));
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.mapping.proto.SensorId.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SensorId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SensorId)
  return target;
}

size_t SensorId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SensorId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SensorId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SensorId)
    MergeFrom(*source);
  }
}

void SensorId::MergeFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SensorId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorId::CopyFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorId::IsInitialized() const {
  return true;
}

void SensorId::InternalSwap(SensorId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryBuilderOptionsWithSensorIds::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TrajectoryBuilderOptionsWithSensorIds_default_instance_._instance.get_mutable()->trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions::internal_default_instance());
}
class TrajectoryBuilderOptionsWithSensorIds::_Internal {
 public:
  static const ::cartographer::mapping::proto::TrajectoryBuilderOptions& trajectory_builder_options(const TrajectoryBuilderOptionsWithSensorIds* msg);
};

const ::cartographer::mapping::proto::TrajectoryBuilderOptions&
TrajectoryBuilderOptionsWithSensorIds::_Internal::trajectory_builder_options(const TrajectoryBuilderOptionsWithSensorIds* msg) {
  return *msg->trajectory_builder_options_;
}
TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}
TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds(const TrajectoryBuilderOptionsWithSensorIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trajectory_builder_options()) {
    trajectory_builder_options_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions(*from.trajectory_builder_options_);
  } else {
    trajectory_builder_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

void TrajectoryBuilderOptionsWithSensorIds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  trajectory_builder_options_ = nullptr;
}

TrajectoryBuilderOptionsWithSensorIds::~TrajectoryBuilderOptionsWithSensorIds() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  SharedDtor();
}

void TrajectoryBuilderOptionsWithSensorIds::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_options_;
}

void TrajectoryBuilderOptionsWithSensorIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptionsWithSensorIds& TrajectoryBuilderOptionsWithSensorIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptionsWithSensorIds::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_options_ != nullptr) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TrajectoryBuilderOptionsWithSensorIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_builder_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryBuilderOptionsWithSensorIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensor_id(i), target, stream);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trajectory_builder_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return target;
}

size_t TrajectoryBuilderOptionsWithSensorIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->sensor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_builder_options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptionsWithSensorIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryBuilderOptionsWithSensorIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_trajectory_builder_options()) {
    _internal_mutable_trajectory_builder_options()->::cartographer::mapping::proto::TrajectoryBuilderOptions::MergeFrom(from._internal_trajectory_builder_options());
  }
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptionsWithSensorIds::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptionsWithSensorIds::InternalSwap(TrajectoryBuilderOptionsWithSensorIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensor_id_.InternalSwap(&other->sensor_id_);
  swap(trajectory_builder_options_, other->trajectory_builder_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryBuilderOptionsWithSensorIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllTrajectoryBuilderOptions::InitAsDefaultInstance() {
}
class AllTrajectoryBuilderOptions::_Internal {
 public:
};

AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}
AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions(const AllTrajectoryBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      options_with_sensor_ids_(from.options_with_sensor_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

void AllTrajectoryBuilderOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
}

AllTrajectoryBuilderOptions::~AllTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  SharedDtor();
}

void AllTrajectoryBuilderOptions::SharedDtor() {
}

void AllTrajectoryBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllTrajectoryBuilderOptions& AllTrajectoryBuilderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void AllTrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_with_sensor_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* AllTrajectoryBuilderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options_with_sensor_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllTrajectoryBuilderOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_with_sensor_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_options_with_sensor_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return target;
}

size_t AllTrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  total_size += 1UL * this->_internal_options_with_sensor_ids_size();
  for (const auto& msg : this->options_with_sensor_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllTrajectoryBuilderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTrajectoryBuilderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllTrajectoryBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void AllTrajectoryBuilderOptions::MergeFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_with_sensor_ids_.MergeFrom(from.options_with_sensor_ids_);
}

void AllTrajectoryBuilderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTrajectoryBuilderOptions::CopyFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void AllTrajectoryBuilderOptions::InternalSwap(AllTrajectoryBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  options_with_sensor_ids_.InternalSwap(&other->options_with_sensor_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllTrajectoryBuilderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::InitialTrajectoryPose* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::InitialTrajectoryPose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::InitialTrajectoryPose >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SensorId* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SensorId >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SensorId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
