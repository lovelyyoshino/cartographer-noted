// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/range_data_inserter_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/probability_grid_range_data_inserter_options_2d.pb.h"
#include "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class RangeDataInserterOptions;
class RangeDataInserterOptionsDefaultTypeInternal;
extern RangeDataInserterOptionsDefaultTypeInternal _RangeDataInserterOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::RangeDataInserterOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::RangeDataInserterOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

enum RangeDataInserterOptions_RangeDataInserterType : int {
  RangeDataInserterOptions_RangeDataInserterType_INVALID_INSERTER = 0,
  RangeDataInserterOptions_RangeDataInserterType_PROBABILITY_GRID_INSERTER_2D = 1,
  RangeDataInserterOptions_RangeDataInserterType_TSDF_INSERTER_2D = 2,
  RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterOptions_RangeDataInserterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterOptions_RangeDataInserterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RangeDataInserterOptions_RangeDataInserterType_IsValid(int value);
constexpr RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_MIN = RangeDataInserterOptions_RangeDataInserterType_INVALID_INSERTER;
constexpr RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_MAX = RangeDataInserterOptions_RangeDataInserterType_TSDF_INSERTER_2D;
constexpr int RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_ARRAYSIZE = RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeDataInserterOptions_RangeDataInserterType_descriptor();
template<typename T>
inline const std::string& RangeDataInserterOptions_RangeDataInserterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeDataInserterOptions_RangeDataInserterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeDataInserterOptions_RangeDataInserterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RangeDataInserterOptions_RangeDataInserterType_descriptor(), enum_t_value);
}
inline bool RangeDataInserterOptions_RangeDataInserterType_Parse(
    const std::string& name, RangeDataInserterOptions_RangeDataInserterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RangeDataInserterOptions_RangeDataInserterType>(
    RangeDataInserterOptions_RangeDataInserterType_descriptor(), name, value);
}
// ===================================================================

class RangeDataInserterOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.RangeDataInserterOptions) */ {
 public:
  RangeDataInserterOptions();
  virtual ~RangeDataInserterOptions();

  RangeDataInserterOptions(const RangeDataInserterOptions& from);
  RangeDataInserterOptions(RangeDataInserterOptions&& from) noexcept
    : RangeDataInserterOptions() {
    *this = ::std::move(from);
  }

  inline RangeDataInserterOptions& operator=(const RangeDataInserterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeDataInserterOptions& operator=(RangeDataInserterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeDataInserterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeDataInserterOptions* internal_default_instance() {
    return reinterpret_cast<const RangeDataInserterOptions*>(
               &_RangeDataInserterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RangeDataInserterOptions& a, RangeDataInserterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeDataInserterOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeDataInserterOptions* New() const final {
    return CreateMaybeMessage<RangeDataInserterOptions>(nullptr);
  }

  RangeDataInserterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeDataInserterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeDataInserterOptions& from);
  void MergeFrom(const RangeDataInserterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeDataInserterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.RangeDataInserterOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RangeDataInserterOptions_RangeDataInserterType RangeDataInserterType;
  static constexpr RangeDataInserterType INVALID_INSERTER =
    RangeDataInserterOptions_RangeDataInserterType_INVALID_INSERTER;
  static constexpr RangeDataInserterType PROBABILITY_GRID_INSERTER_2D =
    RangeDataInserterOptions_RangeDataInserterType_PROBABILITY_GRID_INSERTER_2D;
  static constexpr RangeDataInserterType TSDF_INSERTER_2D =
    RangeDataInserterOptions_RangeDataInserterType_TSDF_INSERTER_2D;
  static inline bool RangeDataInserterType_IsValid(int value) {
    return RangeDataInserterOptions_RangeDataInserterType_IsValid(value);
  }
  static constexpr RangeDataInserterType RangeDataInserterType_MIN =
    RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_MIN;
  static constexpr RangeDataInserterType RangeDataInserterType_MAX =
    RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_MAX;
  static constexpr int RangeDataInserterType_ARRAYSIZE =
    RangeDataInserterOptions_RangeDataInserterType_RangeDataInserterType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RangeDataInserterType_descriptor() {
    return RangeDataInserterOptions_RangeDataInserterType_descriptor();
  }
  template<typename T>
  static inline const std::string& RangeDataInserterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RangeDataInserterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RangeDataInserterType_Name.");
    return RangeDataInserterOptions_RangeDataInserterType_Name(enum_t_value);
  }
  static inline bool RangeDataInserterType_Parse(const std::string& name,
      RangeDataInserterType* value) {
    return RangeDataInserterOptions_RangeDataInserterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProbabilityGridRangeDataInserterOptions2DFieldNumber = 2,
    kTsdfRangeDataInserterOptions2DFieldNumber = 3,
    kRangeDataInserterTypeFieldNumber = 1,
  };
  // .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
  bool has_probability_grid_range_data_inserter_options_2d() const;
  private:
  bool _internal_has_probability_grid_range_data_inserter_options_2d() const;
  public:
  void clear_probability_grid_range_data_inserter_options_2d();
  const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D& probability_grid_range_data_inserter_options_2d() const;
  ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* release_probability_grid_range_data_inserter_options_2d();
  ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* mutable_probability_grid_range_data_inserter_options_2d();
  void set_allocated_probability_grid_range_data_inserter_options_2d(::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* probability_grid_range_data_inserter_options_2d);
  private:
  const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D& _internal_probability_grid_range_data_inserter_options_2d() const;
  ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* _internal_mutable_probability_grid_range_data_inserter_options_2d();
  public:

  // .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
  bool has_tsdf_range_data_inserter_options_2d() const;
  private:
  bool _internal_has_tsdf_range_data_inserter_options_2d() const;
  public:
  void clear_tsdf_range_data_inserter_options_2d();
  const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D& tsdf_range_data_inserter_options_2d() const;
  ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* release_tsdf_range_data_inserter_options_2d();
  ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* mutable_tsdf_range_data_inserter_options_2d();
  void set_allocated_tsdf_range_data_inserter_options_2d(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* tsdf_range_data_inserter_options_2d);
  private:
  const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D& _internal_tsdf_range_data_inserter_options_2d() const;
  ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* _internal_mutable_tsdf_range_data_inserter_options_2d();
  public:

  // .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
  void clear_range_data_inserter_type();
  ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType range_data_inserter_type() const;
  void set_range_data_inserter_type(::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value);
  private:
  ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType _internal_range_data_inserter_type() const;
  void _internal_set_range_data_inserter_type(::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.RangeDataInserterOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* probability_grid_range_data_inserter_options_2d_;
  ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* tsdf_range_data_inserter_options_2d_;
  int range_data_inserter_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RangeDataInserterOptions

// .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
inline void RangeDataInserterOptions::clear_range_data_inserter_type() {
  range_data_inserter_type_ = 0;
}
inline ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::_internal_range_data_inserter_type() const {
  return static_cast< ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType >(range_data_inserter_type_);
}
inline ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::range_data_inserter_type() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.RangeDataInserterOptions.range_data_inserter_type)
  return _internal_range_data_inserter_type();
}
inline void RangeDataInserterOptions::_internal_set_range_data_inserter_type(::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value) {
  
  range_data_inserter_type_ = value;
}
inline void RangeDataInserterOptions::set_range_data_inserter_type(::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType value) {
  _internal_set_range_data_inserter_type(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.RangeDataInserterOptions.range_data_inserter_type)
}

// .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
inline bool RangeDataInserterOptions::_internal_has_probability_grid_range_data_inserter_options_2d() const {
  return this != internal_default_instance() && probability_grid_range_data_inserter_options_2d_ != nullptr;
}
inline bool RangeDataInserterOptions::has_probability_grid_range_data_inserter_options_2d() const {
  return _internal_has_probability_grid_range_data_inserter_options_2d();
}
inline const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D& RangeDataInserterOptions::_internal_probability_grid_range_data_inserter_options_2d() const {
  const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* p = probability_grid_range_data_inserter_options_2d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D*>(
      &::cartographer::mapping::proto::_ProbabilityGridRangeDataInserterOptions2D_default_instance_);
}
inline const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D& RangeDataInserterOptions::probability_grid_range_data_inserter_options_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.RangeDataInserterOptions.probability_grid_range_data_inserter_options_2d)
  return _internal_probability_grid_range_data_inserter_options_2d();
}
inline ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* RangeDataInserterOptions::release_probability_grid_range_data_inserter_options_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.RangeDataInserterOptions.probability_grid_range_data_inserter_options_2d)
  
  ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* temp = probability_grid_range_data_inserter_options_2d_;
  probability_grid_range_data_inserter_options_2d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* RangeDataInserterOptions::_internal_mutable_probability_grid_range_data_inserter_options_2d() {
  
  if (probability_grid_range_data_inserter_options_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D>(GetArenaNoVirtual());
    probability_grid_range_data_inserter_options_2d_ = p;
  }
  return probability_grid_range_data_inserter_options_2d_;
}
inline ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* RangeDataInserterOptions::mutable_probability_grid_range_data_inserter_options_2d() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.RangeDataInserterOptions.probability_grid_range_data_inserter_options_2d)
  return _internal_mutable_probability_grid_range_data_inserter_options_2d();
}
inline void RangeDataInserterOptions::set_allocated_probability_grid_range_data_inserter_options_2d(::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D* probability_grid_range_data_inserter_options_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(probability_grid_range_data_inserter_options_2d_);
  }
  if (probability_grid_range_data_inserter_options_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probability_grid_range_data_inserter_options_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probability_grid_range_data_inserter_options_2d, submessage_arena);
    }
    
  } else {
    
  }
  probability_grid_range_data_inserter_options_2d_ = probability_grid_range_data_inserter_options_2d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.RangeDataInserterOptions.probability_grid_range_data_inserter_options_2d)
}

// .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
inline bool RangeDataInserterOptions::_internal_has_tsdf_range_data_inserter_options_2d() const {
  return this != internal_default_instance() && tsdf_range_data_inserter_options_2d_ != nullptr;
}
inline bool RangeDataInserterOptions::has_tsdf_range_data_inserter_options_2d() const {
  return _internal_has_tsdf_range_data_inserter_options_2d();
}
inline const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D& RangeDataInserterOptions::_internal_tsdf_range_data_inserter_options_2d() const {
  const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* p = tsdf_range_data_inserter_options_2d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D*>(
      &::cartographer::mapping::proto::_TSDFRangeDataInserterOptions2D_default_instance_);
}
inline const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D& RangeDataInserterOptions::tsdf_range_data_inserter_options_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.RangeDataInserterOptions.tsdf_range_data_inserter_options_2d)
  return _internal_tsdf_range_data_inserter_options_2d();
}
inline ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* RangeDataInserterOptions::release_tsdf_range_data_inserter_options_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.RangeDataInserterOptions.tsdf_range_data_inserter_options_2d)
  
  ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* temp = tsdf_range_data_inserter_options_2d_;
  tsdf_range_data_inserter_options_2d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* RangeDataInserterOptions::_internal_mutable_tsdf_range_data_inserter_options_2d() {
  
  if (tsdf_range_data_inserter_options_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D>(GetArenaNoVirtual());
    tsdf_range_data_inserter_options_2d_ = p;
  }
  return tsdf_range_data_inserter_options_2d_;
}
inline ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* RangeDataInserterOptions::mutable_tsdf_range_data_inserter_options_2d() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.RangeDataInserterOptions.tsdf_range_data_inserter_options_2d)
  return _internal_mutable_tsdf_range_data_inserter_options_2d();
}
inline void RangeDataInserterOptions::set_allocated_tsdf_range_data_inserter_options_2d(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* tsdf_range_data_inserter_options_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsdf_range_data_inserter_options_2d_);
  }
  if (tsdf_range_data_inserter_options_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tsdf_range_data_inserter_options_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsdf_range_data_inserter_options_2d, submessage_arena);
    }
    
  } else {
    
  }
  tsdf_range_data_inserter_options_2d_ = tsdf_range_data_inserter_options_2d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.RangeDataInserterOptions.tsdf_range_data_inserter_options_2d)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType>() {
  return ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto
