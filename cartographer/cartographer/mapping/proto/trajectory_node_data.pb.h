// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_node_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/sensor/proto/sensor.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class TrajectoryNodeData;
class TrajectoryNodeDataDefaultTypeInternal;
extern TrajectoryNodeDataDefaultTypeInternal _TrajectoryNodeData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::TrajectoryNodeData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryNodeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class TrajectoryNodeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryNodeData) */ {
 public:
  TrajectoryNodeData();
  virtual ~TrajectoryNodeData();

  TrajectoryNodeData(const TrajectoryNodeData& from);
  TrajectoryNodeData(TrajectoryNodeData&& from) noexcept
    : TrajectoryNodeData() {
    *this = ::std::move(from);
  }

  inline TrajectoryNodeData& operator=(const TrajectoryNodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryNodeData& operator=(TrajectoryNodeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryNodeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryNodeData* internal_default_instance() {
    return reinterpret_cast<const TrajectoryNodeData*>(
               &_TrajectoryNodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryNodeData& a, TrajectoryNodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryNodeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryNodeData* New() const final {
    return CreateMaybeMessage<TrajectoryNodeData>(nullptr);
  }

  TrajectoryNodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryNodeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryNodeData& from);
  void MergeFrom(const TrajectoryNodeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryNodeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.TrajectoryNodeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationalScanMatcherHistogramFieldNumber = 6,
    kGravityAlignmentFieldNumber = 2,
    kFilteredGravityAlignedPointCloudFieldNumber = 3,
    kHighResolutionPointCloudFieldNumber = 4,
    kLowResolutionPointCloudFieldNumber = 5,
    kLocalPoseFieldNumber = 7,
    kTimestampFieldNumber = 1,
  };
  // repeated float rotational_scan_matcher_histogram = 6;
  int rotational_scan_matcher_histogram_size() const;
  private:
  int _internal_rotational_scan_matcher_histogram_size() const;
  public:
  void clear_rotational_scan_matcher_histogram();
  private:
  float _internal_rotational_scan_matcher_histogram(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotational_scan_matcher_histogram() const;
  void _internal_add_rotational_scan_matcher_histogram(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotational_scan_matcher_histogram();
  public:
  float rotational_scan_matcher_histogram(int index) const;
  void set_rotational_scan_matcher_histogram(int index, float value);
  void add_rotational_scan_matcher_histogram(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotational_scan_matcher_histogram() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotational_scan_matcher_histogram();

  // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  bool has_gravity_alignment() const;
  private:
  bool _internal_has_gravity_alignment() const;
  public:
  void clear_gravity_alignment();
  const ::cartographer::transform::proto::Quaterniond& gravity_alignment() const;
  ::cartographer::transform::proto::Quaterniond* release_gravity_alignment();
  ::cartographer::transform::proto::Quaterniond* mutable_gravity_alignment();
  void set_allocated_gravity_alignment(::cartographer::transform::proto::Quaterniond* gravity_alignment);
  private:
  const ::cartographer::transform::proto::Quaterniond& _internal_gravity_alignment() const;
  ::cartographer::transform::proto::Quaterniond* _internal_mutable_gravity_alignment();
  public:

  // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  bool has_filtered_gravity_aligned_point_cloud() const;
  private:
  bool _internal_has_filtered_gravity_aligned_point_cloud() const;
  public:
  void clear_filtered_gravity_aligned_point_cloud();
  const ::cartographer::sensor::proto::CompressedPointCloud& filtered_gravity_aligned_point_cloud() const;
  ::cartographer::sensor::proto::CompressedPointCloud* release_filtered_gravity_aligned_point_cloud();
  ::cartographer::sensor::proto::CompressedPointCloud* mutable_filtered_gravity_aligned_point_cloud();
  void set_allocated_filtered_gravity_aligned_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* filtered_gravity_aligned_point_cloud);
  private:
  const ::cartographer::sensor::proto::CompressedPointCloud& _internal_filtered_gravity_aligned_point_cloud() const;
  ::cartographer::sensor::proto::CompressedPointCloud* _internal_mutable_filtered_gravity_aligned_point_cloud();
  public:

  // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  bool has_high_resolution_point_cloud() const;
  private:
  bool _internal_has_high_resolution_point_cloud() const;
  public:
  void clear_high_resolution_point_cloud();
  const ::cartographer::sensor::proto::CompressedPointCloud& high_resolution_point_cloud() const;
  ::cartographer::sensor::proto::CompressedPointCloud* release_high_resolution_point_cloud();
  ::cartographer::sensor::proto::CompressedPointCloud* mutable_high_resolution_point_cloud();
  void set_allocated_high_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* high_resolution_point_cloud);
  private:
  const ::cartographer::sensor::proto::CompressedPointCloud& _internal_high_resolution_point_cloud() const;
  ::cartographer::sensor::proto::CompressedPointCloud* _internal_mutable_high_resolution_point_cloud();
  public:

  // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  bool has_low_resolution_point_cloud() const;
  private:
  bool _internal_has_low_resolution_point_cloud() const;
  public:
  void clear_low_resolution_point_cloud();
  const ::cartographer::sensor::proto::CompressedPointCloud& low_resolution_point_cloud() const;
  ::cartographer::sensor::proto::CompressedPointCloud* release_low_resolution_point_cloud();
  ::cartographer::sensor::proto::CompressedPointCloud* mutable_low_resolution_point_cloud();
  void set_allocated_low_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* low_resolution_point_cloud);
  private:
  const ::cartographer::sensor::proto::CompressedPointCloud& _internal_low_resolution_point_cloud() const;
  ::cartographer::sensor::proto::CompressedPointCloud* _internal_mutable_low_resolution_point_cloud();
  public:

  // .cartographer.transform.proto.Rigid3d local_pose = 7;
  bool has_local_pose() const;
  private:
  bool _internal_has_local_pose() const;
  public:
  void clear_local_pose();
  const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  ::cartographer::transform::proto::Rigid3d* release_local_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_local_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_local_pose();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryNodeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotational_scan_matcher_histogram_;
  mutable std::atomic<int> _rotational_scan_matcher_histogram_cached_byte_size_;
  ::cartographer::transform::proto::Quaterniond* gravity_alignment_;
  ::cartographer::sensor::proto::CompressedPointCloud* filtered_gravity_aligned_point_cloud_;
  ::cartographer::sensor::proto::CompressedPointCloud* high_resolution_point_cloud_;
  ::cartographer::sensor::proto::CompressedPointCloud* low_resolution_point_cloud_;
  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryNodeData

// int64 timestamp = 1;
inline void TrajectoryNodeData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrajectoryNodeData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrajectoryNodeData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.timestamp)
  return _internal_timestamp();
}
inline void TrajectoryNodeData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void TrajectoryNodeData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryNodeData.timestamp)
}

// .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
inline bool TrajectoryNodeData::_internal_has_gravity_alignment() const {
  return this != internal_default_instance() && gravity_alignment_ != nullptr;
}
inline bool TrajectoryNodeData::has_gravity_alignment() const {
  return _internal_has_gravity_alignment();
}
inline const ::cartographer::transform::proto::Quaterniond& TrajectoryNodeData::_internal_gravity_alignment() const {
  const ::cartographer::transform::proto::Quaterniond* p = gravity_alignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Quaterniond*>(
      &::cartographer::transform::proto::_Quaterniond_default_instance_);
}
inline const ::cartographer::transform::proto::Quaterniond& TrajectoryNodeData::gravity_alignment() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  return _internal_gravity_alignment();
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::release_gravity_alignment() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  
  ::cartographer::transform::proto::Quaterniond* temp = gravity_alignment_;
  gravity_alignment_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::_internal_mutable_gravity_alignment() {
  
  if (gravity_alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Quaterniond>(GetArenaNoVirtual());
    gravity_alignment_ = p;
  }
  return gravity_alignment_;
}
inline ::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::mutable_gravity_alignment() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  return _internal_mutable_gravity_alignment();
}
inline void TrajectoryNodeData::set_allocated_gravity_alignment(::cartographer::transform::proto::Quaterniond* gravity_alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gravity_alignment_);
  }
  if (gravity_alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gravity_alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gravity_alignment, submessage_arena);
    }
    
  } else {
    
  }
  gravity_alignment_ = gravity_alignment;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
}

// .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
inline bool TrajectoryNodeData::_internal_has_filtered_gravity_aligned_point_cloud() const {
  return this != internal_default_instance() && filtered_gravity_aligned_point_cloud_ != nullptr;
}
inline bool TrajectoryNodeData::has_filtered_gravity_aligned_point_cloud() const {
  return _internal_has_filtered_gravity_aligned_point_cloud();
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::_internal_filtered_gravity_aligned_point_cloud() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = filtered_gravity_aligned_point_cloud_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::filtered_gravity_aligned_point_cloud() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  return _internal_filtered_gravity_aligned_point_cloud();
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_filtered_gravity_aligned_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  
  ::cartographer::sensor::proto::CompressedPointCloud* temp = filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::_internal_mutable_filtered_gravity_aligned_point_cloud() {
  
  if (filtered_gravity_aligned_point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::CompressedPointCloud>(GetArenaNoVirtual());
    filtered_gravity_aligned_point_cloud_ = p;
  }
  return filtered_gravity_aligned_point_cloud_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_filtered_gravity_aligned_point_cloud() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  return _internal_mutable_filtered_gravity_aligned_point_cloud();
}
inline void TrajectoryNodeData::set_allocated_filtered_gravity_aligned_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* filtered_gravity_aligned_point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtered_gravity_aligned_point_cloud_);
  }
  if (filtered_gravity_aligned_point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filtered_gravity_aligned_point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filtered_gravity_aligned_point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  filtered_gravity_aligned_point_cloud_ = filtered_gravity_aligned_point_cloud;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
}

// .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
inline bool TrajectoryNodeData::_internal_has_high_resolution_point_cloud() const {
  return this != internal_default_instance() && high_resolution_point_cloud_ != nullptr;
}
inline bool TrajectoryNodeData::has_high_resolution_point_cloud() const {
  return _internal_has_high_resolution_point_cloud();
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::_internal_high_resolution_point_cloud() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = high_resolution_point_cloud_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::high_resolution_point_cloud() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  return _internal_high_resolution_point_cloud();
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_high_resolution_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  
  ::cartographer::sensor::proto::CompressedPointCloud* temp = high_resolution_point_cloud_;
  high_resolution_point_cloud_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::_internal_mutable_high_resolution_point_cloud() {
  
  if (high_resolution_point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::CompressedPointCloud>(GetArenaNoVirtual());
    high_resolution_point_cloud_ = p;
  }
  return high_resolution_point_cloud_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_high_resolution_point_cloud() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  return _internal_mutable_high_resolution_point_cloud();
}
inline void TrajectoryNodeData::set_allocated_high_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* high_resolution_point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_resolution_point_cloud_);
  }
  if (high_resolution_point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      high_resolution_point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_resolution_point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  high_resolution_point_cloud_ = high_resolution_point_cloud;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
}

// .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
inline bool TrajectoryNodeData::_internal_has_low_resolution_point_cloud() const {
  return this != internal_default_instance() && low_resolution_point_cloud_ != nullptr;
}
inline bool TrajectoryNodeData::has_low_resolution_point_cloud() const {
  return _internal_has_low_resolution_point_cloud();
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::_internal_low_resolution_point_cloud() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = low_resolution_point_cloud_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::low_resolution_point_cloud() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  return _internal_low_resolution_point_cloud();
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_low_resolution_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  
  ::cartographer::sensor::proto::CompressedPointCloud* temp = low_resolution_point_cloud_;
  low_resolution_point_cloud_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::_internal_mutable_low_resolution_point_cloud() {
  
  if (low_resolution_point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::CompressedPointCloud>(GetArenaNoVirtual());
    low_resolution_point_cloud_ = p;
  }
  return low_resolution_point_cloud_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_low_resolution_point_cloud() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  return _internal_mutable_low_resolution_point_cloud();
}
inline void TrajectoryNodeData::set_allocated_low_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* low_resolution_point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_resolution_point_cloud_);
  }
  if (low_resolution_point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_resolution_point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_resolution_point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  low_resolution_point_cloud_ = low_resolution_point_cloud;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
}

// repeated float rotational_scan_matcher_histogram = 6;
inline int TrajectoryNodeData::_internal_rotational_scan_matcher_histogram_size() const {
  return rotational_scan_matcher_histogram_.size();
}
inline int TrajectoryNodeData::rotational_scan_matcher_histogram_size() const {
  return _internal_rotational_scan_matcher_histogram_size();
}
inline void TrajectoryNodeData::clear_rotational_scan_matcher_histogram() {
  rotational_scan_matcher_histogram_.Clear();
}
inline float TrajectoryNodeData::_internal_rotational_scan_matcher_histogram(int index) const {
  return rotational_scan_matcher_histogram_.Get(index);
}
inline float TrajectoryNodeData::rotational_scan_matcher_histogram(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return _internal_rotational_scan_matcher_histogram(index);
}
inline void TrajectoryNodeData::set_rotational_scan_matcher_histogram(int index, float value) {
  rotational_scan_matcher_histogram_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
}
inline void TrajectoryNodeData::_internal_add_rotational_scan_matcher_histogram(float value) {
  rotational_scan_matcher_histogram_.Add(value);
}
inline void TrajectoryNodeData::add_rotational_scan_matcher_histogram(float value) {
  _internal_add_rotational_scan_matcher_histogram(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrajectoryNodeData::_internal_rotational_scan_matcher_histogram() const {
  return rotational_scan_matcher_histogram_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrajectoryNodeData::rotational_scan_matcher_histogram() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return _internal_rotational_scan_matcher_histogram();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrajectoryNodeData::_internal_mutable_rotational_scan_matcher_histogram() {
  return &rotational_scan_matcher_histogram_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrajectoryNodeData::mutable_rotational_scan_matcher_histogram() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return _internal_mutable_rotational_scan_matcher_histogram();
}

// .cartographer.transform.proto.Rigid3d local_pose = 7;
inline bool TrajectoryNodeData::_internal_has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != nullptr;
}
inline bool TrajectoryNodeData::has_local_pose() const {
  return _internal_has_local_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& TrajectoryNodeData::_internal_local_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = local_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& TrajectoryNodeData::local_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
  return _internal_local_pose();
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::_internal_mutable_local_pose() {
  
  if (local_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    local_pose_ = p;
  }
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::mutable_local_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
  return _internal_mutable_local_pose();
}
inline void TrajectoryNodeData::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_);
  }
  if (local_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_pose, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_ = local_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto
