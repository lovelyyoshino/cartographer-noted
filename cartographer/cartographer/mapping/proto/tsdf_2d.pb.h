// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/tsdf_2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class TSDF2D;
class TSDF2DDefaultTypeInternal;
extern TSDF2DDefaultTypeInternal _TSDF2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::TSDF2D* Arena::CreateMaybeMessage<::cartographer::mapping::proto::TSDF2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class TSDF2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TSDF2D) */ {
 public:
  TSDF2D();
  virtual ~TSDF2D();

  TSDF2D(const TSDF2D& from);
  TSDF2D(TSDF2D&& from) noexcept
    : TSDF2D() {
    *this = ::std::move(from);
  }

  inline TSDF2D& operator=(const TSDF2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSDF2D& operator=(TSDF2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSDF2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TSDF2D* internal_default_instance() {
    return reinterpret_cast<const TSDF2D*>(
               &_TSDF2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TSDF2D& a, TSDF2D& b) {
    a.Swap(&b);
  }
  inline void Swap(TSDF2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSDF2D* New() const final {
    return CreateMaybeMessage<TSDF2D>(nullptr);
  }

  TSDF2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSDF2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSDF2D& from);
  void MergeFrom(const TSDF2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSDF2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.TSDF2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightCellsFieldNumber = 3,
    kTruncationDistanceFieldNumber = 1,
    kMaxWeightFieldNumber = 2,
  };
  // repeated int32 weight_cells = 3;
  int weight_cells_size() const;
  private:
  int _internal_weight_cells_size() const;
  public:
  void clear_weight_cells();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight_cells(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_weight_cells() const;
  void _internal_add_weight_cells(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_weight_cells();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 weight_cells(int index) const;
  void set_weight_cells(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_weight_cells(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      weight_cells() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_weight_cells();

  // float truncation_distance = 1;
  void clear_truncation_distance();
  float truncation_distance() const;
  void set_truncation_distance(float value);
  private:
  float _internal_truncation_distance() const;
  void _internal_set_truncation_distance(float value);
  public:

  // float max_weight = 2;
  void clear_max_weight();
  float max_weight() const;
  void set_max_weight(float value);
  private:
  float _internal_max_weight() const;
  void _internal_set_max_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TSDF2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > weight_cells_;
  mutable std::atomic<int> _weight_cells_cached_byte_size_;
  float truncation_distance_;
  float max_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TSDF2D

// float truncation_distance = 1;
inline void TSDF2D::clear_truncation_distance() {
  truncation_distance_ = 0;
}
inline float TSDF2D::_internal_truncation_distance() const {
  return truncation_distance_;
}
inline float TSDF2D::truncation_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.truncation_distance)
  return _internal_truncation_distance();
}
inline void TSDF2D::_internal_set_truncation_distance(float value) {
  
  truncation_distance_ = value;
}
inline void TSDF2D::set_truncation_distance(float value) {
  _internal_set_truncation_distance(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.truncation_distance)
}

// float max_weight = 2;
inline void TSDF2D::clear_max_weight() {
  max_weight_ = 0;
}
inline float TSDF2D::_internal_max_weight() const {
  return max_weight_;
}
inline float TSDF2D::max_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.max_weight)
  return _internal_max_weight();
}
inline void TSDF2D::_internal_set_max_weight(float value) {
  
  max_weight_ = value;
}
inline void TSDF2D::set_max_weight(float value) {
  _internal_set_max_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.max_weight)
}

// repeated int32 weight_cells = 3;
inline int TSDF2D::_internal_weight_cells_size() const {
  return weight_cells_.size();
}
inline int TSDF2D::weight_cells_size() const {
  return _internal_weight_cells_size();
}
inline void TSDF2D::clear_weight_cells() {
  weight_cells_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSDF2D::_internal_weight_cells(int index) const {
  return weight_cells_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSDF2D::weight_cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.weight_cells)
  return _internal_weight_cells(index);
}
inline void TSDF2D::set_weight_cells(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  weight_cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.weight_cells)
}
inline void TSDF2D::_internal_add_weight_cells(::PROTOBUF_NAMESPACE_ID::int32 value) {
  weight_cells_.Add(value);
}
inline void TSDF2D::add_weight_cells(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_weight_cells(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TSDF2D.weight_cells)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TSDF2D::_internal_weight_cells() const {
  return weight_cells_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TSDF2D::weight_cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TSDF2D.weight_cells)
  return _internal_weight_cells();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TSDF2D::_internal_mutable_weight_cells() {
  return &weight_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TSDF2D::mutable_weight_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TSDF2D.weight_cells)
  return _internal_mutable_weight_cells();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto
