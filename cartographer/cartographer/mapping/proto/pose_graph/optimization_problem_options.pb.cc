// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/optimization_problem_options.proto

#include "cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {
class OptimizationProblemOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptimizationProblemOptions> _instance;
} _OptimizationProblemOptions_default_instance_;
}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_;
    new (ptr) ::cartographer::mapping::optimization::proto::OptimizationProblemOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto}, {
      &scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, huber_scale_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, acceleration_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, local_slam_pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, local_slam_pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, odometry_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, odometry_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_use_tolerant_loss_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_tolerant_loss_param_a_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_tolerant_loss_param_b_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fix_z_in_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, use_online_imu_extrinsics_in_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, log_solver_summary_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, ceres_solver_options_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::optimization::proto::OptimizationProblemOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nHcartographer/mapping/proto/pose_graph/"
  "optimization_problem_options.proto\022\'cart"
  "ographer.mapping.optimization.proto\0324car"
  "tographer/common/proto/ceres_solver_opti"
  "ons.proto\"\223\005\n\032OptimizationProblemOptions"
  "\022\023\n\013huber_scale\030\001 \001(\001\022\033\n\023acceleration_we"
  "ight\030\010 \001(\001\022\027\n\017rotation_weight\030\t \001(\001\022*\n\"l"
  "ocal_slam_pose_translation_weight\030\016 \001(\001\022"
  "\'\n\037local_slam_pose_rotation_weight\030\017 \001(\001"
  "\022#\n\033odometry_translation_weight\030\020 \001(\001\022 \n"
  "\030odometry_rotation_weight\030\021 \001(\001\022+\n#fixed"
  "_frame_pose_translation_weight\030\013 \001(\001\022(\n "
  "fixed_frame_pose_rotation_weight\030\014 \001(\001\022*"
  "\n\"fixed_frame_pose_use_tolerant_loss\030\027 \001"
  "(\010\022.\n&fixed_frame_pose_tolerant_loss_par"
  "am_a\030\030 \001(\001\022.\n&fixed_frame_pose_tolerant_"
  "loss_param_b\030\031 \001(\001\022\023\n\013fix_z_in_3d\030\r \001(\010\022"
  "\'\n\037use_online_imu_extrinsics_in_3d\030\022 \001(\010"
  "\022\032\n\022log_solver_summary\030\005 \001(\010\022K\n\024ceres_so"
  "lver_options\030\007 \001(\0132-.cartographer.common"
  ".proto.CeresSolverOptionsJ\004\010\024\020\027b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_sccs[1] = {
  &scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, "cartographer/mapping/proto/pose_graph/optimization_problem_options.proto", 839,
  &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto), true);
namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {

// ===================================================================

void OptimizationProblemOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_._instance.get_mutable()->ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(
      ::cartographer::common::proto::CeresSolverOptions::internal_default_instance());
}
class OptimizationProblemOptions::_Internal {
 public:
  static const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options(const OptimizationProblemOptions* msg);
};

const ::cartographer::common::proto::CeresSolverOptions&
OptimizationProblemOptions::_Internal::ceres_solver_options(const OptimizationProblemOptions* msg) {
  return *msg->ceres_solver_options_;
}
void OptimizationProblemOptions::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == nullptr && ceres_solver_options_ != nullptr) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = nullptr;
}
OptimizationProblemOptions::OptimizationProblemOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}
OptimizationProblemOptions::OptimizationProblemOptions(const OptimizationProblemOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ceres_solver_options()) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from.ceres_solver_options_);
  } else {
    ceres_solver_options_ = nullptr;
  }
  ::memcpy(&huber_scale_, &from.huber_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed_frame_pose_tolerant_loss_param_b_) -
    reinterpret_cast<char*>(&huber_scale_)) + sizeof(fixed_frame_pose_tolerant_loss_param_b_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

void OptimizationProblemOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base);
  ::memset(&ceres_solver_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_frame_pose_tolerant_loss_param_b_) -
      reinterpret_cast<char*>(&ceres_solver_options_)) + sizeof(fixed_frame_pose_tolerant_loss_param_b_));
}

OptimizationProblemOptions::~OptimizationProblemOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  SharedDtor();
}

void OptimizationProblemOptions::SharedDtor() {
  if (this != internal_default_instance()) delete ceres_solver_options_;
}

void OptimizationProblemOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptimizationProblemOptions& OptimizationProblemOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base);
  return *internal_default_instance();
}


void OptimizationProblemOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ceres_solver_options_ != nullptr) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = nullptr;
  ::memset(&huber_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_frame_pose_tolerant_loss_param_b_) -
      reinterpret_cast<char*>(&huber_scale_)) + sizeof(fixed_frame_pose_tolerant_loss_param_b_));
  _internal_metadata_.Clear();
}

const char* OptimizationProblemOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double huber_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          huber_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool log_solver_summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          log_solver_summary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_solver_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double acceleration_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          acceleration_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rotation_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fixed_frame_pose_translation_weight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          fixed_frame_pose_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fixed_frame_pose_rotation_weight = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          fixed_frame_pose_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool fix_z_in_3d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          fix_z_in_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double local_slam_pose_translation_weight = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          local_slam_pose_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double local_slam_pose_rotation_weight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          local_slam_pose_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double odometry_translation_weight = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          odometry_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double odometry_rotation_weight = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          odometry_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool use_online_imu_extrinsics_in_3d = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          use_online_imu_extrinsics_in_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fixed_frame_pose_use_tolerant_loss = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          fixed_frame_pose_use_tolerant_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fixed_frame_pose_tolerant_loss_param_a = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          fixed_frame_pose_tolerant_loss_param_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fixed_frame_pose_tolerant_loss_param_b = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          fixed_frame_pose_tolerant_loss_param_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptimizationProblemOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double huber_scale = 1;
  if (!(this->huber_scale() <= 0 && this->huber_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_huber_scale(), target);
  }

  // bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_log_solver_summary(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ceres_solver_options(this), target, stream);
  }

  // double acceleration_weight = 8;
  if (!(this->acceleration_weight() <= 0 && this->acceleration_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceleration_weight(), target);
  }

  // double rotation_weight = 9;
  if (!(this->rotation_weight() <= 0 && this->rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_rotation_weight(), target);
  }

  // double fixed_frame_pose_translation_weight = 11;
  if (!(this->fixed_frame_pose_translation_weight() <= 0 && this->fixed_frame_pose_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_fixed_frame_pose_translation_weight(), target);
  }

  // double fixed_frame_pose_rotation_weight = 12;
  if (!(this->fixed_frame_pose_rotation_weight() <= 0 && this->fixed_frame_pose_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_fixed_frame_pose_rotation_weight(), target);
  }

  // bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_fix_z_in_3d(), target);
  }

  // double local_slam_pose_translation_weight = 14;
  if (!(this->local_slam_pose_translation_weight() <= 0 && this->local_slam_pose_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_local_slam_pose_translation_weight(), target);
  }

  // double local_slam_pose_rotation_weight = 15;
  if (!(this->local_slam_pose_rotation_weight() <= 0 && this->local_slam_pose_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_local_slam_pose_rotation_weight(), target);
  }

  // double odometry_translation_weight = 16;
  if (!(this->odometry_translation_weight() <= 0 && this->odometry_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_odometry_translation_weight(), target);
  }

  // double odometry_rotation_weight = 17;
  if (!(this->odometry_rotation_weight() <= 0 && this->odometry_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_odometry_rotation_weight(), target);
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->use_online_imu_extrinsics_in_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_use_online_imu_extrinsics_in_3d(), target);
  }

  // bool fixed_frame_pose_use_tolerant_loss = 23;
  if (this->fixed_frame_pose_use_tolerant_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_fixed_frame_pose_use_tolerant_loss(), target);
  }

  // double fixed_frame_pose_tolerant_loss_param_a = 24;
  if (!(this->fixed_frame_pose_tolerant_loss_param_a() <= 0 && this->fixed_frame_pose_tolerant_loss_param_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_fixed_frame_pose_tolerant_loss_param_a(), target);
  }

  // double fixed_frame_pose_tolerant_loss_param_b = 25;
  if (!(this->fixed_frame_pose_tolerant_loss_param_b() <= 0 && this->fixed_frame_pose_tolerant_loss_param_b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_fixed_frame_pose_tolerant_loss_param_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return target;
}

size_t OptimizationProblemOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ceres_solver_options_);
  }

  // double huber_scale = 1;
  if (!(this->huber_scale() <= 0 && this->huber_scale() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_weight = 8;
  if (!(this->acceleration_weight() <= 0 && this->acceleration_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 9;
  if (!(this->rotation_weight() <= 0 && this->rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double fixed_frame_pose_translation_weight = 11;
  if (!(this->fixed_frame_pose_translation_weight() <= 0 && this->fixed_frame_pose_translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double fixed_frame_pose_rotation_weight = 12;
  if (!(this->fixed_frame_pose_rotation_weight() <= 0 && this->fixed_frame_pose_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double local_slam_pose_translation_weight = 14;
  if (!(this->local_slam_pose_translation_weight() <= 0 && this->local_slam_pose_translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double local_slam_pose_rotation_weight = 15;
  if (!(this->local_slam_pose_rotation_weight() <= 0 && this->local_slam_pose_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double odometry_translation_weight = 16;
  if (!(this->odometry_translation_weight() <= 0 && this->odometry_translation_weight() >= 0)) {
    total_size += 2 + 8;
  }

  // double odometry_rotation_weight = 17;
  if (!(this->odometry_rotation_weight() <= 0 && this->odometry_rotation_weight() >= 0)) {
    total_size += 2 + 8;
  }

  // bool fixed_frame_pose_use_tolerant_loss = 23;
  if (this->fixed_frame_pose_use_tolerant_loss() != 0) {
    total_size += 2 + 1;
  }

  // bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    total_size += 1 + 1;
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->use_online_imu_extrinsics_in_3d() != 0) {
    total_size += 2 + 1;
  }

  // bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    total_size += 1 + 1;
  }

  // double fixed_frame_pose_tolerant_loss_param_a = 24;
  if (!(this->fixed_frame_pose_tolerant_loss_param_a() <= 0 && this->fixed_frame_pose_tolerant_loss_param_a() >= 0)) {
    total_size += 2 + 8;
  }

  // double fixed_frame_pose_tolerant_loss_param_b = 25;
  if (!(this->fixed_frame_pose_tolerant_loss_param_b() <= 0 && this->fixed_frame_pose_tolerant_loss_param_b() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptimizationProblemOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OptimizationProblemOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptimizationProblemOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
    MergeFrom(*source);
  }
}

void OptimizationProblemOptions::MergeFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ceres_solver_options()) {
    _internal_mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from._internal_ceres_solver_options());
  }
  if (!(from.huber_scale() <= 0 && from.huber_scale() >= 0)) {
    _internal_set_huber_scale(from._internal_huber_scale());
  }
  if (!(from.acceleration_weight() <= 0 && from.acceleration_weight() >= 0)) {
    _internal_set_acceleration_weight(from._internal_acceleration_weight());
  }
  if (!(from.rotation_weight() <= 0 && from.rotation_weight() >= 0)) {
    _internal_set_rotation_weight(from._internal_rotation_weight());
  }
  if (!(from.fixed_frame_pose_translation_weight() <= 0 && from.fixed_frame_pose_translation_weight() >= 0)) {
    _internal_set_fixed_frame_pose_translation_weight(from._internal_fixed_frame_pose_translation_weight());
  }
  if (!(from.fixed_frame_pose_rotation_weight() <= 0 && from.fixed_frame_pose_rotation_weight() >= 0)) {
    _internal_set_fixed_frame_pose_rotation_weight(from._internal_fixed_frame_pose_rotation_weight());
  }
  if (!(from.local_slam_pose_translation_weight() <= 0 && from.local_slam_pose_translation_weight() >= 0)) {
    _internal_set_local_slam_pose_translation_weight(from._internal_local_slam_pose_translation_weight());
  }
  if (!(from.local_slam_pose_rotation_weight() <= 0 && from.local_slam_pose_rotation_weight() >= 0)) {
    _internal_set_local_slam_pose_rotation_weight(from._internal_local_slam_pose_rotation_weight());
  }
  if (!(from.odometry_translation_weight() <= 0 && from.odometry_translation_weight() >= 0)) {
    _internal_set_odometry_translation_weight(from._internal_odometry_translation_weight());
  }
  if (!(from.odometry_rotation_weight() <= 0 && from.odometry_rotation_weight() >= 0)) {
    _internal_set_odometry_rotation_weight(from._internal_odometry_rotation_weight());
  }
  if (from.fixed_frame_pose_use_tolerant_loss() != 0) {
    _internal_set_fixed_frame_pose_use_tolerant_loss(from._internal_fixed_frame_pose_use_tolerant_loss());
  }
  if (from.fix_z_in_3d() != 0) {
    _internal_set_fix_z_in_3d(from._internal_fix_z_in_3d());
  }
  if (from.use_online_imu_extrinsics_in_3d() != 0) {
    _internal_set_use_online_imu_extrinsics_in_3d(from._internal_use_online_imu_extrinsics_in_3d());
  }
  if (from.log_solver_summary() != 0) {
    _internal_set_log_solver_summary(from._internal_log_solver_summary());
  }
  if (!(from.fixed_frame_pose_tolerant_loss_param_a() <= 0 && from.fixed_frame_pose_tolerant_loss_param_a() >= 0)) {
    _internal_set_fixed_frame_pose_tolerant_loss_param_a(from._internal_fixed_frame_pose_tolerant_loss_param_a());
  }
  if (!(from.fixed_frame_pose_tolerant_loss_param_b() <= 0 && from.fixed_frame_pose_tolerant_loss_param_b() >= 0)) {
    _internal_set_fixed_frame_pose_tolerant_loss_param_b(from._internal_fixed_frame_pose_tolerant_loss_param_b());
  }
}

void OptimizationProblemOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationProblemOptions::CopyFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationProblemOptions::IsInitialized() const {
  return true;
}

void OptimizationProblemOptions::InternalSwap(OptimizationProblemOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ceres_solver_options_, other->ceres_solver_options_);
  swap(huber_scale_, other->huber_scale_);
  swap(acceleration_weight_, other->acceleration_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  swap(fixed_frame_pose_translation_weight_, other->fixed_frame_pose_translation_weight_);
  swap(fixed_frame_pose_rotation_weight_, other->fixed_frame_pose_rotation_weight_);
  swap(local_slam_pose_translation_weight_, other->local_slam_pose_translation_weight_);
  swap(local_slam_pose_rotation_weight_, other->local_slam_pose_rotation_weight_);
  swap(odometry_translation_weight_, other->odometry_translation_weight_);
  swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
  swap(fixed_frame_pose_use_tolerant_loss_, other->fixed_frame_pose_use_tolerant_loss_);
  swap(fix_z_in_3d_, other->fix_z_in_3d_);
  swap(use_online_imu_extrinsics_in_3d_, other->use_online_imu_extrinsics_in_3d_);
  swap(log_solver_summary_, other->log_solver_summary_);
  swap(fixed_frame_pose_tolerant_loss_param_a_, other->fixed_frame_pose_tolerant_loss_param_a_);
  swap(fixed_frame_pose_tolerant_loss_param_b_, other->fixed_frame_pose_tolerant_loss_param_b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimizationProblemOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
