// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/constraint_builder_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h"
#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h"
#include "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h"
#include "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {
class ConstraintBuilderOptions;
class ConstraintBuilderOptionsDefaultTypeInternal;
extern ConstraintBuilderOptionsDefaultTypeInternal _ConstraintBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* Arena::CreateMaybeMessage<::cartographer::mapping::constraints::proto::ConstraintBuilderOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {

// ===================================================================

class ConstraintBuilderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.constraints.proto.ConstraintBuilderOptions) */ {
 public:
  ConstraintBuilderOptions();
  virtual ~ConstraintBuilderOptions();

  ConstraintBuilderOptions(const ConstraintBuilderOptions& from);
  ConstraintBuilderOptions(ConstraintBuilderOptions&& from) noexcept
    : ConstraintBuilderOptions() {
    *this = ::std::move(from);
  }

  inline ConstraintBuilderOptions& operator=(const ConstraintBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintBuilderOptions& operator=(ConstraintBuilderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConstraintBuilderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstraintBuilderOptions* internal_default_instance() {
    return reinterpret_cast<const ConstraintBuilderOptions*>(
               &_ConstraintBuilderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConstraintBuilderOptions& a, ConstraintBuilderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstraintBuilderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConstraintBuilderOptions* New() const final {
    return CreateMaybeMessage<ConstraintBuilderOptions>(nullptr);
  }

  ConstraintBuilderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConstraintBuilderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConstraintBuilderOptions& from);
  void MergeFrom(const ConstraintBuilderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintBuilderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.constraints.proto.ConstraintBuilderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFastCorrelativeScanMatcherOptionsFieldNumber = 9,
    kFastCorrelativeScanMatcherOptions3DFieldNumber = 10,
    kCeresScanMatcherOptionsFieldNumber = 11,
    kCeresScanMatcherOptions3DFieldNumber = 12,
    kSamplingRatioFieldNumber = 1,
    kMaxConstraintDistanceFieldNumber = 2,
    kMaxMatchVarietyDistanceFieldNumber = 3,
    kMinScoreFieldNumber = 4,
    kGlobalLocalizationMinScoreFieldNumber = 5,
    kLoopClosureTranslationWeightFieldNumber = 13,
    kLogMatchesFieldNumber = 8,
    kLoopClosureRotationWeightFieldNumber = 14,
  };
  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  bool has_fast_correlative_scan_matcher_options() const;
  private:
  bool _internal_has_fast_correlative_scan_matcher_options() const;
  public:
  void clear_fast_correlative_scan_matcher_options();
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& fast_correlative_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* release_fast_correlative_scan_matcher_options();
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* mutable_fast_correlative_scan_matcher_options();
  void set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* fast_correlative_scan_matcher_options);
  private:
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& _internal_fast_correlative_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* _internal_mutable_fast_correlative_scan_matcher_options();
  public:

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  bool has_fast_correlative_scan_matcher_options_3d() const;
  private:
  bool _internal_has_fast_correlative_scan_matcher_options_3d() const;
  public:
  void clear_fast_correlative_scan_matcher_options_3d();
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& fast_correlative_scan_matcher_options_3d() const;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* release_fast_correlative_scan_matcher_options_3d();
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* mutable_fast_correlative_scan_matcher_options_3d();
  void set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* fast_correlative_scan_matcher_options_3d);
  private:
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& _internal_fast_correlative_scan_matcher_options_3d() const;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* _internal_mutable_fast_correlative_scan_matcher_options_3d();
  public:

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  bool has_ceres_scan_matcher_options() const;
  private:
  bool _internal_has_ceres_scan_matcher_options() const;
  public:
  void clear_ceres_scan_matcher_options();
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ceres_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* release_ceres_scan_matcher_options();
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* mutable_ceres_scan_matcher_options();
  void set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options);
  private:
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& _internal_ceres_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* _internal_mutable_ceres_scan_matcher_options();
  public:

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  bool has_ceres_scan_matcher_options_3d() const;
  private:
  bool _internal_has_ceres_scan_matcher_options_3d() const;
  public:
  void clear_ceres_scan_matcher_options_3d();
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ceres_scan_matcher_options_3d() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* release_ceres_scan_matcher_options_3d();
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* mutable_ceres_scan_matcher_options_3d();
  void set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ceres_scan_matcher_options_3d);
  private:
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& _internal_ceres_scan_matcher_options_3d() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* _internal_mutable_ceres_scan_matcher_options_3d();
  public:

  // double sampling_ratio = 1;
  void clear_sampling_ratio();
  double sampling_ratio() const;
  void set_sampling_ratio(double value);
  private:
  double _internal_sampling_ratio() const;
  void _internal_set_sampling_ratio(double value);
  public:

  // double max_constraint_distance = 2;
  void clear_max_constraint_distance();
  double max_constraint_distance() const;
  void set_max_constraint_distance(double value);
  private:
  double _internal_max_constraint_distance() const;
  void _internal_set_max_constraint_distance(double value);
  public:

  // double max_match_variety_distance = 3;
  void clear_max_match_variety_distance();
  double max_match_variety_distance() const;
  void set_max_match_variety_distance(double value);
  private:
  double _internal_max_match_variety_distance() const;
  void _internal_set_max_match_variety_distance(double value);
  public:

  // double min_score = 4;
  void clear_min_score();
  double min_score() const;
  void set_min_score(double value);
  private:
  double _internal_min_score() const;
  void _internal_set_min_score(double value);
  public:

  // double global_localization_min_score = 5;
  void clear_global_localization_min_score();
  double global_localization_min_score() const;
  void set_global_localization_min_score(double value);
  private:
  double _internal_global_localization_min_score() const;
  void _internal_set_global_localization_min_score(double value);
  public:

  // double loop_closure_translation_weight = 13;
  void clear_loop_closure_translation_weight();
  double loop_closure_translation_weight() const;
  void set_loop_closure_translation_weight(double value);
  private:
  double _internal_loop_closure_translation_weight() const;
  void _internal_set_loop_closure_translation_weight(double value);
  public:

  // bool log_matches = 8;
  void clear_log_matches();
  bool log_matches() const;
  void set_log_matches(bool value);
  private:
  bool _internal_log_matches() const;
  void _internal_set_log_matches(bool value);
  public:

  // double loop_closure_rotation_weight = 14;
  void clear_loop_closure_rotation_weight();
  double loop_closure_rotation_weight() const;
  void set_loop_closure_rotation_weight(double value);
  private:
  double _internal_loop_closure_rotation_weight() const;
  void _internal_set_loop_closure_rotation_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* fast_correlative_scan_matcher_options_;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* fast_correlative_scan_matcher_options_3d_;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options_;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ceres_scan_matcher_options_3d_;
  double sampling_ratio_;
  double max_constraint_distance_;
  double max_match_variety_distance_;
  double min_score_;
  double global_localization_min_score_;
  double loop_closure_translation_weight_;
  bool log_matches_;
  double loop_closure_rotation_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConstraintBuilderOptions

// double sampling_ratio = 1;
inline void ConstraintBuilderOptions::clear_sampling_ratio() {
  sampling_ratio_ = 0;
}
inline double ConstraintBuilderOptions::_internal_sampling_ratio() const {
  return sampling_ratio_;
}
inline double ConstraintBuilderOptions::sampling_ratio() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.sampling_ratio)
  return _internal_sampling_ratio();
}
inline void ConstraintBuilderOptions::_internal_set_sampling_ratio(double value) {
  
  sampling_ratio_ = value;
}
inline void ConstraintBuilderOptions::set_sampling_ratio(double value) {
  _internal_set_sampling_ratio(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.sampling_ratio)
}

// double max_constraint_distance = 2;
inline void ConstraintBuilderOptions::clear_max_constraint_distance() {
  max_constraint_distance_ = 0;
}
inline double ConstraintBuilderOptions::_internal_max_constraint_distance() const {
  return max_constraint_distance_;
}
inline double ConstraintBuilderOptions::max_constraint_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.max_constraint_distance)
  return _internal_max_constraint_distance();
}
inline void ConstraintBuilderOptions::_internal_set_max_constraint_distance(double value) {
  
  max_constraint_distance_ = value;
}
inline void ConstraintBuilderOptions::set_max_constraint_distance(double value) {
  _internal_set_max_constraint_distance(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.max_constraint_distance)
}

// double min_score = 4;
inline void ConstraintBuilderOptions::clear_min_score() {
  min_score_ = 0;
}
inline double ConstraintBuilderOptions::_internal_min_score() const {
  return min_score_;
}
inline double ConstraintBuilderOptions::min_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.min_score)
  return _internal_min_score();
}
inline void ConstraintBuilderOptions::_internal_set_min_score(double value) {
  
  min_score_ = value;
}
inline void ConstraintBuilderOptions::set_min_score(double value) {
  _internal_set_min_score(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.min_score)
}

// double global_localization_min_score = 5;
inline void ConstraintBuilderOptions::clear_global_localization_min_score() {
  global_localization_min_score_ = 0;
}
inline double ConstraintBuilderOptions::_internal_global_localization_min_score() const {
  return global_localization_min_score_;
}
inline double ConstraintBuilderOptions::global_localization_min_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.global_localization_min_score)
  return _internal_global_localization_min_score();
}
inline void ConstraintBuilderOptions::_internal_set_global_localization_min_score(double value) {
  
  global_localization_min_score_ = value;
}
inline void ConstraintBuilderOptions::set_global_localization_min_score(double value) {
  _internal_set_global_localization_min_score(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.global_localization_min_score)
}

// double loop_closure_translation_weight = 13;
inline void ConstraintBuilderOptions::clear_loop_closure_translation_weight() {
  loop_closure_translation_weight_ = 0;
}
inline double ConstraintBuilderOptions::_internal_loop_closure_translation_weight() const {
  return loop_closure_translation_weight_;
}
inline double ConstraintBuilderOptions::loop_closure_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_translation_weight)
  return _internal_loop_closure_translation_weight();
}
inline void ConstraintBuilderOptions::_internal_set_loop_closure_translation_weight(double value) {
  
  loop_closure_translation_weight_ = value;
}
inline void ConstraintBuilderOptions::set_loop_closure_translation_weight(double value) {
  _internal_set_loop_closure_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_translation_weight)
}

// double loop_closure_rotation_weight = 14;
inline void ConstraintBuilderOptions::clear_loop_closure_rotation_weight() {
  loop_closure_rotation_weight_ = 0;
}
inline double ConstraintBuilderOptions::_internal_loop_closure_rotation_weight() const {
  return loop_closure_rotation_weight_;
}
inline double ConstraintBuilderOptions::loop_closure_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_rotation_weight)
  return _internal_loop_closure_rotation_weight();
}
inline void ConstraintBuilderOptions::_internal_set_loop_closure_rotation_weight(double value) {
  
  loop_closure_rotation_weight_ = value;
}
inline void ConstraintBuilderOptions::set_loop_closure_rotation_weight(double value) {
  _internal_set_loop_closure_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_rotation_weight)
}

// bool log_matches = 8;
inline void ConstraintBuilderOptions::clear_log_matches() {
  log_matches_ = false;
}
inline bool ConstraintBuilderOptions::_internal_log_matches() const {
  return log_matches_;
}
inline bool ConstraintBuilderOptions::log_matches() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.log_matches)
  return _internal_log_matches();
}
inline void ConstraintBuilderOptions::_internal_set_log_matches(bool value) {
  
  log_matches_ = value;
}
inline void ConstraintBuilderOptions::set_log_matches(bool value) {
  _internal_set_log_matches(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.log_matches)
}

// double max_match_variety_distance = 3;
inline void ConstraintBuilderOptions::clear_max_match_variety_distance() {
  max_match_variety_distance_ = 0;
}
inline double ConstraintBuilderOptions::_internal_max_match_variety_distance() const {
  return max_match_variety_distance_;
}
inline double ConstraintBuilderOptions::max_match_variety_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.max_match_variety_distance)
  return _internal_max_match_variety_distance();
}
inline void ConstraintBuilderOptions::_internal_set_max_match_variety_distance(double value) {
  
  max_match_variety_distance_ = value;
}
inline void ConstraintBuilderOptions::set_max_match_variety_distance(double value) {
  _internal_set_max_match_variety_distance(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.max_match_variety_distance)
}

// .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
inline bool ConstraintBuilderOptions::_internal_has_fast_correlative_scan_matcher_options() const {
  return this != internal_default_instance() && fast_correlative_scan_matcher_options_ != nullptr;
}
inline bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options() const {
  return _internal_has_fast_correlative_scan_matcher_options();
}
inline const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& ConstraintBuilderOptions::_internal_fast_correlative_scan_matcher_options() const {
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* p = fast_correlative_scan_matcher_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D*>(
      &::cartographer::mapping::scan_matching::proto::_FastCorrelativeScanMatcherOptions2D_default_instance_);
}
inline const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& ConstraintBuilderOptions::fast_correlative_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  return _internal_fast_correlative_scan_matcher_options();
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* temp = fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* ConstraintBuilderOptions::_internal_mutable_fast_correlative_scan_matcher_options() {
  
  if (fast_correlative_scan_matcher_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D>(GetArenaNoVirtual());
    fast_correlative_scan_matcher_options_ = p;
  }
  return fast_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  return _internal_mutable_fast_correlative_scan_matcher_options();
}
inline void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* fast_correlative_scan_matcher_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_correlative_scan_matcher_options_);
  }
  if (fast_correlative_scan_matcher_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fast_correlative_scan_matcher_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_correlative_scan_matcher_options, submessage_arena);
    }
    
  } else {
    
  }
  fast_correlative_scan_matcher_options_ = fast_correlative_scan_matcher_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
}

// .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
inline bool ConstraintBuilderOptions::_internal_has_ceres_scan_matcher_options() const {
  return this != internal_default_instance() && ceres_scan_matcher_options_ != nullptr;
}
inline bool ConstraintBuilderOptions::has_ceres_scan_matcher_options() const {
  return _internal_has_ceres_scan_matcher_options();
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ConstraintBuilderOptions::_internal_ceres_scan_matcher_options() const {
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* p = ceres_scan_matcher_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D*>(
      &::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions2D_default_instance_);
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ConstraintBuilderOptions::ceres_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  return _internal_ceres_scan_matcher_options();
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ConstraintBuilderOptions::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ConstraintBuilderOptions::_internal_mutable_ceres_scan_matcher_options() {
  
  if (ceres_scan_matcher_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D>(GetArenaNoVirtual());
    ceres_scan_matcher_options_ = p;
  }
  return ceres_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  return _internal_mutable_ceres_scan_matcher_options();
}
inline void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ceres_scan_matcher_options_);
  }
  if (ceres_scan_matcher_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ceres_scan_matcher_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ceres_scan_matcher_options, submessage_arena);
    }
    
  } else {
    
  }
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
}

// .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
inline bool ConstraintBuilderOptions::_internal_has_fast_correlative_scan_matcher_options_3d() const {
  return this != internal_default_instance() && fast_correlative_scan_matcher_options_3d_ != nullptr;
}
inline bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options_3d() const {
  return _internal_has_fast_correlative_scan_matcher_options_3d();
}
inline const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& ConstraintBuilderOptions::_internal_fast_correlative_scan_matcher_options_3d() const {
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* p = fast_correlative_scan_matcher_options_3d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D*>(
      &::cartographer::mapping::scan_matching::proto::_FastCorrelativeScanMatcherOptions3D_default_instance_);
}
inline const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& ConstraintBuilderOptions::fast_correlative_scan_matcher_options_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  return _internal_fast_correlative_scan_matcher_options_3d();
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* temp = fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* ConstraintBuilderOptions::_internal_mutable_fast_correlative_scan_matcher_options_3d() {
  
  if (fast_correlative_scan_matcher_options_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D>(GetArenaNoVirtual());
    fast_correlative_scan_matcher_options_3d_ = p;
  }
  return fast_correlative_scan_matcher_options_3d_;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  return _internal_mutable_fast_correlative_scan_matcher_options_3d();
}
inline void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* fast_correlative_scan_matcher_options_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_correlative_scan_matcher_options_3d_);
  }
  if (fast_correlative_scan_matcher_options_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fast_correlative_scan_matcher_options_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_correlative_scan_matcher_options_3d, submessage_arena);
    }
    
  } else {
    
  }
  fast_correlative_scan_matcher_options_3d_ = fast_correlative_scan_matcher_options_3d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
}

// .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
inline bool ConstraintBuilderOptions::_internal_has_ceres_scan_matcher_options_3d() const {
  return this != internal_default_instance() && ceres_scan_matcher_options_3d_ != nullptr;
}
inline bool ConstraintBuilderOptions::has_ceres_scan_matcher_options_3d() const {
  return _internal_has_ceres_scan_matcher_options_3d();
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ConstraintBuilderOptions::_internal_ceres_scan_matcher_options_3d() const {
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* p = ceres_scan_matcher_options_3d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D*>(
      &::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions3D_default_instance_);
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ConstraintBuilderOptions::ceres_scan_matcher_options_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  return _internal_ceres_scan_matcher_options_3d();
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ConstraintBuilderOptions::release_ceres_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* temp = ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ConstraintBuilderOptions::_internal_mutable_ceres_scan_matcher_options_3d() {
  
  if (ceres_scan_matcher_options_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D>(GetArenaNoVirtual());
    ceres_scan_matcher_options_3d_ = p;
  }
  return ceres_scan_matcher_options_3d_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  return _internal_mutable_ceres_scan_matcher_options_3d();
}
inline void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ceres_scan_matcher_options_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ceres_scan_matcher_options_3d_);
  }
  if (ceres_scan_matcher_options_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ceres_scan_matcher_options_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ceres_scan_matcher_options_3d, submessage_arena);
    }
    
  } else {
    
  }
  ceres_scan_matcher_options_3d_ = ceres_scan_matcher_options_3d;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto
