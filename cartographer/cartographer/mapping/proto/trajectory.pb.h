// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class Trajectory_Node;
class Trajectory_NodeDefaultTypeInternal;
extern Trajectory_NodeDefaultTypeInternal _Trajectory_Node_default_instance_;
class Trajectory_Submap;
class Trajectory_SubmapDefaultTypeInternal;
extern Trajectory_SubmapDefaultTypeInternal _Trajectory_Submap_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::Trajectory* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Trajectory>(Arena*);
template<> ::cartographer::mapping::proto::Trajectory_Node* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Trajectory_Node>(Arena*);
template<> ::cartographer::mapping::proto::Trajectory_Submap* Arena::CreateMaybeMessage<::cartographer::mapping::proto::Trajectory_Submap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class Trajectory_Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory.Node) */ {
 public:
  Trajectory_Node();
  virtual ~Trajectory_Node();

  Trajectory_Node(const Trajectory_Node& from);
  Trajectory_Node(Trajectory_Node&& from) noexcept
    : Trajectory_Node() {
    *this = ::std::move(from);
  }

  inline Trajectory_Node& operator=(const Trajectory_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory_Node& operator=(Trajectory_Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory_Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory_Node* internal_default_instance() {
    return reinterpret_cast<const Trajectory_Node*>(
               &_Trajectory_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Trajectory_Node& a, Trajectory_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory_Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory_Node* New() const final {
    return CreateMaybeMessage<Trajectory_Node>(nullptr);
  }

  Trajectory_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory_Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory_Node& from);
  void MergeFrom(const Trajectory_Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Trajectory.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kNodeIndexFieldNumber = 7,
  };
  // .cartographer.transform.proto.Rigid3d pose = 5;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* release_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_pose();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 node_index = 7;
  void clear_node_index();
  ::PROTOBUF_NAMESPACE_ID::int32 node_index() const;
  void set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_index() const;
  void _internal_set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class Trajectory_Submap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory.Submap) */ {
 public:
  Trajectory_Submap();
  virtual ~Trajectory_Submap();

  Trajectory_Submap(const Trajectory_Submap& from);
  Trajectory_Submap(Trajectory_Submap&& from) noexcept
    : Trajectory_Submap() {
    *this = ::std::move(from);
  }

  inline Trajectory_Submap& operator=(const Trajectory_Submap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory_Submap& operator=(Trajectory_Submap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory_Submap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory_Submap* internal_default_instance() {
    return reinterpret_cast<const Trajectory_Submap*>(
               &_Trajectory_Submap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trajectory_Submap& a, Trajectory_Submap& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory_Submap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory_Submap* New() const final {
    return CreateMaybeMessage<Trajectory_Submap>(nullptr);
  }

  Trajectory_Submap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory_Submap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory_Submap& from);
  void MergeFrom(const Trajectory_Submap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory_Submap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Trajectory.Submap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kSubmapIndexFieldNumber = 2,
  };
  // .cartographer.transform.proto.Rigid3d pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* release_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_pose() const;
  ::cartographer::transform::proto::Rigid3d* _internal_mutable_pose();
  public:

  // int32 submap_index = 2;
  void clear_submap_index();
  ::PROTOBUF_NAMESPACE_ID::int32 submap_index() const;
  void set_submap_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_submap_index() const;
  void _internal_set_submap_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory.Submap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::PROTOBUF_NAMESPACE_ID::int32 submap_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class Trajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.Trajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trajectory_Node Node;
  typedef Trajectory_Submap Submap;

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kSubmapFieldNumber = 2,
    kTrajectoryIdFieldNumber = 3,
  };
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::cartographer::mapping::proto::Trajectory_Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
      mutable_node();
  private:
  const ::cartographer::mapping::proto::Trajectory_Node& _internal_node(int index) const;
  ::cartographer::mapping::proto::Trajectory_Node* _internal_add_node();
  public:
  const ::cartographer::mapping::proto::Trajectory_Node& node(int index) const;
  ::cartographer::mapping::proto::Trajectory_Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
      node() const;

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  int submap_size() const;
  private:
  int _internal_submap_size() const;
  public:
  void clear_submap();
  ::cartographer::mapping::proto::Trajectory_Submap* mutable_submap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
      mutable_submap();
  private:
  const ::cartographer::mapping::proto::Trajectory_Submap& _internal_submap(int index) const;
  ::cartographer::mapping::proto::Trajectory_Submap* _internal_add_submap();
  public:
  const ::cartographer::mapping::proto::Trajectory_Submap& submap(int index) const;
  ::cartographer::mapping::proto::Trajectory_Submap* add_submap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
      submap() const;

  // int32 trajectory_id = 3;
  void clear_trajectory_id();
  ::PROTOBUF_NAMESPACE_ID::int32 trajectory_id() const;
  void set_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trajectory_id() const;
  void _internal_set_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node > node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap > submap_;
  ::PROTOBUF_NAMESPACE_ID::int32 trajectory_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trajectory_Node

// int32 node_index = 7;
inline void Trajectory_Node::clear_node_index() {
  node_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory_Node::_internal_node_index() const {
  return node_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory_Node::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.node_index)
  return _internal_node_index();
}
inline void Trajectory_Node::_internal_set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_index_ = value;
}
inline void Trajectory_Node::set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_index(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.node_index)
}

// int64 timestamp = 1;
inline void Trajectory_Node::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trajectory_Node::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trajectory_Node::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.timestamp)
  return _internal_timestamp();
}
inline void Trajectory_Node::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Trajectory_Node::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 5;
inline bool Trajectory_Node::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Trajectory_Node::has_pose() const {
  return _internal_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Node::_internal_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Node::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.pose)
  return _internal_pose();
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Node.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Node.pose)
  return _internal_mutable_pose();
}
inline void Trajectory_Node::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Node.pose)
}

// -------------------------------------------------------------------

// Trajectory_Submap

// int32 submap_index = 2;
inline void Trajectory_Submap::clear_submap_index() {
  submap_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory_Submap::_internal_submap_index() const {
  return submap_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory_Submap::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.submap_index)
  return _internal_submap_index();
}
inline void Trajectory_Submap::_internal_set_submap_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  submap_index_ = value;
}
inline void Trajectory_Submap::set_submap_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_submap_index(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Submap.submap_index)
}

// .cartographer.transform.proto.Rigid3d pose = 1;
inline bool Trajectory_Submap::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Trajectory_Submap::has_pose() const {
  return _internal_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Submap::_internal_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Submap::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.pose)
  return _internal_pose();
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Submap.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Submap.pose)
  return _internal_mutable_pose();
}
inline void Trajectory_Submap::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Submap.pose)
}

// -------------------------------------------------------------------

// Trajectory

// int32 trajectory_id = 3;
inline void Trajectory::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::_internal_trajectory_id() const {
  return trajectory_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.trajectory_id)
  return _internal_trajectory_id();
}
inline void Trajectory::_internal_set_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trajectory_id_ = value;
}
inline void Trajectory::set_trajectory_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.trajectory_id)
}

// repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
inline int Trajectory::_internal_node_size() const {
  return node_.size();
}
inline int Trajectory::node_size() const {
  return _internal_node_size();
}
inline void Trajectory::clear_node() {
  node_.Clear();
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
Trajectory::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.node)
  return &node_;
}
inline const ::cartographer::mapping::proto::Trajectory_Node& Trajectory::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::cartographer::mapping::proto::Trajectory_Node& Trajectory::node(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.node)
  return _internal_node(index);
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::_internal_add_node() {
  return node_.Add();
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::add_node() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
Trajectory::node() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.node)
  return node_;
}

// repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
inline int Trajectory::_internal_submap_size() const {
  return submap_.size();
}
inline int Trajectory::submap_size() const {
  return _internal_submap_size();
}
inline void Trajectory::clear_submap() {
  submap_.Clear();
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
Trajectory::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.submap)
  return &submap_;
}
inline const ::cartographer::mapping::proto::Trajectory_Submap& Trajectory::_internal_submap(int index) const {
  return submap_.Get(index);
}
inline const ::cartographer::mapping::proto::Trajectory_Submap& Trajectory::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.submap)
  return _internal_submap(index);
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::_internal_add_submap() {
  return submap_.Add();
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.submap)
  return _internal_add_submap();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
Trajectory::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.submap)
  return submap_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2ftrajectory_2eproto
