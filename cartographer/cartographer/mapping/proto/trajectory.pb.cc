// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#include "cartographer/mapping/proto/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class Trajectory_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory_Node> _instance;
} _Trajectory_Node_default_instance_;
class Trajectory_SubmapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory_Submap> _instance;
} _Trajectory_Submap_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Trajectory_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto}, {
      &scc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base,
      &scc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Trajectory_Node_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Trajectory_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Trajectory_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Trajectory_Submap_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Trajectory_Submap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Trajectory_Submap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, node_index_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Node, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Submap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Submap, submap_index_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory_Submap, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, node_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Trajectory, submap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::Trajectory_Node)},
  { 8, -1, sizeof(::cartographer::mapping::proto::Trajectory_Submap)},
  { 15, -1, sizeof(::cartographer::mapping::proto::Trajectory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_Trajectory_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_Trajectory_Submap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_Trajectory_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+cartographer/mapping/proto/trajectory."
  "proto\022\032cartographer.mapping.proto\032,carto"
  "grapher/transform/proto/transform.proto\""
  "\326\002\n\nTrajectory\022\025\n\rtrajectory_id\030\003 \001(\005\0229\n"
  "\004node\030\001 \003(\0132+.cartographer.mapping.proto"
  ".Trajectory.Node\022=\n\006submap\030\002 \003(\0132-.carto"
  "grapher.mapping.proto.Trajectory.Submap\032"
  "b\n\004Node\022\022\n\nnode_index\030\007 \001(\005\022\021\n\ttimestamp"
  "\030\001 \001(\003\0223\n\004pose\030\005 \001(\0132%.cartographer.tran"
  "sform.proto.Rigid3d\032S\n\006Submap\022\024\n\014submap_"
  "index\030\002 \001(\005\0223\n\004pose\030\001 \001(\0132%.cartographer"
  ".transform.proto.Rigid3dB\026B\024TrajectoryOu"
  "terClassb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_sccs[3] = {
  &scc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base,
  &scc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base,
  &scc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_2eproto, "cartographer/mapping/proto/trajectory.proto", 496,
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_2eproto, 3, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftrajectory_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void Trajectory_Node::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Trajectory_Node_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class Trajectory_Node::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const Trajectory_Node* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Trajectory_Node::_Internal::pose(const Trajectory_Node* msg) {
  return *msg->pose_;
}
void Trajectory_Node::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
Trajectory_Node::Trajectory_Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory.Node)
}
Trajectory_Node::Trajectory_Node(const Trajectory_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(node_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Node)
}

void Trajectory_Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(node_index_));
}

Trajectory_Node::~Trajectory_Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Node)
  SharedDtor();
}

void Trajectory_Node::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void Trajectory_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory_Node& Trajectory_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_Node_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void Trajectory_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(node_index_));
  _internal_metadata_.Clear();
}

const char* Trajectory_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pose(this), target, stream);
  }

  // int32 node_index = 7;
  if (this->node_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_node_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Node)
  return target;
}

size_t Trajectory_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 node_index = 7;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory.Node)
    MergeFrom(*source);
  }
}

void Trajectory_Node::MergeFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.node_index() != 0) {
    _internal_set_node_index(from._internal_node_index());
  }
}

void Trajectory_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Node::CopyFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Node::IsInitialized() const {
  return true;
}

void Trajectory_Node::InternalSwap(Trajectory_Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  swap(node_index_, other->node_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectory_Submap::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Trajectory_Submap_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class Trajectory_Submap::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const Trajectory_Submap* msg);
};

const ::cartographer::transform::proto::Rigid3d&
Trajectory_Submap::_Internal::pose(const Trajectory_Submap* msg) {
  return *msg->pose_;
}
void Trajectory_Submap::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
Trajectory_Submap::Trajectory_Submap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory.Submap)
}
Trajectory_Submap::Trajectory_Submap(const Trajectory_Submap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  submap_index_ = from.submap_index_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Submap)
}

void Trajectory_Submap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(submap_index_));
}

Trajectory_Submap::~Trajectory_Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Submap)
  SharedDtor();
}

void Trajectory_Submap::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void Trajectory_Submap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory_Submap& Trajectory_Submap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_Submap_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void Trajectory_Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Submap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  submap_index_ = 0;
  _internal_metadata_.Clear();
}

const char* Trajectory_Submap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 submap_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          submap_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory_Submap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Submap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Submap)
  return target;
}

size_t Trajectory_Submap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Submap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_submap_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory_Submap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory_Submap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory_Submap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory.Submap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory.Submap)
    MergeFrom(*source);
  }
}

void Trajectory_Submap::MergeFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_pose());
  }
  if (from.submap_index() != 0) {
    _internal_set_submap_index(from._internal_submap_index());
  }
}

void Trajectory_Submap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Submap::CopyFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Submap::IsInitialized() const {
  return true;
}

void Trajectory_Submap::InternalSwap(Trajectory_Submap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(submap_index_, other->submap_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory_Submap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
class Trajectory::_Internal {
 public:
};

Trajectory::Trajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_(from.node_),
      submap_(from.submap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory)
}

void Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base);
  trajectory_id_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  submap_.Clear();
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 trajectory_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_submap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_submap(i), target, stream);
  }

  // int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_trajectory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  total_size += 1UL * this->_internal_submap_size();
  for (const auto& msg : this->submap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trajectory_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  submap_.MergeFrom(from.submap_);
  if (from.trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  submap_.InternalSwap(&other->submap_);
  swap(trajectory_id_, other->trajectory_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Trajectory_Node* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Trajectory_Node >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Trajectory_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Trajectory_Submap* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Trajectory_Submap >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Trajectory_Submap >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Trajectory* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Trajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
