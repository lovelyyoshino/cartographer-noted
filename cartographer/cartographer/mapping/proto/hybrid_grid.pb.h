// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/hybrid_grid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class HybridGrid;
class HybridGridDefaultTypeInternal;
extern HybridGridDefaultTypeInternal _HybridGrid_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::proto::HybridGrid* Arena::CreateMaybeMessage<::cartographer::mapping::proto::HybridGrid>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class HybridGrid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.HybridGrid) */ {
 public:
  HybridGrid();
  virtual ~HybridGrid();

  HybridGrid(const HybridGrid& from);
  HybridGrid(HybridGrid&& from) noexcept
    : HybridGrid() {
    *this = ::std::move(from);
  }

  inline HybridGrid& operator=(const HybridGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline HybridGrid& operator=(HybridGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HybridGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HybridGrid* internal_default_instance() {
    return reinterpret_cast<const HybridGrid*>(
               &_HybridGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HybridGrid& a, HybridGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(HybridGrid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HybridGrid* New() const final {
    return CreateMaybeMessage<HybridGrid>(nullptr);
  }

  HybridGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HybridGrid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HybridGrid& from);
  void MergeFrom(const HybridGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HybridGrid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.proto.HybridGrid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXIndicesFieldNumber = 3,
    kYIndicesFieldNumber = 4,
    kZIndicesFieldNumber = 5,
    kValuesFieldNumber = 6,
    kResolutionFieldNumber = 1,
  };
  // repeated sint32 x_indices = 3;
  int x_indices_size() const;
  private:
  int _internal_x_indices_size() const;
  public:
  void clear_x_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_x_indices() const;
  void _internal_add_x_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_x_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 x_indices(int index) const;
  void set_x_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_x_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      x_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_x_indices();

  // repeated sint32 y_indices = 4;
  int y_indices_size() const;
  private:
  int _internal_y_indices_size() const;
  public:
  void clear_y_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_y_indices() const;
  void _internal_add_y_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_y_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 y_indices(int index) const;
  void set_y_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_y_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      y_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_y_indices();

  // repeated sint32 z_indices = 5;
  int z_indices_size() const;
  private:
  int _internal_z_indices_size() const;
  public:
  void clear_z_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_z_indices() const;
  void _internal_add_z_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_z_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 z_indices(int index) const;
  void set_z_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_z_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      z_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_z_indices();

  // repeated int32 values = 6;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // float resolution = 1;
  void clear_resolution();
  float resolution() const;
  void set_resolution(float value);
  private:
  float _internal_resolution() const;
  void _internal_set_resolution(float value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.HybridGrid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > x_indices_;
  mutable std::atomic<int> _x_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > y_indices_;
  mutable std::atomic<int> _y_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > z_indices_;
  mutable std::atomic<int> _z_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  float resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HybridGrid

// float resolution = 1;
inline void HybridGrid::clear_resolution() {
  resolution_ = 0;
}
inline float HybridGrid::_internal_resolution() const {
  return resolution_;
}
inline float HybridGrid::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.HybridGrid.resolution)
  return _internal_resolution();
}
inline void HybridGrid::_internal_set_resolution(float value) {
  
  resolution_ = value;
}
inline void HybridGrid::set_resolution(float value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.HybridGrid.resolution)
}

// repeated sint32 x_indices = 3;
inline int HybridGrid::_internal_x_indices_size() const {
  return x_indices_.size();
}
inline int HybridGrid::x_indices_size() const {
  return _internal_x_indices_size();
}
inline void HybridGrid::clear_x_indices() {
  x_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::_internal_x_indices(int index) const {
  return x_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::x_indices(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.HybridGrid.x_indices)
  return _internal_x_indices(index);
}
inline void HybridGrid::set_x_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  x_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.HybridGrid.x_indices)
}
inline void HybridGrid::_internal_add_x_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  x_indices_.Add(value);
}
inline void HybridGrid::add_x_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_x_indices(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.HybridGrid.x_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::_internal_x_indices() const {
  return x_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::x_indices() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.HybridGrid.x_indices)
  return _internal_x_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::_internal_mutable_x_indices() {
  return &x_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::mutable_x_indices() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.HybridGrid.x_indices)
  return _internal_mutable_x_indices();
}

// repeated sint32 y_indices = 4;
inline int HybridGrid::_internal_y_indices_size() const {
  return y_indices_.size();
}
inline int HybridGrid::y_indices_size() const {
  return _internal_y_indices_size();
}
inline void HybridGrid::clear_y_indices() {
  y_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::_internal_y_indices(int index) const {
  return y_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::y_indices(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.HybridGrid.y_indices)
  return _internal_y_indices(index);
}
inline void HybridGrid::set_y_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  y_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.HybridGrid.y_indices)
}
inline void HybridGrid::_internal_add_y_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  y_indices_.Add(value);
}
inline void HybridGrid::add_y_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_y_indices(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.HybridGrid.y_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::_internal_y_indices() const {
  return y_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::y_indices() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.HybridGrid.y_indices)
  return _internal_y_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::_internal_mutable_y_indices() {
  return &y_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::mutable_y_indices() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.HybridGrid.y_indices)
  return _internal_mutable_y_indices();
}

// repeated sint32 z_indices = 5;
inline int HybridGrid::_internal_z_indices_size() const {
  return z_indices_.size();
}
inline int HybridGrid::z_indices_size() const {
  return _internal_z_indices_size();
}
inline void HybridGrid::clear_z_indices() {
  z_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::_internal_z_indices(int index) const {
  return z_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::z_indices(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.HybridGrid.z_indices)
  return _internal_z_indices(index);
}
inline void HybridGrid::set_z_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  z_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.HybridGrid.z_indices)
}
inline void HybridGrid::_internal_add_z_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  z_indices_.Add(value);
}
inline void HybridGrid::add_z_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_z_indices(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.HybridGrid.z_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::_internal_z_indices() const {
  return z_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::z_indices() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.HybridGrid.z_indices)
  return _internal_z_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::_internal_mutable_z_indices() {
  return &z_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::mutable_z_indices() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.HybridGrid.z_indices)
  return _internal_mutable_z_indices();
}

// repeated int32 values = 6;
inline int HybridGrid::_internal_values_size() const {
  return values_.size();
}
inline int HybridGrid::values_size() const {
  return _internal_values_size();
}
inline void HybridGrid::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HybridGrid::values(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.HybridGrid.values)
  return _internal_values(index);
}
inline void HybridGrid::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.HybridGrid.values)
}
inline void HybridGrid::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void HybridGrid::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.HybridGrid.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HybridGrid::values() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.HybridGrid.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HybridGrid::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.HybridGrid.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto
