// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/hybrid_grid.proto

#include "cartographer/mapping/proto/hybrid_grid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cartographer {
namespace mapping {
namespace proto {
class HybridGridDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HybridGrid> _instance;
} _HybridGrid_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_HybridGrid_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_HybridGrid_default_instance_;
    new (ptr) ::cartographer::mapping::proto::HybridGrid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::HybridGrid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HybridGrid_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HybridGrid_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::HybridGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::HybridGrid, resolution_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::HybridGrid, x_indices_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::HybridGrid, y_indices_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::HybridGrid, z_indices_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::HybridGrid, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::HybridGrid)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_HybridGrid_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,cartographer/mapping/proto/hybrid_grid"
  ".proto\022\032cartographer.mapping.proto\"i\n\nHy"
  "bridGrid\022\022\n\nresolution\030\001 \001(\002\022\021\n\tx_indice"
  "s\030\003 \003(\021\022\021\n\ty_indices\030\004 \003(\021\022\021\n\tz_indices\030"
  "\005 \003(\021\022\016\n\006values\030\006 \003(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_sccs[1] = {
  &scc_info_HybridGrid_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto, "cartographer/mapping/proto/hybrid_grid.proto", 189,
  &descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void HybridGrid::InitAsDefaultInstance() {
}
class HybridGrid::_Internal {
 public:
};

HybridGrid::HybridGrid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.HybridGrid)
}
HybridGrid::HybridGrid(const HybridGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      x_indices_(from.x_indices_),
      y_indices_(from.y_indices_),
      z_indices_(from.z_indices_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resolution_ = from.resolution_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.HybridGrid)
}

void HybridGrid::SharedCtor() {
  resolution_ = 0;
}

HybridGrid::~HybridGrid() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.HybridGrid)
  SharedDtor();
}

void HybridGrid::SharedDtor() {
}

void HybridGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridGrid& HybridGrid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HybridGrid_cartographer_2fmapping_2fproto_2fhybrid_5fgrid_2eproto.base);
  return *internal_default_instance();
}


void HybridGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.HybridGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_indices_.Clear();
  y_indices_.Clear();
  z_indices_.Clear();
  values_.Clear();
  resolution_ = 0;
  _internal_metadata_.Clear();
}

const char* HybridGrid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated sint32 x_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_x_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_x_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 y_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_y_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_y_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 z_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_z_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_z_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HybridGrid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.HybridGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float resolution = 1;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_resolution(), target);
  }

  // repeated sint32 x_indices = 3;
  {
    int byte_size = _x_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          3, _internal_x_indices(), byte_size, target);
    }
  }

  // repeated sint32 y_indices = 4;
  {
    int byte_size = _y_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          4, _internal_y_indices(), byte_size, target);
    }
  }

  // repeated sint32 z_indices = 5;
  {
    int byte_size = _z_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          5, _internal_z_indices(), byte_size, target);
    }
  }

  // repeated int32 values = 6;
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.HybridGrid)
  return target;
}

size_t HybridGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.HybridGrid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 x_indices = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->x_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _x_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 y_indices = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->y_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _y_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 z_indices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->z_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _z_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 values = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float resolution = 1;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridGrid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.HybridGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridGrid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HybridGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.HybridGrid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.HybridGrid)
    MergeFrom(*source);
  }
}

void HybridGrid::MergeFrom(const HybridGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.HybridGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_indices_.MergeFrom(from.x_indices_);
  y_indices_.MergeFrom(from.y_indices_);
  z_indices_.MergeFrom(from.z_indices_);
  values_.MergeFrom(from.values_);
  if (!(from.resolution() <= 0 && from.resolution() >= 0)) {
    _internal_set_resolution(from._internal_resolution());
  }
}

void HybridGrid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.HybridGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridGrid::CopyFrom(const HybridGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.HybridGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridGrid::IsInitialized() const {
  return true;
}

void HybridGrid::InternalSwap(HybridGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  x_indices_.InternalSwap(&other->x_indices_);
  y_indices_.InternalSwap(&other->y_indices_);
  z_indices_.InternalSwap(&other->z_indices_);
  values_.InternalSwap(&other->values_);
  swap(resolution_, other->resolution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HybridGrid::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::HybridGrid* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::HybridGrid >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::HybridGrid >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
