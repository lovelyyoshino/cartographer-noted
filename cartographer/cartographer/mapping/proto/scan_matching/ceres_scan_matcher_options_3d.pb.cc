// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto

#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {
class CeresScanMatcherOptions3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CeresScanMatcherOptions3D> _instance;
} _CeresScanMatcherOptions3D_default_instance_;
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions3D_default_instance_;
    new (ptr) ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto}, {
      &scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, occupied_space_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, only_optimize_yaw_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D, ceres_solver_options_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions3D_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nLcartographer/mapping/proto/scan_matchi"
  "ng/ceres_scan_matcher_options_3d.proto\022("
  "cartographer.mapping.scan_matching.proto"
  "\0324cartographer/common/proto/ceres_solver"
  "_options.proto\"\327\001\n\031CeresScanMatcherOptio"
  "ns3D\022\035\n\025occupied_space_weight\030\001 \003(\001\022\032\n\022t"
  "ranslation_weight\030\002 \001(\001\022\027\n\017rotation_weig"
  "ht\030\003 \001(\001\022\031\n\021only_optimize_yaw\030\005 \001(\010\022K\n\024c"
  "eres_solver_options\030\006 \001(\0132-.cartographer"
  ".common.proto.CeresSolverOptionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_sccs[1] = {
  &scc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto, "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto", 400,
  &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto), true);
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

// ===================================================================

void CeresScanMatcherOptions3D::InitAsDefaultInstance() {
  ::cartographer::mapping::scan_matching::proto::_CeresScanMatcherOptions3D_default_instance_._instance.get_mutable()->ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(
      ::cartographer::common::proto::CeresSolverOptions::internal_default_instance());
}
class CeresScanMatcherOptions3D::_Internal {
 public:
  static const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options(const CeresScanMatcherOptions3D* msg);
};

const ::cartographer::common::proto::CeresSolverOptions&
CeresScanMatcherOptions3D::_Internal::ceres_solver_options(const CeresScanMatcherOptions3D* msg) {
  return *msg->ceres_solver_options_;
}
void CeresScanMatcherOptions3D::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == nullptr && ceres_solver_options_ != nullptr) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = nullptr;
}
CeresScanMatcherOptions3D::CeresScanMatcherOptions3D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}
CeresScanMatcherOptions3D::CeresScanMatcherOptions3D(const CeresScanMatcherOptions3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      occupied_space_weight_(from.occupied_space_weight_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ceres_solver_options()) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from.ceres_solver_options_);
  } else {
    ceres_solver_options_ = nullptr;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_optimize_yaw_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(only_optimize_yaw_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}

void CeresScanMatcherOptions3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto.base);
  ::memset(&ceres_solver_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_optimize_yaw_) -
      reinterpret_cast<char*>(&ceres_solver_options_)) + sizeof(only_optimize_yaw_));
}

CeresScanMatcherOptions3D::~CeresScanMatcherOptions3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  SharedDtor();
}

void CeresScanMatcherOptions3D::SharedDtor() {
  if (this != internal_default_instance()) delete ceres_solver_options_;
}

void CeresScanMatcherOptions3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CeresScanMatcherOptions3D& CeresScanMatcherOptions3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto.base);
  return *internal_default_instance();
}


void CeresScanMatcherOptions3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  occupied_space_weight_.Clear();
  if (GetArenaNoVirtual() == nullptr && ceres_solver_options_ != nullptr) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = nullptr;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_optimize_yaw_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(only_optimize_yaw_));
  _internal_metadata_.Clear();
}

const char* CeresScanMatcherOptions3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double occupied_space_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_occupied_space_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_occupied_space_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double translation_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rotation_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool only_optimize_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          only_optimize_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_solver_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CeresScanMatcherOptions3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double occupied_space_weight = 1;
  if (this->_internal_occupied_space_weight_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_occupied_space_weight(), target);
  }

  // double translation_weight = 2;
  if (!(this->translation_weight() <= 0 && this->translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_translation_weight(), target);
  }

  // double rotation_weight = 3;
  if (!(this->rotation_weight() <= 0 && this->rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotation_weight(), target);
  }

  // bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_only_optimize_yaw(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ceres_solver_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  return target;
}

size_t CeresScanMatcherOptions3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double occupied_space_weight = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_occupied_space_weight_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _occupied_space_weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ceres_solver_options_);
  }

  // double translation_weight = 2;
  if (!(this->translation_weight() <= 0 && this->translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 3;
  if (!(this->rotation_weight() <= 0 && this->rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CeresScanMatcherOptions3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  const CeresScanMatcherOptions3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CeresScanMatcherOptions3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
    MergeFrom(*source);
  }
}

void CeresScanMatcherOptions3D::MergeFrom(const CeresScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  occupied_space_weight_.MergeFrom(from.occupied_space_weight_);
  if (from.has_ceres_solver_options()) {
    _internal_mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from._internal_ceres_solver_options());
  }
  if (!(from.translation_weight() <= 0 && from.translation_weight() >= 0)) {
    _internal_set_translation_weight(from._internal_translation_weight());
  }
  if (!(from.rotation_weight() <= 0 && from.rotation_weight() >= 0)) {
    _internal_set_rotation_weight(from._internal_rotation_weight());
  }
  if (from.only_optimize_yaw() != 0) {
    _internal_set_only_optimize_yaw(from._internal_only_optimize_yaw());
  }
}

void CeresScanMatcherOptions3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CeresScanMatcherOptions3D::CopyFrom(const CeresScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresScanMatcherOptions3D::IsInitialized() const {
  return true;
}

void CeresScanMatcherOptions3D::InternalSwap(CeresScanMatcherOptions3D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  occupied_space_weight_.InternalSwap(&other->occupied_space_weight_);
  swap(ceres_solver_options_, other->ceres_solver_options_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  swap(only_optimize_yaw_, other->only_optimize_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CeresScanMatcherOptions3D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* Arena::CreateMaybeMessage< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
