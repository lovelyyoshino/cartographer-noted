// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.proto

#include "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {
class FastCorrelativeScanMatcherOptions3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastCorrelativeScanMatcherOptions3D> _instance;
} _FastCorrelativeScanMatcherOptions3D_default_instance_;
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_FastCorrelativeScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::scan_matching::proto::_FastCorrelativeScanMatcherOptions3D_default_instance_;
    new (ptr) ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastCorrelativeScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FastCorrelativeScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, branch_and_bound_depth_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, full_resolution_depth_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, min_rotational_score_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, min_low_resolution_score_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, linear_xy_search_window_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, linear_z_search_window_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D, angular_search_window_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::scan_matching::proto::_FastCorrelativeScanMatcherOptions3D_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nWcartographer/mapping/proto/scan_matchi"
  "ng/fast_correlative_scan_matcher_options"
  "_3d.proto\022(cartographer.mapping.scan_mat"
  "ching.proto\"\204\002\n#FastCorrelativeScanMatch"
  "erOptions3D\022\036\n\026branch_and_bound_depth\030\002 "
  "\001(\005\022\035\n\025full_resolution_depth\030\010 \001(\005\022\034\n\024mi"
  "n_rotational_score\030\004 \001(\001\022 \n\030min_low_reso"
  "lution_score\030\t \001(\001\022\037\n\027linear_xy_search_w"
  "indow\030\005 \001(\001\022\036\n\026linear_z_search_window\030\006 "
  "\001(\001\022\035\n\025angular_search_window\030\007 \001(\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_sccs[1] = {
  &scc_info_FastCorrelativeScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto, "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.proto", 402,
  &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto), true);
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

// ===================================================================

void FastCorrelativeScanMatcherOptions3D::InitAsDefaultInstance() {
}
class FastCorrelativeScanMatcherOptions3D::_Internal {
 public:
};

FastCorrelativeScanMatcherOptions3D::FastCorrelativeScanMatcherOptions3D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
}
FastCorrelativeScanMatcherOptions3D::FastCorrelativeScanMatcherOptions3D(const FastCorrelativeScanMatcherOptions3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_rotational_score_, &from.min_rotational_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_low_resolution_score_) -
    reinterpret_cast<char*>(&min_rotational_score_)) + sizeof(min_low_resolution_score_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
}

void FastCorrelativeScanMatcherOptions3D::SharedCtor() {
  ::memset(&min_rotational_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_low_resolution_score_) -
      reinterpret_cast<char*>(&min_rotational_score_)) + sizeof(min_low_resolution_score_));
}

FastCorrelativeScanMatcherOptions3D::~FastCorrelativeScanMatcherOptions3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  SharedDtor();
}

void FastCorrelativeScanMatcherOptions3D::SharedDtor() {
}

void FastCorrelativeScanMatcherOptions3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastCorrelativeScanMatcherOptions3D& FastCorrelativeScanMatcherOptions3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastCorrelativeScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto.base);
  return *internal_default_instance();
}


void FastCorrelativeScanMatcherOptions3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_rotational_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_low_resolution_score_) -
      reinterpret_cast<char*>(&min_rotational_score_)) + sizeof(min_low_resolution_score_));
  _internal_metadata_.Clear();
}

const char* FastCorrelativeScanMatcherOptions3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 branch_and_bound_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          branch_and_bound_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min_rotational_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          min_rotational_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double linear_xy_search_window = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          linear_xy_search_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double linear_z_search_window = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          linear_z_search_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angular_search_window = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          angular_search_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 full_resolution_depth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          full_resolution_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min_low_resolution_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          min_low_resolution_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastCorrelativeScanMatcherOptions3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 branch_and_bound_depth = 2;
  if (this->branch_and_bound_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_branch_and_bound_depth(), target);
  }

  // double min_rotational_score = 4;
  if (!(this->min_rotational_score() <= 0 && this->min_rotational_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_rotational_score(), target);
  }

  // double linear_xy_search_window = 5;
  if (!(this->linear_xy_search_window() <= 0 && this->linear_xy_search_window() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_linear_xy_search_window(), target);
  }

  // double linear_z_search_window = 6;
  if (!(this->linear_z_search_window() <= 0 && this->linear_z_search_window() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_linear_z_search_window(), target);
  }

  // double angular_search_window = 7;
  if (!(this->angular_search_window() <= 0 && this->angular_search_window() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_angular_search_window(), target);
  }

  // int32 full_resolution_depth = 8;
  if (this->full_resolution_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_full_resolution_depth(), target);
  }

  // double min_low_resolution_score = 9;
  if (!(this->min_low_resolution_score() <= 0 && this->min_low_resolution_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_min_low_resolution_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  return target;
}

size_t FastCorrelativeScanMatcherOptions3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min_rotational_score = 4;
  if (!(this->min_rotational_score() <= 0 && this->min_rotational_score() >= 0)) {
    total_size += 1 + 8;
  }

  // double linear_xy_search_window = 5;
  if (!(this->linear_xy_search_window() <= 0 && this->linear_xy_search_window() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 branch_and_bound_depth = 2;
  if (this->branch_and_bound_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_branch_and_bound_depth());
  }

  // int32 full_resolution_depth = 8;
  if (this->full_resolution_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_full_resolution_depth());
  }

  // double linear_z_search_window = 6;
  if (!(this->linear_z_search_window() <= 0 && this->linear_z_search_window() >= 0)) {
    total_size += 1 + 8;
  }

  // double angular_search_window = 7;
  if (!(this->angular_search_window() <= 0 && this->angular_search_window() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_low_resolution_score = 9;
  if (!(this->min_low_resolution_score() <= 0 && this->min_low_resolution_score() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastCorrelativeScanMatcherOptions3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  const FastCorrelativeScanMatcherOptions3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastCorrelativeScanMatcherOptions3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
    MergeFrom(*source);
  }
}

void FastCorrelativeScanMatcherOptions3D::MergeFrom(const FastCorrelativeScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_rotational_score() <= 0 && from.min_rotational_score() >= 0)) {
    _internal_set_min_rotational_score(from._internal_min_rotational_score());
  }
  if (!(from.linear_xy_search_window() <= 0 && from.linear_xy_search_window() >= 0)) {
    _internal_set_linear_xy_search_window(from._internal_linear_xy_search_window());
  }
  if (from.branch_and_bound_depth() != 0) {
    _internal_set_branch_and_bound_depth(from._internal_branch_and_bound_depth());
  }
  if (from.full_resolution_depth() != 0) {
    _internal_set_full_resolution_depth(from._internal_full_resolution_depth());
  }
  if (!(from.linear_z_search_window() <= 0 && from.linear_z_search_window() >= 0)) {
    _internal_set_linear_z_search_window(from._internal_linear_z_search_window());
  }
  if (!(from.angular_search_window() <= 0 && from.angular_search_window() >= 0)) {
    _internal_set_angular_search_window(from._internal_angular_search_window());
  }
  if (!(from.min_low_resolution_score() <= 0 && from.min_low_resolution_score() >= 0)) {
    _internal_set_min_low_resolution_score(from._internal_min_low_resolution_score());
  }
}

void FastCorrelativeScanMatcherOptions3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastCorrelativeScanMatcherOptions3D::CopyFrom(const FastCorrelativeScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastCorrelativeScanMatcherOptions3D::IsInitialized() const {
  return true;
}

void FastCorrelativeScanMatcherOptions3D::InternalSwap(FastCorrelativeScanMatcherOptions3D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_rotational_score_, other->min_rotational_score_);
  swap(linear_xy_search_window_, other->linear_xy_search_window_);
  swap(branch_and_bound_depth_, other->branch_and_bound_depth_);
  swap(full_resolution_depth_, other->full_resolution_depth_);
  swap(linear_z_search_window_, other->linear_z_search_window_);
  swap(angular_search_window_, other->angular_search_window_);
  swap(min_low_resolution_score_, other->min_low_resolution_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastCorrelativeScanMatcherOptions3D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* Arena::CreateMaybeMessage< ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
