// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/local_trajectory_builder_options_2d.proto

#include "cartographer/mapping/proto/local_trajectory_builder_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionFilterOptions_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubmapsOptions2D_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CeresScanMatcherOptions2D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealTimeCorrelativeScanMatcherOptions_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class LocalTrajectoryBuilderOptions2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions2D> _instance;
} _LocalTrajectoryBuilderOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsscc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto}, {
      &scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto.base,
      &scc_info_RealTimeCorrelativeScanMatcherOptions_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto.base,
      &scc_info_CeresScanMatcherOptions2D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto.base,
      &scc_info_MotionFilterOptions_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto.base,
      &scc_info_PoseExtrapolatorOptions_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto.base,
      &scc_info_SubmapsOptions2D_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, min_range_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, max_range_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, min_z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, max_z_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, missing_data_ray_length_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, num_accumulated_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, voxel_filter_size_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, adaptive_voxel_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, loop_closure_adaptive_voxel_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, use_online_correlative_scan_matching_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, real_time_correlative_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, use_intensity_ceres_scan_matching_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, ceres_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, motion_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, imu_gravity_time_constant_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, pose_extrapolator_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, submaps_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D, use_imu_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nDcartographer/mapping/proto/local_traje"
  "ctory_builder_options_2d.proto\022\032cartogra"
  "pher.mapping.proto\0326cartographer/mapping"
  "/proto/motion_filter_options.proto\032:cart"
  "ographer/mapping/proto/pose_extrapolator"
  "_options.proto\032=cartographer/sensor/prot"
  "o/adaptive_voxel_filter_options.proto\032Lc"
  "artographer/mapping/proto/scan_matching/"
  "ceres_scan_matcher_options_2d.proto\032Ycar"
  "tographer/mapping/proto/scan_matching/re"
  "al_time_correlative_scan_matcher_options"
  ".proto\0323cartographer/mapping/proto/subma"
  "ps_options_2d.proto\"\376\007\n\037LocalTrajectoryB"
  "uilderOptions2D\022\021\n\tmin_range\030\016 \001(\002\022\021\n\tma"
  "x_range\030\017 \001(\002\022\r\n\005min_z\030\001 \001(\002\022\r\n\005max_z\030\002 "
  "\001(\002\022\037\n\027missing_data_ray_length\030\020 \001(\002\022\"\n\032"
  "num_accumulated_range_data\030\023 \001(\005\022\031\n\021voxe"
  "l_filter_size\030\003 \001(\002\022\\\n\035adaptive_voxel_fi"
  "lter_options\030\006 \001(\01325.cartographer.sensor"
  ".proto.AdaptiveVoxelFilterOptions\022i\n*loo"
  "p_closure_adaptive_voxel_filter_options\030"
  "\024 \001(\01325.cartographer.sensor.proto.Adapti"
  "veVoxelFilterOptions\022,\n$use_online_corre"
  "lative_scan_matching\030\005 \001(\010\022\203\001\n*real_time"
  "_correlative_scan_matcher_options\030\007 \001(\0132"
  "O.cartographer.mapping.scan_matching.pro"
  "to.RealTimeCorrelativeScanMatcherOptions"
  "\022)\n!use_intensity_ceres_scan_matching\030\004 "
  "\001(\010\022g\n\032ceres_scan_matcher_options\030\010 \001(\0132"
  "C.cartographer.mapping.scan_matching.pro"
  "to.CeresScanMatcherOptions2D\022N\n\025motion_f"
  "ilter_options\030\r \001(\0132/.cartographer.mappi"
  "ng.proto.MotionFilterOptions\022!\n\031imu_grav"
  "ity_time_constant\030\021 \001(\001\022V\n\031pose_extrapol"
  "ator_options\030\025 \001(\01323.cartographer.mappin"
  "g.proto.PoseExtrapolatorOptions\022E\n\017subma"
  "ps_options\030\013 \001(\0132,.cartographer.mapping."
  "proto.SubmapsOptions2D\022\024\n\014use_imu_data\030\014"
  " \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_deps[6] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto,
  &::descriptor_table_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_sccs[1] = {
  &scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_once;
static bool descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = {
  &descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_initialized, descriptor_table_protodef_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto, "cartographer/mapping/proto/local_trajectory_builder_options_2d.proto", 1532,
  &descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_sccs, descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto), true);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void LocalTrajectoryBuilderOptions2D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->loop_closure_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D*>(
      ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->motion_filter_options_ = const_cast< ::cartographer::mapping::proto::MotionFilterOptions*>(
      ::cartographer::mapping::proto::MotionFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->pose_extrapolator_options_ = const_cast< ::cartographer::mapping::proto::PoseExtrapolatorOptions*>(
      ::cartographer::mapping::proto::PoseExtrapolatorOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->submaps_options_ = const_cast< ::cartographer::mapping::proto::SubmapsOptions2D*>(
      ::cartographer::mapping::proto::SubmapsOptions2D::internal_default_instance());
}
class LocalTrajectoryBuilderOptions2D::_Internal {
 public:
  static const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& loop_closure_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ceres_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::proto::MotionFilterOptions& motion_filter_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::proto::PoseExtrapolatorOptions& pose_extrapolator_options(const LocalTrajectoryBuilderOptions2D* msg);
  static const ::cartographer::mapping::proto::SubmapsOptions2D& submaps_options(const LocalTrajectoryBuilderOptions2D* msg);
};

const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&
LocalTrajectoryBuilderOptions2D::_Internal::adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->adaptive_voxel_filter_options_;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&
LocalTrajectoryBuilderOptions2D::_Internal::loop_closure_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->loop_closure_adaptive_voxel_filter_options_;
}
const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions&
LocalTrajectoryBuilderOptions2D::_Internal::real_time_correlative_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->real_time_correlative_scan_matcher_options_;
}
const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D&
LocalTrajectoryBuilderOptions2D::_Internal::ceres_scan_matcher_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->ceres_scan_matcher_options_;
}
const ::cartographer::mapping::proto::MotionFilterOptions&
LocalTrajectoryBuilderOptions2D::_Internal::motion_filter_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->motion_filter_options_;
}
const ::cartographer::mapping::proto::PoseExtrapolatorOptions&
LocalTrajectoryBuilderOptions2D::_Internal::pose_extrapolator_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->pose_extrapolator_options_;
}
const ::cartographer::mapping::proto::SubmapsOptions2D&
LocalTrajectoryBuilderOptions2D::_Internal::submaps_options(const LocalTrajectoryBuilderOptions2D* msg) {
  return *msg->submaps_options_;
}
void LocalTrajectoryBuilderOptions2D::clear_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == nullptr && adaptive_voxel_filter_options_ != nullptr) {
    delete adaptive_voxel_filter_options_;
  }
  adaptive_voxel_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_loop_closure_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == nullptr && loop_closure_adaptive_voxel_filter_options_ != nullptr) {
    delete loop_closure_adaptive_voxel_filter_options_;
  }
  loop_closure_adaptive_voxel_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == nullptr && real_time_correlative_scan_matcher_options_ != nullptr) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == nullptr && ceres_scan_matcher_options_ != nullptr) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == nullptr && motion_filter_options_ != nullptr) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_pose_extrapolator_options() {
  if (GetArenaNoVirtual() == nullptr && pose_extrapolator_options_ != nullptr) {
    delete pose_extrapolator_options_;
  }
  pose_extrapolator_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions2D::clear_submaps_options() {
  if (GetArenaNoVirtual() == nullptr && submaps_options_ != nullptr) {
    delete submaps_options_;
  }
  submaps_options_ = nullptr;
}
LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}
LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D(const LocalTrajectoryBuilderOptions2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_adaptive_voxel_filter_options()) {
    adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.adaptive_voxel_filter_options_);
  } else {
    adaptive_voxel_filter_options_ = nullptr;
  }
  if (from._internal_has_real_time_correlative_scan_matcher_options()) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from.real_time_correlative_scan_matcher_options_);
  } else {
    real_time_correlative_scan_matcher_options_ = nullptr;
  }
  if (from._internal_has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = nullptr;
  }
  if (from._internal_has_submaps_options()) {
    submaps_options_ = new ::cartographer::mapping::proto::SubmapsOptions2D(*from.submaps_options_);
  } else {
    submaps_options_ = nullptr;
  }
  if (from._internal_has_motion_filter_options()) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions(*from.motion_filter_options_);
  } else {
    motion_filter_options_ = nullptr;
  }
  if (from._internal_has_loop_closure_adaptive_voxel_filter_options()) {
    loop_closure_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.loop_closure_adaptive_voxel_filter_options_);
  } else {
    loop_closure_adaptive_voxel_filter_options_ = nullptr;
  }
  if (from._internal_has_pose_extrapolator_options()) {
    pose_extrapolator_options_ = new ::cartographer::mapping::proto::PoseExtrapolatorOptions(*from.pose_extrapolator_options_);
  } else {
    pose_extrapolator_options_ = nullptr;
  }
  ::memcpy(&min_z_, &from.min_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_accumulated_range_data_) -
    reinterpret_cast<char*>(&min_z_)) + sizeof(num_accumulated_range_data_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

void LocalTrajectoryBuilderOptions2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto.base);
  ::memset(&adaptive_voxel_filter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accumulated_range_data_) -
      reinterpret_cast<char*>(&adaptive_voxel_filter_options_)) + sizeof(num_accumulated_range_data_));
}

LocalTrajectoryBuilderOptions2D::~LocalTrajectoryBuilderOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions2D::SharedDtor() {
  if (this != internal_default_instance()) delete adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete real_time_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete submaps_options_;
  if (this != internal_default_instance()) delete motion_filter_options_;
  if (this != internal_default_instance()) delete loop_closure_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete pose_extrapolator_options_;
}

void LocalTrajectoryBuilderOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalTrajectoryBuilderOptions2D& LocalTrajectoryBuilderOptions2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto.base);
  return *internal_default_instance();
}


void LocalTrajectoryBuilderOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && adaptive_voxel_filter_options_ != nullptr) {
    delete adaptive_voxel_filter_options_;
  }
  adaptive_voxel_filter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && real_time_correlative_scan_matcher_options_ != nullptr) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ceres_scan_matcher_options_ != nullptr) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && submaps_options_ != nullptr) {
    delete submaps_options_;
  }
  submaps_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && motion_filter_options_ != nullptr) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && loop_closure_adaptive_voxel_filter_options_ != nullptr) {
    delete loop_closure_adaptive_voxel_filter_options_;
  }
  loop_closure_adaptive_voxel_filter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pose_extrapolator_options_ != nullptr) {
    delete pose_extrapolator_options_;
  }
  pose_extrapolator_options_ = nullptr;
  ::memset(&min_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accumulated_range_data_) -
      reinterpret_cast<char*>(&min_z_)) + sizeof(num_accumulated_range_data_));
  _internal_metadata_.Clear();
}

const char* LocalTrajectoryBuilderOptions2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_z = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voxel_filter_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          voxel_filter_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool use_intensity_ceres_scan_matching = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_intensity_ceres_scan_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_online_correlative_scan_matching = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_online_correlative_scan_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptive_voxel_filter_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_real_time_correlative_scan_matcher_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ceres_scan_matcher_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_submaps_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_imu_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          use_imu_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_filter_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_range = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          min_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_range = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float missing_data_ray_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          missing_data_ray_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double imu_gravity_time_constant = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          imu_gravity_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 num_accumulated_range_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          num_accumulated_range_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_loop_closure_adaptive_voxel_filter_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_extrapolator_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalTrajectoryBuilderOptions2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_z = 1;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_z(), target);
  }

  // float max_z = 2;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_z(), target);
  }

  // float voxel_filter_size = 3;
  if (!(this->voxel_filter_size() <= 0 && this->voxel_filter_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_voxel_filter_size(), target);
  }

  // bool use_intensity_ceres_scan_matching = 4;
  if (this->use_intensity_ceres_scan_matching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_intensity_ceres_scan_matching(), target);
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_online_correlative_scan_matching(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::adaptive_voxel_filter_options(this), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::real_time_correlative_scan_matcher_options(this), target, stream);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ceres_scan_matcher_options(this), target, stream);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::submaps_options(this), target, stream);
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_imu_data(), target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::motion_filter_options(this), target, stream);
  }

  // float min_range = 14;
  if (!(this->min_range() <= 0 && this->min_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_min_range(), target);
  }

  // float max_range = 15;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_max_range(), target);
  }

  // float missing_data_ray_length = 16;
  if (!(this->missing_data_ray_length() <= 0 && this->missing_data_ray_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_missing_data_ray_length(), target);
  }

  // double imu_gravity_time_constant = 17;
  if (!(this->imu_gravity_time_constant() <= 0 && this->imu_gravity_time_constant() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_imu_gravity_time_constant(), target);
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_num_accumulated_range_data(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::loop_closure_adaptive_voxel_filter_options(this), target, stream);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->has_pose_extrapolator_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::pose_extrapolator_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return target;
}

size_t LocalTrajectoryBuilderOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *real_time_correlative_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submaps_options_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_filter_options_);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loop_closure_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->has_pose_extrapolator_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_extrapolator_options_);
  }

  // float min_z = 1;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_z = 2;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float voxel_filter_size = 3;
  if (!(this->voxel_filter_size() <= 0 && this->voxel_filter_size() >= 0)) {
    total_size += 1 + 4;
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // bool use_intensity_ceres_scan_matching = 4;
  if (this->use_intensity_ceres_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    total_size += 1 + 1;
  }

  // float min_range = 14;
  if (!(this->min_range() <= 0 && this->min_range() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_range = 15;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    total_size += 1 + 4;
  }

  // double imu_gravity_time_constant = 17;
  if (!(this->imu_gravity_time_constant() <= 0 && this->imu_gravity_time_constant() >= 0)) {
    total_size += 2 + 8;
  }

  // float missing_data_ray_length = 16;
  if (!(this->missing_data_ray_length() <= 0 && this->missing_data_ray_length() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_accumulated_range_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrajectoryBuilderOptions2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalTrajectoryBuilderOptions2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions2D::MergeFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_adaptive_voxel_filter_options()) {
    _internal_mutable_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from._internal_adaptive_voxel_filter_options());
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    _internal_mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from._internal_real_time_correlative_scan_matcher_options());
  }
  if (from.has_ceres_scan_matcher_options()) {
    _internal_mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::MergeFrom(from._internal_ceres_scan_matcher_options());
  }
  if (from.has_submaps_options()) {
    _internal_mutable_submaps_options()->::cartographer::mapping::proto::SubmapsOptions2D::MergeFrom(from._internal_submaps_options());
  }
  if (from.has_motion_filter_options()) {
    _internal_mutable_motion_filter_options()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(from._internal_motion_filter_options());
  }
  if (from.has_loop_closure_adaptive_voxel_filter_options()) {
    _internal_mutable_loop_closure_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from._internal_loop_closure_adaptive_voxel_filter_options());
  }
  if (from.has_pose_extrapolator_options()) {
    _internal_mutable_pose_extrapolator_options()->::cartographer::mapping::proto::PoseExtrapolatorOptions::MergeFrom(from._internal_pose_extrapolator_options());
  }
  if (!(from.min_z() <= 0 && from.min_z() >= 0)) {
    _internal_set_min_z(from._internal_min_z());
  }
  if (!(from.max_z() <= 0 && from.max_z() >= 0)) {
    _internal_set_max_z(from._internal_max_z());
  }
  if (!(from.voxel_filter_size() <= 0 && from.voxel_filter_size() >= 0)) {
    _internal_set_voxel_filter_size(from._internal_voxel_filter_size());
  }
  if (from.use_online_correlative_scan_matching() != 0) {
    _internal_set_use_online_correlative_scan_matching(from._internal_use_online_correlative_scan_matching());
  }
  if (from.use_intensity_ceres_scan_matching() != 0) {
    _internal_set_use_intensity_ceres_scan_matching(from._internal_use_intensity_ceres_scan_matching());
  }
  if (from.use_imu_data() != 0) {
    _internal_set_use_imu_data(from._internal_use_imu_data());
  }
  if (!(from.min_range() <= 0 && from.min_range() >= 0)) {
    _internal_set_min_range(from._internal_min_range());
  }
  if (!(from.max_range() <= 0 && from.max_range() >= 0)) {
    _internal_set_max_range(from._internal_max_range());
  }
  if (!(from.imu_gravity_time_constant() <= 0 && from.imu_gravity_time_constant() >= 0)) {
    _internal_set_imu_gravity_time_constant(from._internal_imu_gravity_time_constant());
  }
  if (!(from.missing_data_ray_length() <= 0 && from.missing_data_ray_length() >= 0)) {
    _internal_set_missing_data_ray_length(from._internal_missing_data_ray_length());
  }
  if (from.num_accumulated_range_data() != 0) {
    _internal_set_num_accumulated_range_data(from._internal_num_accumulated_range_data());
  }
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions2D::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions2D::InternalSwap(LocalTrajectoryBuilderOptions2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(adaptive_voxel_filter_options_, other->adaptive_voxel_filter_options_);
  swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(submaps_options_, other->submaps_options_);
  swap(motion_filter_options_, other->motion_filter_options_);
  swap(loop_closure_adaptive_voxel_filter_options_, other->loop_closure_adaptive_voxel_filter_options_);
  swap(pose_extrapolator_options_, other->pose_extrapolator_options_);
  swap(min_z_, other->min_z_);
  swap(max_z_, other->max_z_);
  swap(voxel_filter_size_, other->voxel_filter_size_);
  swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  swap(use_intensity_ceres_scan_matching_, other->use_intensity_ceres_scan_matching_);
  swap(use_imu_data_, other->use_imu_data_);
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(missing_data_ray_length_, other->missing_data_ray_length_);
  swap(num_accumulated_range_data_, other->num_accumulated_range_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTrajectoryBuilderOptions2D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
